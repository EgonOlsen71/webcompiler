PROGRAMSTART:
JSR START
0:
NOP
5:
NOP
JSR GOSUB
JSR 1000
NOP
JSR GOSUB
JSR 56500
NOP
JSR GOSUB
JSR 62000
NOP
JSR GOSUB
JSR 45800
10:
NOP
JSR GOSUB
JSR 57000
NOP
JSR GOSUB
JSR 10000
NOP
MOV Y,#0{INTEGER}
MOV X,FF%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP0
JMP SKIP0
NSKIP0:
JMP 10
NOP
SKIP0:
20:
NOP
JSR GOSUB
JSR 40500
30:
NOP
JSR GOSUB
JSR 44000
NOP
JSR GOSUB
JSR 52000
60:
NOP
JMP 60000
1000:
NOP
1010:
NOP
JSR COMPACTMAX
MOV Y,#147{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
NOP
JSR COMPACTMAX
MOV Y,#14{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
NOP
JSR COMPACTMAX
MOV Y,#8{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
1020:
NOP
MOVB 53280,#6{INTEGER}
NOP
MOVB 53281,#6{INTEGER}
NOP
MOVB 646,#1{INTEGER}
1030:
NOP
JMP RETURN
10000:
NOP
10010:
NOP
JSR GOSUB
JSR 40100
NOP
MOV B,#{STRING}
MOV DA${STRING},B
NOP
MOV Y,#0{INTEGER}
MOV DC%{INTEGER},Y
NOP
MOV Y,#1{INTEGER}
MOV FF%{INTEGER},Y
10020:
NOP
JSR GOSUB
JSR 51000
NOP
MOV Y,#0{INTEGER}
MOV TC{REAL},Y
NOP
MOV Y,#0{INTEGER}
MOV CN%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV CK%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV X,ER%{INTEGER}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP1
JMP SKIP1
NSKIP1:
JSR GOSUB
NOP
JSR 13000
NOP
NOP
MOV Y,#0{INTEGER}
MOV FF%{INTEGER},Y
JMP RETURN
NOP
SKIP1:
10030:
NOP
MOVB 2023,#4{INTEGER}
NOP
JSR GOSUB
JSR 50000
10040:
NOP
MOV Y,#0{INTEGER}
MOV X,DO%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP2
JMP SKIP2
NSKIP2:
NOP
NOP
MOV Y,#0{INTEGER}
MOV X,ER%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP3
JMP SKIP3
NSKIP3:
JSR GOSUB
JSR 11000
JMP 10030
NOP
SKIP3:
NOP
SKIP2:
10050:
NOP
MOV Y,#0{INTEGER}
MOV X,ER%{INTEGER}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP4
JMP SKIP4
NSKIP4:
JMP 56000
NOP
SKIP4:
10060:
NOP
MOV Y,#1{INTEGER}
MOV X,DO%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP5
JMP SKIP5
NSKIP5:
JSR GOSUB
NOP
JSR 10500
JSR GOSUB
NOP
JSR 12000
SKIP5:
10070:
NOP
JSR GOSUB
JSR 51500
10080:
NOP
JMP RETURN
10500:
NOP
10510:
NOP
MOV Y,#0{INTEGER}
PUSH Y
CHGCTX #1
MOV B,DA${STRING}
CHGCTX #0
JSR LEN
POP Y
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP6
JMP SKIP6
NSKIP6:
JMP RETURN
NOP
SKIP6:
10520:
NOP
MOV Y,DC%{INTEGER}
PUSH Y
NOP
MOV A,DA${STRING}
POP X
MOV G,DT$[]{STRING}
JSR ARRAYSTORE
NOP
MOV B,#{STRING}
MOV DA${STRING},B
NOP
MOV X,DC%{INTEGER}
JSR FINX
MOV DC%{INTEGER},X
10530:
NOP
JMP RETURN
11000:
NOP
11010:
NOP
JSR COMPACTMAX
MOV B,BY${STRING}
MOV A,DA${STRING}
JSR CONCAT
JSR COPYSTR
MOV DA${STRING},A
NOP
MOV X,CN%{INTEGER}
JSR FINX
MOV CN%{INTEGER},X
NOP
MOV Y,#1{INTEGER}
MOV X,TC{REAL}
ADD X,Y
MOV TC{REAL},X
11020:
NOP
MOV Y,#250{INTEGER}
PUSH Y
CHGCTX #1
MOV B,DA${STRING}
CHGCTX #0
JSR LEN
POP Y
GT X,Y
CMP X,#0{REAL}
JNE NSKIP7
JMP SKIP7
NSKIP7:
JSR GOSUB
NOP
JSR 10500
SKIP7:
11030:
NOP
MOV Y,ML%{INTEGER}
MOV X,CN%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP8
JMP SKIP8
NSKIP8:
JSR GOSUB
NOP
JSR 10500
JSR GOSUB
NOP
JSR 12000
SKIP8:
11040:
NOP
JMP RETURN
12000:
NOP
12005:
NOP
MOV Y,#0{INTEGER}
MOV X,CN%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP9
JMP SKIP9
NSKIP9:
JMP RETURN
NOP
SKIP9:
12010:
NOP
MOV X,CK%{INTEGER}
JSR FINX
MOV CK%{INTEGER},X
NOP
MOV A,#Processing chunk{STRING}
JSR STROUT
NOP
MOV X,CK%{INTEGER}
JSR INTOUT
JSR CRSRRIGHT
NOP
MOV A,#...{STRING}
JSR STROUT
12030:
NOP
JSR GOSUB
JSR 41000
NOP
JSR GOSUB
JSR 42000
NOP
MOV A,MG${STRING}
JSR STROUT
JSR LINEBREAK
12040:
NOP
MOV Y,#0{INTEGER}
MOV CN%{INTEGER},Y
NOP
MOV B,#{STRING}
MOV DA${STRING},B
NOP
MOV Y,#0{INTEGER}
MOV DC%{INTEGER},Y
NOP
JMP RETURN
13000:
NOP
13010:
NOP
JSR LINEBREAK
NOP
MOV A,#Press any key!{STRING}
JSR STROUT
JSR LINEBREAK
13020:
NOP
JSR GETSTR
MOV A${STRING},A
NOP
MOV B,#{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP10
JMP SKIP10
NSKIP10:
JMP 13020
NOP
SKIP10:
13030:
NOP
JMP RETURN
39000:
NOP
39010:
NOP
MOV Y,#255{INTEGER}
MOV X,TB{REAL}
AND X,Y
MOV LB%{INTEGER},X
NOP
MOV A,#8{INTEGER}
MOV X,TB{REAL}
SHR X,A
MOV Y,X
INT X,Y
MOV HB%{INTEGER},X
NOP
JMP RETURN
40000:
NOP
40010:
NOP
JSR COMPACTMAX
MOV Y,#147{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
40015:
NOP
INPUT0:
JSR CLEARQUEUE
JSR COMPACTMAX
MOV A,#Filename{STRING}
JSR STROUT
JSR QMARKOUT1
JSR INPUTSTR
MOV OF${STRING},A
JSR QUEUESIZE
CMP X,#0{REAL}
JE INPUTCHECK0
JSR EXTRAIGNORED
INPUTCHECK0:
NOP
MOV B,#{STRING}
MOV A,OF${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP11
JMP SKIP11
NSKIP11:
JMP 40015
NOP
SKIP11:
40020:
NOP
JMP RETURN
40100:
NOP
40120:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV Y,#10{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV Y,I{REAL}
PUSH Y
NOP
MOV A,#{STRING}
POP X
MOV G,DT$[]{STRING}
JSR ARRAYSTORE
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
40130:
NOP
MOV Y,#9999999{INTEGER}
PUSH Y
MOV Y,#1{INTEGER}
RND X,Y
POP Y
MUL X,Y
MOV Y,X
INT X,Y
MOV RN{REAL},X
40140:
NOP
JSR COMPACTMAX
MOV Y,RN{REAL}
CHGCTX #1
JSR STR
JSR COPYSTR
MOV T${STRING},A
NOP
JSR COMPACTMAX
MOV Y,#1{INTEGER}
PUSH Y
CHGCTX #1
MOV B,T${STRING}
CHGCTX #0
JSR LEN
POP Y
SUB X,Y
MOV C,X
CHGCTX #1
MOV B,T${STRING}
JSR RIGHT
JSR COPYSTR
MOV T${STRING},A
40150:
NOP
JSR COMPACTMAX
MOV Y,#53266.0{REAL}
MOVB X,(Y)
MOV Y,X
CHGCTX #1
JSR STR
JSR COPYSTR
MOV R${STRING},A
NOP
JSR COMPACTMAX
MOV Y,#1{INTEGER}
PUSH Y
CHGCTX #1
MOV B,R${STRING}
CHGCTX #0
JSR LEN
POP Y
SUB X,Y
MOV C,X
CHGCTX #1
MOV B,R${STRING}
JSR RIGHT
JSR COPYSTR
MOV R${STRING},A
40160:
NOP
JSR COMPACTMAX
MOV B,#-{STRING}
MOV A,T${STRING}
JSR CONCAT
MOV B,R${STRING}
JSR CONCAT
MOV B,#-{STRING}
JSR CONCAT
MOV B,OF${STRING}
JSR CONCAT
MOV B,#.bin{STRING}
JSR CONCAT
JSR COPYSTR
MOV TF${STRING},A
40180:
NOP
JMP RETURN
40500:
NOP
40502:
NOP
MOV Y,#2{INTEGER}
MOV X,TC{REAL}
LT X,Y
CMP X,#0{REAL}
JNE NSKIP12
JMP SKIP12
NSKIP12:
JSR LINEBREAK
NOP
MOV B,#Error: File not found!{STRING}
NOP
MOV A,B
JSR STROUT
JSR LINEBREAK
JMP 60000
NOP
NOP
SKIP12:
40505:
NOP
MOV A,#Starting remote compiler...{STRING}
JSR STROUT
40510:
NOP
MOV Y,#0{INTEGER}
MOV TL{REAL},Y
NOP
MOV Y,#0{INTEGER}
MOV DC%{INTEGER},Y
NOP
JSR COMPACTMAX
MOV B,#WiCompile{STRING}
MOV A,GU${STRING}
JSR CONCAT
JSR COPYSTR
MOV UR${STRING},A
40520:
NOP
JSR COMPACTMAX
MOV B,#?file={STRING}
MOV A,UR${STRING}
JSR CONCAT
MOV B,TF${STRING}
JSR CONCAT
JSR COPYSTR
MOV UR${STRING},A
40522:
NOP
MOV Y,#0{INTEGER}
MOV X,SA{REAL}
GT X,Y
CMP X,#0{REAL}
JNE NSKIP13
JMP SKIP13
NSKIP13:
NOP
NOP
MOV Y,SA{REAL}
MOV N{REAL},Y
JSR GOSUB
NOP
JSR 40900
NOP
NOP
JSR COMPACTMAX
MOV B,#&sa={STRING}
MOV A,UR${STRING}
JSR CONCAT
MOV B,NS${STRING}
JSR CONCAT
JSR COPYSTR
MOV UR${STRING},A
SKIP13:
40523:
NOP
MOV Y,#0{INTEGER}
MOV X,HS{REAL}
LTEQ X,Y
CMP X,#0{REAL}
JNE NSKIP14
JMP SKIP14
NSKIP14:
JMP 40526
NOP
SKIP14:
40524:
NOP
MOV Y,HS{REAL}
MOV N{REAL},Y
NOP
JSR GOSUB
JSR 40900
NOP
MOV B,NS${STRING}
MOV HS${STRING},B
NOP
MOV Y,HE{REAL}
MOV N{REAL},Y
NOP
JSR GOSUB
JSR 40900
40525:
NOP
JSR COMPACTMAX
MOV B,#&mh={STRING}
MOV A,UR${STRING}
JSR CONCAT
MOV B,HS${STRING}
JSR CONCAT
MOV B,#-{STRING}
JSR CONCAT
MOV B,NS${STRING}
JSR CONCAT
JSR COPYSTR
MOV UR${STRING},A
40526:
NOP
MOV Y,#0{INTEGER}
MOV X,CL%{INTEGER}
GT X,Y
CMP X,#0{REAL}
JNE NSKIP15
JMP SKIP15
NSKIP15:
NOP
NOP
MOV Y,CL%{INTEGER}
MOV N{REAL},Y
JSR GOSUB
NOP
JSR 40900
NOP
NOP
JSR COMPACTMAX
MOV B,#&cl={STRING}
MOV A,UR${STRING}
JSR CONCAT
MOV B,NS${STRING}
JSR CONCAT
JSR COPYSTR
MOV UR${STRING},A
SKIP15:
40530:
NOP
JSR GOSUB
JSR 46500
NOP
JSR GOSUB
JSR 41500
40550:
NOP
JSR GOSUB
JSR 42000
NOP
MOV A,#ok{STRING}
JSR STROUT
JSR LINEBREAK
40560:
NOP
MOV A,#Waiting for result...{STRING}
JSR STROUT
40570:
NOP
MOV Y,#0{INTEGER}
MOV TL{REAL},Y
NOP
MOV Y,#0{INTEGER}
MOV DC%{INTEGER},Y
NOP
JSR COMPACTMAX
MOV B,#WiCompile{STRING}
MOV A,GU${STRING}
JSR CONCAT
JSR COPYSTR
MOV UR${STRING},A
40580:
NOP
JSR COMPACTMAX
MOV B,#?poll=1&file={STRING}
MOV A,UR${STRING}
JSR CONCAT
MOV B,TF${STRING}
JSR CONCAT
JSR COPYSTR
MOV UR${STRING},A
40590:
NOP
JSR GOSUB
JSR 46500
NOP
JSR GOSUB
JSR 41500
40600:
NOP
JSR GOSUB
JSR 42000
NOP
MOV B,#no{STRING}
MOV A,MG${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP16
JMP SKIP16
NSKIP16:
JSR GOSUB
NOP
JSR 40800
NOP
NOP
MOV A,#.{STRING}
JSR STROUT
JMP 40590
NOP
SKIP16:
40650:
NOP
MOV B,MG${STRING}
MOV TF${STRING},B
NOP
MOV A,#ok{STRING}
JSR STROUT
JSR LINEBREAK
40660:
NOP
JMP RETURN
40800:
NOP
40810:
NOP
MOV B,#000000{STRING}
MOV TI${STRING},B
NOP
MOV Y,#90{INTEGER}
MOV X,TI{REAL}
ADD X,Y
MOV OT{REAL},X
NOP
MOVB 2023,#23{INTEGER}
40820:
NOP
MOV Y,OT{REAL}
MOV X,TI{REAL}
LT X,Y
CMP X,#0{REAL}
JNE NSKIP17
JMP SKIP17
NSKIP17:
JMP 40820
NOP
SKIP17:
40830:
NOP
MOVB 2023,#32{INTEGER}
NOP
JMP RETURN
40900:
NOP
40910:
NOP
JSR COMPACTMAX
MOV Y,N{REAL}
CHGCTX #1
JSR STR
JSR COPYSTR
MOV NS${STRING},A
40920:
NOP
MOV Y,#0{INTEGER}
MOV X,N{REAL}
LT X,Y
CMP X,#0{REAL}
JNE NSKIP18
JMP SKIP18
NSKIP18:
JMP RETURN
NOP
SKIP18:
40930:
NOP
JSR COMPACTMAX
MOV Y,#1{INTEGER}
PUSH Y
CHGCTX #1
MOV B,NS${STRING}
CHGCTX #0
JSR LEN
POP Y
SUB X,Y
MOV C,X
CHGCTX #1
MOV B,NS${STRING}
JSR RIGHT
JSR COPYSTR
MOV NS${STRING},A
NOP
JMP RETURN
41000:
NOP
41010:
NOP
JSR GOSUB
JSR 45500
41020:
NOP
JSR GOSUB
JSR 46500
41030:
NOP
JSR GOSUB
JSR 41500
NOP
JMP RETURN
41500:
NOP
41510:
NOP
MOVB 2023,#18{INTEGER}
NOP
MOV X,TT%{INTEGER}
MOVB 171,X
NOP
JSR SETUPMULTIPARS
MOV X,BU{REAL}
JSR COPYREALPAR
JSR ADDCOLON
MOV X,US{REAL}
JSR SYSTEMCALLDYN
JSR PULLDOWNMULTIPARS
41520:
NOP
MOVB X,171
MOV Y,#0{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP19
JMP SKIP19
NSKIP19:
JMP 56000
NOP
SKIP19:
41530:
NOP
MOV X,TT%{INTEGER}
MOVB 171,X
NOP
JSR SETUPMULTIPARS
MOV Y,#200{INTEGER}
MOV X,BU{REAL}
ADD X,Y
JSR COPYREALPAR
JSR ADDCOLON
MOV X,UG{REAL}
JSR SYSTEMCALLDYN
JSR PULLDOWNMULTIPARS
41540:
NOP
MOVB X,171
MOV Y,#0{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP20
JMP SKIP20
NSKIP20:
JMP 56000
NOP
SKIP20:
41550:
NOP
JSR GOSUB
JSR 46000
NOP
MOV Y,LE%{INTEGER}
CMP Y,#0{REAL}
JNE NSKIP21
JMP SKIP21
NSKIP21:
JMP 56200
NOP
SKIP21:
41560:
NOP
MOV Y,#0{INTEGER}
MOV ER%{INTEGER},Y
NOP
MOVB X,170
MOV A,#8{INTEGER}
SHL X,A
PUSH X
MOVB X,169
POP Y
ADD X,Y
MOV BR%{INTEGER},X
NOP
MOVB 2023,#32{INTEGER}
NOP
JMP RETURN
42000:
NOP
42010:
NOP
MOV B,#{STRING}
MOV MG${STRING},B
NOP
MOV Y,#0{INTEGER}
MOV X,BR%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP22
JMP SKIP22
NSKIP22:
JMP RETURN
NOP
SKIP22:
42020:
NOP
MOV Y,#200{INTEGER}
MOV X,BU{REAL}
ADD X,Y
MOV I{REAL},X
NOP
MOV Y,#199{INTEGER}
MOV X,BU{REAL}
ADD X,Y
MOV Y,BR%{INTEGER}
ADD X,Y
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
42030:
NOP
MOV Y,I{REAL}
MOVB X,(Y)
MOV DD%{INTEGER},X
42040:
NOP
JSR GOSUB
JSR 47300
42060:
NOP
JSR COMPACTMAX
MOV Y,DD%{INTEGER}
CHGCTX #1
JSR CHR
MOV B,A
MOV A,MG${STRING}
JSR CONCAT
JSR COPYSTR
MOV MG${STRING},A
42070:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
42080:
NOP
MOV Y,#5{INTEGER}
PUSH Y
CHGCTX #1
MOV B,MG${STRING}
CHGCTX #0
JSR LEN
POP Y
LTEQ X,Y
CMP X,#0{REAL}
JNE NSKIP23
JMP SKIP23
NSKIP23:
JMP RETURN
NOP
SKIP23:
42090:
NOP
JSR COMPACTMAX
MOV C,#5{INTEGER}
CHGCTX #1
MOV B,MG${STRING}
JSR LEFT
JSR COPYSTR
MOV A${STRING},A
NOP
MOV B,#Error{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
PUSH X
CHGCTX #1
MOV B,#error{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP24
JMP SKIP24
NSKIP24:
JMP 43000
NOP
SKIP24:
42100:
NOP
JMP RETURN
43000:
NOP
43010:
NOP
JSR GOSUB
JSR 51500
NOP
MOV A,#error{STRING}
JSR STROUT
JSR LINEBREAK
NOP
JSR LINEBREAK
NOP
MOV A,MG${STRING}
JSR STROUT
JSR LINEBREAK
NOP
JMP 60000
44000:
NOP
44010:
NOP
MOV A,#Downloading file...{STRING}
JSR STROUT
NOP
JSR GOSUB
JSR 48000
44020:
NOP
MOV Y,#0{INTEGER}
MOV TL{REAL},Y
NOP
MOV Y,#0{INTEGER}
MOV PT%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV DC%{INTEGER},Y
44025:
NOP
JSR GOSUB
JSR 44500
44030:
NOP
JSR GOSUB
JSR 46500
NOP
JSR GOSUB
JSR 41500
44040:
NOP
MOV Y,#200{INTEGER}
MOV X,BU{REAL}
ADD X,Y
MOV Y,X
MOVB X,(Y)
MOV NC%{INTEGER},X
NOP
MOVB 2023,#16{INTEGER}
44050:
NOP
MOV B,#{STRING}
MOV DA${STRING},B
NOP
MOV Y,#0{INTEGER}
MOV P%{INTEGER},Y
NOP
MOV Y,#201{INTEGER}
MOV X,BU{REAL}
ADD X,Y
MOV I{REAL},X
NOP
MOV Y,#199{INTEGER}
MOV X,BU{REAL}
ADD X,Y
MOV Y,BR%{INTEGER}
ADD X,Y
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
44060:
NOP
JSR COMPACTMAX
MOV Y,I{REAL}
MOVB X,(Y)
MOV Y,X
CHGCTX #1
JSR CHR
MOV B,A
MOV A,DA${STRING}
JSR CONCAT
JSR COPYSTR
MOV DA${STRING},A
44070:
NOP
MOV Y,#32{INTEGER}
PUSH Y
CHGCTX #1
MOV B,DA${STRING}
CHGCTX #0
JSR LEN
POP Y
GT X,Y
CMP X,#0{REAL}
JNE NSKIP25
JMP SKIP25
NSKIP25:
JSR GOSUB
NOP
JSR 49000
JSR GOSUB
NOP
JSR 44300
SKIP25:
44080:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
MOV Y,#0{INTEGER}
PUSH Y
CHGCTX #1
MOV B,DA${STRING}
CHGCTX #0
JSR LEN
POP Y
GT X,Y
CMP X,#0{REAL}
JNE NSKIP26
JMP SKIP26
NSKIP26:
JSR GOSUB
NOP
JSR 49000
SKIP26:
44090:
NOP
MOV Y,#0{INTEGER}
MOV X,NC%{INTEGER}
GT X,Y
CMP X,#0{REAL}
JNE NSKIP27
JMP SKIP27
NSKIP27:
NOP
NOP
MOV Y,NC%{INTEGER}
MOV PT%{INTEGER},Y
JMP 44025
NOP
SKIP27:
44100:
NOP
JSR GOSUB
JSR 48500
NOP
MOVB 2023,#32{INTEGER}
NOP
MOV A,#ok{STRING}
JSR STROUT
JSR LINEBREAK
NOP
JMP RETURN
44300:
NOP
44310:
NOP
MOV B,#{STRING}
MOV DA${STRING},B
NOP
MOV X,P%{INTEGER}
JSR FINX
MOV P%{INTEGER},X
NOP
MOVB 2023,#16{INTEGER}
NOP
MOV Y,#11{INTEGER}
MOV X,P%{INTEGER}
GT X,Y
CMP X,#0{REAL}
JNE NSKIP28
JMP SKIP28
NSKIP28:
NOP
NOP
MOV Y,#0{INTEGER}
MOV P%{INTEGER},Y
NOP
NOP
MOV A,#.{STRING}
JSR STROUT
SKIP28:
44320:
NOP
JMP RETURN
44500:
NOP
44510:
NOP
JSR COMPACTMAX
MOV Y,PT%{INTEGER}
CHGCTX #1
JSR STR
JSR COPYSTR
MOV PT${STRING},A
NOP
JSR COMPACTMAX
MOV B,#Download?size=2048{STRING}
MOV A,GU${STRING}
JSR CONCAT
JSR COPYSTR
MOV UR${STRING},A
44520:
NOP
JSR COMPACTMAX
MOV Y,#1{INTEGER}
PUSH Y
CHGCTX #1
MOV B,PT${STRING}
CHGCTX #0
JSR LEN
POP Y
SUB X,Y
MOV C,X
CHGCTX #1
MOV B,PT${STRING}
JSR RIGHT
PUSH A
MOV B,#&part={STRING}
MOV A,UR${STRING}
JSR CONCAT
POP B
JSR CONCAT
MOV B,#&file={STRING}
JSR CONCAT
MOV B,TF${STRING}
JSR CONCAT
JSR COPYSTR
MOV UR${STRING},A
44530:
NOP
JMP RETURN
45500:
NOP
45505:
NOP
MOV Y,#0{INTEGER}
MOV TL{REAL},Y
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV X,DC%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV X,I{REAL}
CHGCTX #1
MOV G,DT$[]{STRING}
JSR ARRAYACCESS
MOV B,A
CHGCTX #0
JSR LEN
MOV Y,TL{REAL}
ADD X,Y
MOV TL{REAL},X
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
45510:
NOP
MOV Y,TL{REAL}
MOV TB{REAL},Y
NOP
JSR GOSUB
JSR 39000
45525:
NOP
JSR COMPACTMAX
MOV B,#ChunkedUpload{STRING}
MOV A,GU${STRING}
JSR CONCAT
JSR COPYSTR
MOV UR${STRING},A
45530:
NOP
JSR COMPACTMAX
MOV B,#?file={STRING}
MOV A,UR${STRING}
JSR CONCAT
MOV B,TF${STRING}
JSR CONCAT
MOV B,#&data={STRING}
JSR CONCAT
JSR COPYSTR
MOV UR${STRING},A
45560:
NOP
JSR COMPACTMAX
MOV Y,HB%{INTEGER}
CHGCTX #1
JSR CHR
PUSH A
CHGCTX #0
MOV Y,LB%{INTEGER}
CHGCTX #1
JSR CHR
PUSH A
MOV B,#<${STRING}
MOV A,UR${STRING}
JSR CONCAT
POP B
JSR CONCAT
POP B
JSR CONCAT
JSR COPYSTR
MOV UR${STRING},A
45580:
NOP
JMP RETURN
45700:
NOP
45710:
NOP
MOV B,#http://jpct.de/mospeed/ipget.php{STRING}
MOV UR${STRING},B
NOP
JMP RETURN
45800:
NOP
45810:
NOP
MOV Y,#0{INTEGER}
PUSH Y
CHGCTX #1
MOV B,GU${STRING}
CHGCTX #0
JSR LEN
POP Y
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP29
JMP SKIP29
NSKIP29:
JMP 45850
NOP
SKIP29:
45820:
NOP
JSR COMPACTMAX
MOV Y,#147{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
NOP
MOV A,#Getting remote address...{STRING}
JSR STROUT
JSR LINEBREAK
NOP
JSR GOSUB
JSR 45700
45830:
NOP
JSR GOSUB
JSR 46500
NOP
JSR GOSUB
JSR 41500
NOP
JSR GOSUB
JSR 42000
45840:
NOP
MOV B,MG${STRING}
MOV GU${STRING},B
45850:
NOP
JSR LINEBREAK
NOP
MOV A,#Address: {STRING}
JSR STROUT
NOP
MOV A,GU${STRING}
JSR STROUT
JSR LINEBREAK
NOP
JMP RETURN
46000:
NOP
46010:
NOP
MOV Y,#201{INTEGER}
MOV X,BU{REAL}
ADD X,Y
MOV Y,X
MOVB X,(Y)
MOV Y,#48{INTEGER}
EQ X,Y
PUSH X
MOV Y,#200{INTEGER}
MOV X,BU{REAL}
ADD X,Y
MOV Y,X
MOVB X,(Y)
MOV Y,#33{INTEGER}
EQ X,Y
PUSH X
MOVB X,169
MOV Y,#2{INTEGER}
EQ X,Y
POP Y
AND X,Y
POP Y
AND X,Y
MOV LE%{INTEGER},X
46020:
NOP
MOV Y,LE%{INTEGER}
CMP Y,#0{REAL}
JNE NSKIP30
JMP SKIP30
NSKIP30:
NOP
NOP
MOVB X,171
MOV LV%{INTEGER},X
MOV Y,UI{REAL}
NOP
MOV X,Y
JSR SYSTEMCALLDYN
MOV Y,UR{REAL}
NOP
MOV X,Y
JSR SYSTEMCALLDYN
SKIP30:
46030:
NOP
JMP RETURN
46500:
NOP
46510:
NOP
MOVB 2023,#16{INTEGER}
NOP
MOV B,UR${STRING}
CHGCTX #0
JSR LEN
MOV LM{REAL},X
NOP
MOV Y,#4{INTEGER}
MOV X,LM{REAL}
SUB X,Y
MOV LS{REAL},X
NOP
MOV Y,#1{INTEGER}
MOV T{REAL},Y
NOP
MOV Y,LM{REAL}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(T{REAL})
JSR INITFOR
46520:
NOP
MOV Y,#3{INTEGER}
MOV X,BU{REAL}
ADD X,Y
MOV B3{REAL},X
NOP
JSR COMPACTMAX
MOV C,T{REAL}
MOV D,#1{INTEGER}
CHGCTX #1
MOV B,UR${STRING}
JSR MID
MOV B,A
CHGCTX #0
JSR ASC
MOV DD%{INTEGER},X
NOP
MOV Y,#0{INTEGER}
MOV X,DC%{INTEGER}
GT X,Y
CMP X,#0{REAL}
JNE NSKIP31
JMP SKIP31
NSKIP31:
NOP
NOP
MOV Y,LS{REAL}
MOV X,T{REAL}
GTEQ X,Y
CMP X,#0{REAL}
JNE NSKIP32
JMP SKIP32
NSKIP32:
JMP 46560
SKIP32:
NOP
SKIP31:
46540:
NOP
JSR GOSUB
JSR 47300
46560:
NOP
MOV Y,T{REAL}
MOV X,B3{REAL}
ADD X,Y
PUSH X
MOV X,DD%{INTEGER}
POP Y
MOVB (Y),X
46570:
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
NOP
JSR GOSUB
JSR 47000
46575:
NOP
MOV Y,#0{INTEGER}
MOV X,DC%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP33
JMP SKIP33
NSKIP33:
MOV Y,#32{INTEGER}
NOP
MOV X,Y
MOVB 2023,X
JMP RETURN
NOP
SKIP33:
46580:
NOP
MOV Y,#2{INTEGER}
MOV X,BU{REAL}
ADD X,Y
MOV Y,T{REAL}
ADD X,Y
MOV T{REAL},X
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV X,DC%{INTEGER}
JSR FDEX
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV X,I{REAL}
CHGCTX #1
MOV G,DT$[]{STRING}
JSR ARRAYACCESS
JSR COPYSTR
MOV DA${STRING},A
46590:
NOP
MOV Y,#1{INTEGER}
MOV P{REAL},Y
NOP
MOV B,DA${STRING}
CHGCTX #0
JSR LEN
PUSH X
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(P{REAL})
JSR INITFOR
NOP
JSR COMPACTMAX
MOV C,P{REAL}
MOV D,#1{INTEGER}
CHGCTX #1
MOV B,DA${STRING}
JSR MID
MOV B,A
CHGCTX #0
JSR ASC
MOV DD%{INTEGER},X
46600:
NOP
MOV Y,P{REAL}
MOV X,T{REAL}
ADD X,Y
PUSH X
MOV X,DD%{INTEGER}
POP Y
MOVB (Y),X
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
46610:
NOP
MOV Y,P{REAL}
MOV X,T{REAL}
ADD X,Y
MOV Y,#1{INTEGER}
SUB X,Y
MOV T{REAL},X
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
46620:
NOP
MOVB 2023,#32{INTEGER}
NOP
JMP RETURN
47000:
NOP
47010:
NOP
MOV Y,#4{INTEGER}
PUSH Y
CHGCTX #1
MOV B,UR${STRING}
CHGCTX #0
JSR LEN
POP Y
ADD X,Y
MOV Y,TL{REAL}
ADD X,Y
MOV D{REAL},X
NOP
MOV Y,#1{INTEGER}
MOV X,BU{REAL}
ADD X,Y
MOV S{REAL},X
NOP
JSR GOSUB
JSR 47100
47020:
NOP
JMP RETURN
47100:
NOP
47105:
NOP
MOV Y,D{REAL}
MOV TB{REAL},Y
NOP
JSR GOSUB
JSR 39000
47110:
NOP
MOV Y,S{REAL}
PUSH Y
MOV X,LB%{INTEGER}
POP Y
MOVB (Y),X
NOP
MOV Y,#1{INTEGER}
MOV X,S{REAL}
ADD X,Y
PUSH X
MOV X,HB%{INTEGER}
POP Y
MOVB (Y),X
NOP
JMP RETURN
47300:
NOP
47310:
NOP
MOV Y,#65{INTEGER}
MOV X,DD%{INTEGER}
GTEQ X,Y
CMP X,#0{REAL}
JNE NSKIP34
JMP SKIP34
NSKIP34:
NOP
NOP
MOV Y,#90{INTEGER}
MOV X,DD%{INTEGER}
LTEQ X,Y
CMP X,#0{REAL}
JNE NSKIP35
JMP SKIP35
NSKIP35:
NOP
MOV Y,#32{INTEGER}
NOP
MOV X,DD%{INTEGER}
ADD X,Y
MOV DD%{INTEGER},X
JMP RETURN
SKIP35:
NOP
SKIP34:
47320:
NOP
MOV Y,#97{INTEGER}
MOV X,DD%{INTEGER}
GTEQ X,Y
CMP X,#0{REAL}
JNE NSKIP36
JMP SKIP36
NSKIP36:
NOP
NOP
MOV Y,#122{INTEGER}
MOV X,DD%{INTEGER}
LTEQ X,Y
CMP X,#0{REAL}
JNE NSKIP37
JMP SKIP37
NSKIP37:
NOP
MOV Y,#32{INTEGER}
NOP
MOV X,DD%{INTEGER}
SUB X,Y
MOV DD%{INTEGER},X
SKIP37:
SKIP36:
47330:
NOP
JMP RETURN
48000:
NOP
48010:
NOP
JSR COMPACTMAX
MOV C,#14{INTEGER}
CHGCTX #1
MOV B,OF${STRING}
JSR LEFT
MOV B,A
MOV A,#++{STRING}
JSR CONCAT
JSR COPYSTR
MOV NF${STRING},A
48015:
NOP
MOV Y,#15{INTEGER}
PUSH Y
MOV Y,#8{INTEGER}
PUSH Y
MOV Y,#15{INTEGER}
PUSH Y
JSR COMPACTMAX
MOV B,NF${STRING}
MOV A,#s:{STRING}
JSR CONCAT
MOV G,A
POP D
POP C
POP X
MOV Y,#4{INTEGER}
JSR OPEN
NOP
MOV X,#15{INTEGER}
JSR CLOSE
48020:
NOP
MOV Y,#2{INTEGER}
PUSH Y
MOV Y,#8{INTEGER}
PUSH Y
MOV Y,#2{INTEGER}
PUSH Y
JSR COMPACTMAX
MOV B,#,prg,w{STRING}
MOV A,NF${STRING}
JSR CONCAT
MOV G,A
POP D
POP C
POP X
MOV Y,#4{INTEGER}
JSR OPEN
48030:
NOP
JMP RETURN
48500:
NOP
48510:
NOP
MOV X,#2{INTEGER}
JSR CLOSE
NOP
JMP RETURN
49000:
NOP
49010:
NOP
MOVB 2023,#4{INTEGER}
NOP
JSR LOCKCHANNEL
MOV Y,#2{INTEGER}
PUSH Y
NOP
MOV A,DA${STRING}
POP C
JSR STROUTCHANNEL
JSR UNLOCKCHANNEL
NOP
JMP RETURN
50000:
NOP
50010:
NOP
MOV Y,ST{REAL}
MOV SO{REAL},Y
NOP
MOV Y,#64{INTEGER}
MOV X,SO{REAL}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP38
JMP SKIP38
NSKIP38:
NOP
NOP
MOV Y,#1{INTEGER}
MOV DO%{INTEGER},Y
JMP RETURN
NOP
SKIP38:
50020:
NOP
MOV Y,#0{INTEGER}
MOV X,SO{REAL}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP39
JMP SKIP39
NSKIP39:
NOP
NOP
MOV Y,#1{INTEGER}
MOV ER%{INTEGER},Y
JMP RETURN
NOP
SKIP39:
50030:
NOP
JSR GETSTR
MOV BY${STRING},A
NOP
MOV Y,#0{INTEGER}
PUSH Y
CHGCTX #1
MOV B,BY${STRING}
CHGCTX #0
JSR LEN
POP Y
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP40
JMP SKIP40
NSKIP40:
NOP
NOP
MOV B,LL${STRING}
MOV BY${STRING},B
SKIP40:
50040:
NOP
JMP RETURN
51000:
NOP
51005:
NOP
MOV A,#Loading '{STRING}
JSR STROUT
NOP
MOV A,OF${STRING}
JSR STROUT
NOP
MOV A,#'...{STRING}
JSR STROUT
JSR LINEBREAK
51010:
NOP
MOV Y,#2{INTEGER}
PUSH Y
MOV Y,DN%{INTEGER}
PUSH Y
MOV Y,#2{INTEGER}
PUSH Y
MOV B,OF${STRING}
MOV G,B
POP D
POP C
POP X
MOV Y,#4{INTEGER}
JSR OPEN
NOP
MOV Y,#15{INTEGER}
PUSH Y
MOV Y,DN%{INTEGER}
PUSH Y
MOV D,#15{INTEGER}
POP C
POP X
MOV Y,#3{INTEGER}
JSR OPEN
NOP
MOV Y,#15{INTEGER}
PUSH Y
JSR CLEARQUEUE
JSR COMPACTMAX
POP C
JSR INPUTNUMBERCHANNEL
MOV EC{REAL},Y
JSR INPUTSTRCHANNEL
MOV EM${STRING},A
NOP
MOV X,#15{INTEGER}
JSR CLOSE
NOP
MOV X,#2{INTEGER}
JSR CLOSE
51020:
NOP
MOV Y,#0{INTEGER}
MOV X,EC{REAL}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP41
JMP SKIP41
NSKIP41:
NOP
NOP
MOV A,EM${STRING}
JSR STROUT
JSR LINEBREAK
NOP
NOP
MOV Y,#1{INTEGER}
MOV ER%{INTEGER},Y
NOP
NOP
MOV Y,#0{INTEGER}
MOV DO%{INTEGER},Y
JMP RETURN
NOP
SKIP41:
51040:
NOP
MOV Y,#2{INTEGER}
PUSH Y
MOV Y,DN%{INTEGER}
PUSH Y
MOV Y,#2{INTEGER}
PUSH Y
MOV B,OF${STRING}
MOV G,B
POP D
POP C
POP X
MOV Y,#4{INTEGER}
JSR OPEN
NOP
MOVB 781,#2{INTEGER}
NOP
JSR $ffc6
51050:
NOP
MOV Y,#0{INTEGER}
MOV DO%{INTEGER},Y
NOP
MOV Y,#0{INTEGER}
MOV ER%{INTEGER},Y
NOP
JMP RETURN
51500:
NOP
51510:
NOP
JSR $ffcc
NOP
MOV X,#2{INTEGER}
JSR CLOSE
51520:
NOP
JMP RETURN
52000:
NOP
52010:
NOP
JSR LINEBREAK
NOP
MOV A,#Compiled file: {STRING}
JSR STROUT
NOP
MOV A,NF${STRING}
JSR STROUT
JSR LINEBREAK
52020:
NOP
MOV A,#Press RETURN to load it now!{STRING}
JSR STROUT
JSR LINEBREAK
NOP
JSR LINEBREAK
52030:
NOP
MOV A,#load{STRING}
JSR STROUT
NOP
JSR COMPACTMAX
MOV Y,#34{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
NOP
MOV A,NF${STRING}
JSR STROUT
NOP
JSR COMPACTMAX
MOV Y,#34{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
NOP
MOV A,#,{STRING}
JSR STROUT
NOP
MOV X,DN%{INTEGER}
JSR INTOUT
JSR CRSRRIGHT
NOP
MOV A,#,1{STRING}
JSR STROUT
52040:
NOP
MOVB 631,#145{INTEGER}
NOP
MOVB 632,#145{INTEGER}
NOP
MOVB 198,#2{INTEGER}
NOP
JMP RETURN
55000:
NOP
55005:
NOP
JSR COMPACTMAX
MOV Y,#147{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
NOP
MOV A,#Initializing wic64...{STRING}
JSR STROUT
55010:
NOP
MOV X,UI{REAL}
JSR SYSTEMCALLDYN
NOP
55020:
NOP
MOV X,UC{REAL}
JSR SYSTEMCALLDYN
NOP
55030:
NOP
JSR GOSUB
JSR 56000
55035:
NOP
MOV Y,BU{REAL}
MOVB (Y),#87{INTEGER}
NOP
MOV Y,#3{INTEGER}
MOV X,BU{REAL}
ADD X,Y
MOV Y,X
MOVB (Y),#15{INTEGER}
NOP
55040:
NOP
MOV A,#ok{STRING}
JSR STROUT
JSR LINEBREAK
55050:
NOP
JMP RETURN
56000:
NOP
56010:
NOP
MOVB X,171
MOV Y,#0{INTEGER}
NEQ X,Y
CMP X,#0{REAL}
JNE NSKIP42
JMP SKIP42
NSKIP42:
JMP RETURN
NOP
SKIP42:
56030:
NOP
MOVB 2023,#32{INTEGER}
NOP
JSR LINEBREAK
NOP
MOV A,#Communication error!{STRING}
JSR STROUT
JSR LINEBREAK
NOP
JSR LINEBREAK
56040:
NOP
MOV A,#Either there's no wic64 present{STRING}
JSR STROUT
JSR LINEBREAK
56050:
NOP
MOV A,#or the connection has timed out!{STRING}
JSR STROUT
JSR LINEBREAK
56060:
NOP
JMP 60000
56200:
NOP
56230:
NOP
JSR GOSUB
JSR 51500
NOP
MOVB 2023,#32{INTEGER}
NOP
JSR LINEBREAK
NOP
MOV A,#load error ({STRING}
JSR STROUT
NOP
MOV X,LV%{INTEGER}
JSR INTOUT
JSR CRSRRIGHT
NOP
MOV A,#)!{STRING}
JSR STROUT
JSR LINEBREAK
56260:
NOP
JMP 60000
56500:
NOP
56505:
NOP
MOVB X,186
MOV DN%{INTEGER},X
56510:
NOP
MOVB X,49154
MOV Y,#192{INTEGER}
EQ X,Y
PUSH X
MOVB X,49153
MOV Y,#30{INTEGER}
EQ X,Y
PUSH X
MOVB X,49152
MOV Y,#76{INTEGER}
EQ X,Y
POP Y
AND X,Y
POP Y
AND X,Y
MOV LF%{INTEGER},X
56520:
NOP
MOV Y,#0{INTEGER}
MOV X,LF%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP43
JMP SKIP43
NSKIP43:
NOP
NOP
JSR COMPACTMAX
MOV Y,#147{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
NOP
MOV A,#Loading...{STRING}
JSR STROUT
JSR LINEBREAK
MOV B,#universal{STRING}
NOP
PUSH B
MOV X,DN%{INTEGER}
MOV Y,#1{INTEGER}
POP G
JSR LOAD
JMP RESTARTPRG
SKIP43:
56530:
NOP
JMP RETURN
57000:
NOP
57010:
NOP
JSR COMPACTMAX
MOV Y,#147{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
NOP
MOVB 2023,#32{INTEGER}
57012:
NOP
MOV A,#MOSCloud - a remote BASIC compiler{STRING}
JSR STROUT
JSR LINEBREAK
57015:
NOP
MOV A,#by EgonOlsen71 / 2022{STRING}
JSR STROUT
JSR LINEBREAK
NOP
JSR LINEBREAK
57020:
NOP
MOV A,#F1 - Select source: {STRING}
JSR STROUT
NOP
MOV A,OF${STRING}
JSR STROUT
JSR LINEBREAK
57025:
NOP
MOV A,#F2 - Select drive:{STRING}
JSR STROUT
NOP
MOV X,DN%{INTEGER}
JSR INTOUT
JSR CHECKCMD
JSR LINEBREAK
57030:
NOP
MOV A,#F3 - Show directory{STRING}
JSR STROUT
JSR LINEBREAK
57040:
NOP
MOV A,#F5 - Options{STRING}
JSR STROUT
JSR LINEBREAK
57050:
NOP
MOV A,#F8 - Quit{STRING}
JSR STROUT
JSR LINEBREAK
NOP
JSR LINEBREAK
57055:
NOP
MOV A,#F7 - Compile!{STRING}
JSR STROUT
JSR LINEBREAK
57060:
NOP
JSR GETSTR
MOV A${STRING},A
NOP
MOV B,#{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP44
JMP SKIP44
NSKIP44:
JMP 57060
NOP
SKIP44:
57070:
NOP
MOV B,A${STRING}
CHGCTX #0
JSR ASC
MOV A%{INTEGER},X
NOP
MOV Y,#133{INTEGER}
MOV X,A%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP45
JMP SKIP45
NSKIP45:
JSR GOSUB
NOP
JSR 40000
JMP 57010
NOP
SKIP45:
57080:
NOP
MOV Y,#134{INTEGER}
MOV X,A%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP46
JMP SKIP46
NSKIP46:
JSR GOSUB
NOP
JSR 58000
JMP 57010
NOP
SKIP46:
57090:
NOP
MOV Y,#135{INTEGER}
MOV X,A%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP47
JMP SKIP47
NSKIP47:
JSR GOSUB
NOP
JSR 57500
JMP 57010
NOP
SKIP47:
57100:
NOP
MOV Y,#136{INTEGER}
MOV X,A%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP48
JMP SKIP48
NSKIP48:
NOP
NOP
JSR COMPACTMAX
MOV Y,#147{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
JMP RETURN
NOP
SKIP48:
57110:
NOP
MOV Y,#140{INTEGER}
MOV X,A%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP49
JMP SKIP49
NSKIP49:
NOP
NOP
JSR COMPACTMAX
MOV Y,#147{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
NOP
NOP
MOV A,#Have a nice BASIC!{STRING}
JSR STROUT
JSR LINEBREAK
JMP 60000
NOP
SKIP49:
57120:
NOP
MOV Y,#137{INTEGER}
MOV X,A%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP50
JMP SKIP50
NSKIP50:
JMP 57200
NOP
SKIP50:
57130:
NOP
JMP 57060
57200:
NOP
MOV X,DN%{INTEGER}
JSR FINX
MOV DN%{INTEGER},X
NOP
MOV Y,#10{INTEGER}
MOV X,DN%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP51
JMP SKIP51
NSKIP51:
NOP
NOP
MOV Y,#8{INTEGER}
MOV DN%{INTEGER},Y
SKIP51:
57210:
NOP
JMP 57010
57500:
NOP
57510:
NOP
JSR COMPACTMAX
MOV Y,#147{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
NOP
MOV A,#MOSCloud - Options{STRING}
JSR STROUT
JSR LINEBREAK
NOP
JSR LINEBREAK
57520:
NOP
MOV A,#F1 - Start address:{STRING}
JSR STROUT
NOP
MOV Y,#0{INTEGER}
MOV X,SA{REAL}
LTEQ X,Y
CMP X,#0{REAL}
JNE NSKIP52
JMP SKIP52
NSKIP52:
NOP
NOP
MOV A,# Default{STRING}
JSR STROUT
JSR LINEBREAK
JMP 57530
NOP
SKIP52:
57525:
NOP
MOV X,SA{REAL}
JSR REALOUT
JSR CHECKCMD
JSR LINEBREAK
57530:
NOP
MOV A,#F3 - Memory hole at:{STRING}
JSR STROUT
NOP
MOV Y,#0{INTEGER}
MOV X,HS{REAL}
LTEQ X,Y
CMP X,#0{REAL}
JNE NSKIP53
JMP SKIP53
NSKIP53:
NOP
NOP
MOV A,# None{STRING}
JSR STROUT
JSR LINEBREAK
JMP 57540
NOP
SKIP53:
57535:
NOP
MOV X,HS{REAL}
JSR REALOUT
JSR CRSRRIGHT
NOP
MOV A,# -{STRING}
JSR STROUT
NOP
MOV X,HE{REAL}
JSR REALOUT
JSR CHECKCMD
JSR LINEBREAK
57540:
NOP
MOV A,#F5 - Compact level:{STRING}
JSR STROUT
NOP
MOV Y,#0{INTEGER}
MOV X,CL%{INTEGER}
LTEQ X,Y
CMP X,#0{REAL}
JNE NSKIP54
JMP SKIP54
NSKIP54:
NOP
NOP
MOV A,# Default{STRING}
JSR STROUT
JSR LINEBREAK
JMP 57580
NOP
SKIP54:
57545:
NOP
MOV X,CL%{INTEGER}
JSR INTOUT
JSR CHECKCMD
JSR LINEBREAK
57580:
NOP
MOV A,#F8 - Refresh remote server:{STRING}
JSR STROUT
JSR LINEBREAK
NOP
MOV A,#     {STRING}
JSR STROUT
NOP
JSR COMPACTMAX
MOV Y,#7{INTEGER}
PUSH Y
CHGCTX #1
MOV B,GU${STRING}
CHGCTX #0
JSR LEN
POP Y
SUB X,Y
MOV C,X
CHGCTX #1
MOV B,GU${STRING}
JSR RIGHT
JSR STROUT
JSR LINEBREAK
57590:
NOP
JSR LINEBREAK
NOP
MOV A,#F7 - Exit options menu{STRING}
JSR STROUT
JSR LINEBREAK
57700:
NOP
JSR GETSTR
MOV A${STRING},A
NOP
MOV B,#{STRING}
MOV A,A${STRING}
CHGCTX #0
JSR SEQ
CMP X,#0{REAL}
JNE NSKIP55
JMP SKIP55
NSKIP55:
JMP 57700
NOP
SKIP55:
57710:
NOP
MOV B,A${STRING}
CHGCTX #0
JSR ASC
MOV A%{INTEGER},X
NOP
MOV Y,#140{INTEGER}
MOV X,A%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP56
JMP SKIP56
NSKIP56:
NOP
NOP
MOV B,#{STRING}
MOV GU${STRING},B
JSR GOSUB
NOP
JSR 45800
JMP 57510
NOP
SKIP56:
57720:
NOP
MOV Y,#133{INTEGER}
MOV X,A%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP57
JMP SKIP57
NSKIP57:
JSR GOSUB
NOP
JSR 60100
JMP 57510
NOP
SKIP57:
57730:
NOP
MOV Y,#134{INTEGER}
MOV X,A%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP58
JMP SKIP58
NSKIP58:
JSR GOSUB
NOP
JSR 60200
JMP 57510
NOP
SKIP58:
57740:
NOP
MOV Y,#135{INTEGER}
MOV X,A%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP59
JMP SKIP59
NSKIP59:
JSR GOSUB
NOP
JSR 60300
JMP 57510
NOP
SKIP59:
57790:
NOP
MOV Y,#136{INTEGER}
MOV X,A%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP60
JMP SKIP60
NSKIP60:
JMP RETURN
NOP
SKIP60:
57800:
NOP
JMP 57700
58000:
NOP
58010:
NOP
JSR COMPACTMAX
MOV Y,#147{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
58020:
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV Y,DN%{INTEGER}
PUSH Y
MOV Y,#0{INTEGER}
PUSH Y
MOV B,#${STRING}
MOV G,B
POP D
POP C
POP X
MOV Y,#4{INTEGER}
JSR OPEN
NOP
MOVB 781,#1{INTEGER}
NOP
JSR $ffc6
NOP
JSR GETSTR
MOV A${STRING},A
JSR GETSTR
MOV A${STRING},A
58030:
NOP
JSR GETSTR
MOV A${STRING},A
JSR GETSTR
MOV A${STRING},A
JSR GETSTR
MOV H${STRING},A
JSR GETSTR
MOV L${STRING},A
NOP
MOV Y,ST{REAL}
CMP Y,#0{REAL}
JNE NSKIP61
JMP SKIP61
NSKIP61:
JSR $ffcc
MOV X,#1{INTEGER}
NOP
JSR CLOSE
JMP 58070
NOP
NOP
SKIP61:
58040:
NOP
JSR COMPACTMAX
MOV B,LL${STRING}
MOV A,L${STRING}
JSR CONCAT
MOV B,A
CHGCTX #0
JSR ASC
MOV A,#8{INTEGER}
SHL X,A
PUSH X
CHGCTX #1
MOV B,LL${STRING}
MOV A,H${STRING}
JSR CONCAT
MOV B,A
CHGCTX #0
JSR ASC
POP Y
ADD X,Y
JSR INTOUT
JSR CRSRRIGHT
58050:
NOP
JSR GETSTR
MOV A${STRING},A
JSR GETSTR
MOV B${STRING},A
NOP
MOV B,B${STRING}
CHGCTX #0
JSR LEN
CMP X,#0{REAL}
JNE NSKIP62
JMP SKIP62
NSKIP62:
NOP
NOP
MOV A,A${STRING}
JSR STROUT
NOP
MOV A,B${STRING}
JSR STROUT
NOP
NOP
MOV Y,ST{REAL}
NOT X,Y
CMP X,#0{REAL}
JNE NSKIP63
JMP SKIP63
NSKIP63:
JMP 58050
SKIP63:
NOP
SKIP62:
58060:
NOP
MOV A,A${STRING}
JSR STROUT
JSR LINEBREAK
NOP
JMP 58030
58070:
NOP
JSR GOSUB
JSR 13000
58080:
NOP
JMP RETURN
60000:
NOP
60010:
NOP
MOVB 45,#0{INTEGER}
NOP
MOVB 46,#10{INTEGER}
NOP
MOVB 47,#0{INTEGER}
NOP
MOVB 48,#10{INTEGER}
NOP
MOVB 49,#0{INTEGER}
NOP
MOVB 50,#10{INTEGER}
60020:
NOP
MOVB 55,#0{INTEGER}
NOP
MOVB 56,#160{INTEGER}
NOP
MOVB 51,#0{INTEGER}
NOP
MOVB 52,#160{INTEGER}
NOP
JSR COMPACTMAX
MOV Y,#9{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
NOP
JSR END
RTS
60100:
NOP
60105:
NOP
JSR COMPACTMAX
MOV Y,#147{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
NOP
MOV A,#Enter a new start address!{STRING}
JSR STROUT
JSR LINEBREAK
NOP
JSR LINEBREAK
60110:
NOP
INPUT1:
JSR CLEARQUEUE
JSR COMPACTMAX
MOV A,#Start address (in decimal){STRING}
JSR STROUT
JSR QMARKOUT1
JSR INPUTNUMBER
CMP X,#0{REAL}
JE INPUT1_0
MOV A,#?redo from start{STRING}
JSR STROUT
JSR LINEBREAK
JMP INPUT1
INPUT1_0:
MOV SA{REAL},Y
JSR QUEUESIZE
CMP X,#0{REAL}
JE INPUTCHECK1
JSR EXTRAIGNORED
INPUTCHECK1:
60115:
NOP
MOV Y,#0{INTEGER}
MOV X,SA{REAL}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP64
JMP SKIP64
NSKIP64:
NOP
NOP
MOV Y,#-1.0{REAL}
MOV SA{REAL},Y
JMP RETURN
NOP
SKIP64:
60120:
NOP
MOV Y,#53247{INTEGER}
MOV X,SA{REAL}
GT X,Y
PUSH X
MOV Y,#2049{INTEGER}
MOV X,SA{REAL}
LT X,Y
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP65
JMP SKIP65
NSKIP65:
NOP
NOP
MOV A,#Invalid start address!{STRING}
JSR STROUT
JSR LINEBREAK
JMP 60110
NOP
SKIP65:
60130:
NOP
JMP RETURN
60200:
NOP
60205:
NOP
JSR COMPACTMAX
MOV Y,#147{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
NOP
MOV A,#Enter addresses of the memory hole!{STRING}
JSR STROUT
JSR LINEBREAK
60208:
NOP
MOV A,#This memory section remains unused.{STRING}
JSR STROUT
JSR LINEBREAK
NOP
JSR LINEBREAK
60210:
NOP
INPUT2:
JSR CLEARQUEUE
JSR COMPACTMAX
MOV A,#Start of hole (in decimal){STRING}
JSR STROUT
JSR QMARKOUT1
JSR INPUTNUMBER
CMP X,#0{REAL}
JE INPUT2_0
MOV A,#?redo from start{STRING}
JSR STROUT
JSR LINEBREAK
JMP INPUT2
INPUT2_0:
MOV HS{REAL},Y
JSR QUEUESIZE
CMP X,#0{REAL}
JE INPUTCHECK2
JSR EXTRAIGNORED
INPUTCHECK2:
60215:
NOP
MOV Y,#0{INTEGER}
MOV X,HS{REAL}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP66
JMP SKIP66
NSKIP66:
NOP
NOP
MOV Y,#-1.0{REAL}
MOV HS{REAL},Y
NOP
NOP
MOV Y,#-1.0{REAL}
MOV HE{REAL},Y
JMP RETURN
NOP
SKIP66:
60220:
NOP
MOV Y,#53247{INTEGER}
MOV X,HS{REAL}
GT X,Y
PUSH X
MOV Y,#2049{INTEGER}
MOV X,HS{REAL}
LT X,Y
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP67
JMP SKIP67
NSKIP67:
NOP
NOP
MOV A,#Invalid start address!{STRING}
JSR STROUT
JSR LINEBREAK
JMP 60210
NOP
SKIP67:
60230:
NOP
INPUT3:
JSR CLEARQUEUE
JSR COMPACTMAX
MOV A,#End of hole (in decimal){STRING}
JSR STROUT
JSR QMARKOUT1
JSR INPUTNUMBER
CMP X,#0{REAL}
JE INPUT3_0
MOV A,#?redo from start{STRING}
JSR STROUT
JSR LINEBREAK
JMP INPUT3
INPUT3_0:
MOV HE{REAL},Y
JSR QUEUESIZE
CMP X,#0{REAL}
JE INPUTCHECK3
JSR EXTRAIGNORED
INPUTCHECK3:
60240:
NOP
MOV Y,#53247{INTEGER}
MOV X,HE{REAL}
GT X,Y
PUSH X
MOV Y,#2049{INTEGER}
MOV X,HE{REAL}
LT X,Y
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP68
JMP SKIP68
NSKIP68:
NOP
NOP
MOV A,#Invalid end address!{STRING}
JSR STROUT
JSR LINEBREAK
JMP 60230
NOP
SKIP68:
60250:
NOP
MOV Y,HE{REAL}
MOV X,HS{REAL}
GT X,Y
CMP X,#0{REAL}
JNE NSKIP69
JMP SKIP69
NSKIP69:
NOP
NOP
MOV Y,HE{REAL}
MOV HT{REAL},Y
NOP
NOP
MOV Y,HS{REAL}
MOV HE{REAL},Y
NOP
NOP
MOV Y,HT{REAL}
MOV HS{REAL},Y
SKIP69:
60260:
NOP
JMP RETURN
60300:
NOP
60305:
NOP
JSR COMPACTMAX
MOV Y,#147{INTEGER}
CHGCTX #1
JSR CHR
JSR STROUT
NOP
MOV A,#Enter compact level!{STRING}
JSR STROUT
JSR LINEBREAK
60306:
NOP
MOV A,#Lower is more compact but slower.{STRING}
JSR STROUT
JSR LINEBREAK
NOP
JSR LINEBREAK
60310:
NOP
INPUT4:
JSR CLEARQUEUE
JSR COMPACTMAX
MOV A,#Compact level (3-6){STRING}
JSR STROUT
JSR QMARKOUT1
JSR INPUTNUMBER
CMP X,#0{REAL}
JE INPUT4_0
MOV A,#?redo from start{STRING}
JSR STROUT
JSR LINEBREAK
JMP INPUT4
INPUT4_0:
MOV CL%{INTEGER},Y
JSR QUEUESIZE
CMP X,#0{REAL}
JE INPUTCHECK4
JSR EXTRAIGNORED
INPUTCHECK4:
60315:
NOP
MOV Y,#0{INTEGER}
MOV X,CL%{INTEGER}
EQ X,Y
CMP X,#0{REAL}
JNE NSKIP70
JMP SKIP70
NSKIP70:
JMP RETURN
NOP
NOP
NOP
SKIP70:
60320:
NOP
MOV Y,#6{INTEGER}
MOV X,CL%{INTEGER}
GT X,Y
PUSH X
MOV Y,#3{INTEGER}
MOV X,CL%{INTEGER}
LT X,Y
POP Y
OR X,Y
CMP X,#0{REAL}
JNE NSKIP71
JMP SKIP71
NSKIP71:
NOP
NOP
MOV A,#Invalid level!{STRING}
JSR STROUT
JSR LINEBREAK
JMP 60310
NOP
SKIP71:
60330:
NOP
JMP RETURN
62000:
NOP
62010:
NOP
JSR COMPACTMAX
MOV Y,#0{INTEGER}
CHGCTX #1
JSR CHR
JSR COPYSTR
MOV LL${STRING},A
NOP
MOV Y,#0{INTEGER}
RND X,Y
MOV I{REAL},X
62020:
NOP
MOV Y,#64{INTEGER}
MOV TT%{INTEGER},Y
NOP
MOV Y,#49976{INTEGER}
MOV BU{REAL},Y
NOP
MOV Y,#49152{INTEGER}
MOV UI{REAL},Y
62030:
NOP
MOV Y,#49155{INTEGER}
MOV UR{REAL},Y
NOP
MOV Y,#49170.0{REAL}
MOV US{REAL},Y
NOP
MOV Y,#49173.0{REAL}
MOV UG{REAL},Y
62040:
NOP
MOV Y,#49176.0{REAL}
MOV UC{REAL},Y
NOP
MOV Y,#-1.0{REAL}
MOV SA{REAL},Y
NOP
MOV Y,#-1.0{REAL}
MOV HS{REAL},Y
NOP
MOV Y,#-1.0{REAL}
MOV HE{REAL},Y
NOP
MOV Y,#-1.0{REAL}
MOV CL%{INTEGER},Y
62050:
NOP
MOV Y,#2048{INTEGER}
MOV ML%{INTEGER},Y
62060:
NOP
MOV B,#{STRING}
MOV GU${STRING},B
62065:
NOP
62070:
NOP
MOV B,#test{STRING}
MOV OF${STRING},B
62080:
62090:
NOP
MOV Y,#0{INTEGER}
MOV I{REAL},Y
NOP
MOV Y,#15{INTEGER}
PUSH Y
NOP
MOV Y,#1{INTEGER}
PUSH Y
MOV A,(I{REAL})
JSR INITFOR
NOP
MOV Y,I{REAL}
PUSH Y
JSR READSTR
POP X
MOV G,HX$[]{STRING}
JSR ARRAYSTORE
NOP
MOV A,#0{INTEGER}
JSR NEXT
CMP A,#0{INTEGER}
JE ($JUMP)
62100:
NOP
JSR GOSUB
JSR 55000
NOP
JMP RETURN
62500:
62510:
NOP
JSR END
RTS
