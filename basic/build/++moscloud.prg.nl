REALFAC = $BBA2
MEMARG = $BA8C
MEMMUL = $BA28
MEMSUB = $B850
FACMEM = $BBD7
PRINTSTRS = $AB25
VALS = $B7B5
CMPFAC = $BC5B
FACADD = $B867
SGNFAC = $BC2B
ARGADD = $B86A
ARGAND = $AFE9
ARGDIV = $BB14
FACMUL = $BA30
FACLOG = $B9EA
FACSQR = $BF71
FACEXPCALL = $BFED
FACABS = $BC58
FACSIN = $E26B
FACCOS = $E264
FACTAN = $E2B4
FACATN = $E30E
FACSIG = $BC39
FACNOT = $AED4
FACRND = $E097
XFACWORD = $B7F7
FACDIV = $BB0F
BASINT = $BCCC
FACPOW = $BF7B
FACSUB = $B853
FACOR = $AFE6
ARGFAC = $BBFC
FACARG = $BC0C
FACSTR = $BDDF
FACINT = $B1AA
RNDFAC = $BC1B
INTFAC = $B391
WRITETIS = $A9E7
GETTI = $BE68
GETTIME = $AF7E
COPYTIME = $AF87
TI2FAC = $AF84
BYTEFAC = $B3A2
CRSRRIGHT = $AB3B
ERRALL = $A437
ERRIQ = $B248
ERREI = $ACF4
ERRSYN = $AF08
INPUT = $A560
CRSRPOS = $FFF0
CHROUT = $FFD2
GETIN = $FFE4
OPENCH = $FFC0
CLOSECH = $FFC3
CHKIN = $FFC6
CHKOUT = $FFC9
CLRCH = $FFCC
LOADXX = $FFD5
SAVEXX = $FFD8
TWAIT = $FFE1
ERRFNF = $F12F
ARGSGN=$6E
ARGLO=$6D
ARGMO=$6C
ARGMOH=$6B
ARGHO=$6A
ARGEXP=$69
FACSGN=$66
FACLO=$65
FACMO=$64
FACMOH=$63
FACHO=$62
FACEXP=$61
FACOV=$70
OLDOV=$56
ARISGN=$6F
FAC=$61
RESLO=$29
RESMO=$28
RESMOH=$27
RESHO=$26
RESOV=$2A
RESHOP=$6F
FACHOP=$56
ITERCNT=$67
IOCHANNEL=$13
BASICSTART=$2B
BASICEND=$37
STATUS=$90
VERCHK=$93
SECADDR=$B9
DEVICENUM=$BA
FILELEN=$B7
LOGICADDR=$B8
FILEADDR=$BB
LOADEND=$C3
KEYNDX=$C6
INDEX1=$22
VALTYPE=$0D
LOWDS=$5D
TIMEADDR=$A0
BASICPOINTER=$7A
LOADOK_STATUS=64
LOFBUF=$FF
LOFBUFH=$100
INPUTBUF=$200
BASICBUFFER=53000
TMP_ZP = 105
TMP2_ZP = 107
TMP3_ZP = 34
;make sure that JUMP_TARGET's low can't be $ff
JUMP_TARGET = 69
TMP_REG=71
G_REG=73
X_REG=61
*=2072
TSX
STX SP_SAVE
; *** CODE ***
PROGRAMSTART:
JSR START
;
LINE_0:
;
;
LINE_5:
;
JSR GOSUB
JSR LINE_1000
JSR GOSUB
JSR LINE_56500
JSR GOSUB
JSR LINE_62000
JSR GOSUB
JSR LINE_45800
;
LINE_10:
;
JSR GOSUB
JSR LINE_57000
JSR GOSUB
JSR LINE_10000
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_FF%
LDA VAR_FF%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
EQ_EQ0:
EQ_SKIP0:
COMP_SKP0:
BNE LINE_SKIP72
LINE_NSKIP72:
; Optimizer rule: Simplified equal comparison/6
;
JMP LINE_10
;
LINE_SKIP72:
;
;
LINE_20:
;
JSR GOSUB
JSR LINE_40500
;
LINE_30:
;
JSR GOSUB
JSR LINE_44000
JSR GOSUB
JSR LINE_52000
;
LINE_60:
;
JMP LINE_60000
;
LINE_1000:
;
;
LINE_1010:
;
LDA #147
JSR SINGLECHROUTMAX
; Optimizer rule: Memory saving single char out(1)/2
; Optimizer rule: Single character output/2
LDA #14
JSR SINGLECHROUTMAX
; Optimizer rule: Memory saving single char out(1)/2
; Optimizer rule: Single character output/2
LDA #8
JSR SINGLECHROUTMAX
; Optimizer rule: Memory saving single char out(1)/2
; Optimizer rule: Single character output/2
;
LINE_1020:
;
LDY #6
STY 53280
; Optimizer rule: Simple POKE/2
LDY #6
STY 53281
; Optimizer rule: Simple POKE/2
LDY #1
STY 646
; Optimizer rule: Simple POKE/2
;
LINE_1030:
;
JMP RETURN
;
LINE_10000:
;
;
LINE_10010:
;
JSR GOSUB
JSR LINE_40100
LDA #<CONST_6
LDY #>CONST_6
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_DA$
LDY #>VAR_DA$
JSR COPYSTRING
; Optimizer rule: Simplified loading of Strings/5
LDY #0
TYA
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_DC%
STA VAR_DC%+1
LDY #1
LDA #0
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_FF%
STA VAR_FF%+1
;
LINE_10020:
;
JSR GOSUB
JSR LINE_51000
LDA #0
STA VAR_TC
STA VAR_TC+1
STA VAR_TC+2
STA VAR_TC+3
STA VAR_TC+4
; Optimizer rule: Simplified setting to 0/6
LDY #0
TYA
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_CN%
STA VAR_CN%+1
LDY #0
TYA
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_CK%
STA VAR_CK%+1
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_ER%
LDA VAR_ER%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
NEQ_NEQ1:
NEQ_SKIP1:
COMP_SKP1:
BEQ LINE_SKIP73
LINE_NSKIP73:
; Optimizer rule: Simplified not equal comparison/6
;
JSR GOSUB
JSR LINE_13000
LDY #0
TYA
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_FF%
STA VAR_FF%+1
JMP RETURN
;
LINE_SKIP73:
;
;
LINE_10030:
;
LDY #4
STY 2023
; Optimizer rule: Simple POKE/2
JSR GOSUB
JSR LINE_50000
;
LINE_10040:
;
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_DO%
LDA VAR_DO%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
BEQ EQ_EQ2
LDA #0
JMP EQ_SKIP2
EQ_EQ2:
LDA #$1
EQ_SKIP2:
COMP_SKP2:
BNE LINE_NSKIP74
; Optimizer rule: Simplified CMP redux/7
JMP LINE_SKIP74
;
LINE_NSKIP74:
;
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_ER%
LDA VAR_ER%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
EQ_EQ3:
EQ_SKIP3:
COMP_SKP3:
BNE LINE_SKIP75
LINE_NSKIP75:
; Optimizer rule: Simplified equal comparison/6
;
JSR GOSUB
JSR LINE_11000
JMP LINE_10030
;
LINE_SKIP75:
;
;
LINE_SKIP74:
;
;
LINE_10050:
;
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_ER%
LDA VAR_ER%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
NEQ_NEQ4:
NEQ_SKIP4:
COMP_SKP4:
BEQ LINE_SKIP76
LINE_NSKIP76:
; Optimizer rule: Simplified not equal comparison/6
;
JMP LINE_56000
;
LINE_SKIP76:
;
;
LINE_10060:
;
LDA #$01
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_DO%
LDA VAR_DO%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
EQ_EQ5:
EQ_SKIP5:
COMP_SKP5:
BNE LINE_SKIP77
LINE_NSKIP77:
; Optimizer rule: Simplified equal comparison/6
;
JSR GOSUB
JSR LINE_10500
JSR GOSUB
JSR LINE_12000
;
LINE_SKIP77:
;
;
LINE_10070:
;
JSR GOSUB
JSR LINE_51500
;
LINE_10080:
;
JMP RETURN
;
LINE_10500:
;
;
LINE_10510:
;
LDA VAR_DA$
LDY VAR_DA$+1
STA B_REG
STY B_REG+1
JSR LEN
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY TMP2_ZP
LDA #0
JSR ICMP
; Optimized code for LEN(1)
;
;
;
;
;
;
EQ_EQ6:
EQ_SKIP6:
COMP_SKP6:
BNE LINE_SKIP78
LINE_NSKIP78:
; Optimizer rule: Simplified equal comparison/6
;
JMP RETURN
;
LINE_SKIP78:
;
;
LINE_10520:
;
LDY VAR_DC%
LDA VAR_DC%+1
; integer in Y/A to FAC
JSR INTFAC
; Optimizer rule: FAC into REG?, REG? into FAC/0
JSR PUSHREAL
LDA VAR_DA$
LDY VAR_DA$+1
STA A_REG
STY A_REG+1
JSR POPREALXREG
; Optimizer rule: POP and XREG combined/1
; Optimizer rule: FAC 2 X_REG(2)/1
LDA #<VAR_DT$[]
LDY #>VAR_DT$[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_STRING
LDA #<CONST_6
LDY #>CONST_6
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_DA$
LDY #>VAR_DA$
JSR COPYSTRING
; Optimizer rule: Simplified loading of Strings/5
LDY VAR_DC%
LDA VAR_DC%+1
JSR SUPERFIINX
; Optimizer rule: Even faster INTEGER INC/1
STY VAR_DC%
STA VAR_DC%+1
;
LINE_10530:
;
JMP RETURN
;
LINE_11000:
;
;
LINE_11010:
;
JSR COMPACTMAX
LDA VAR_BY$
LDY VAR_BY$+1
STA B_REG
STY B_REG+1
LDA VAR_DA$
LDY VAR_DA$+1
STA A_REG
STY A_REG+1
JSR CONCAT
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_DA$
LDY #>VAR_DA$
JSR COPYSTRING
LDY VAR_CN%
LDA VAR_CN%+1
JSR SUPERFIINX
; Optimizer rule: Even faster INTEGER INC/1
STY VAR_CN%
STA VAR_CN%+1
JSR ONETOFAC
; Optimizer rule: Faster setting to 1/1
LDA #<VAR_TC
LDY #>VAR_TC
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
; Optimizer rule: Combine load and add/1
; Optimizer rule: Highly simplified loading for calculations/7
; Optimizer rule: FAC into REG?, REG? into FAC/0
LDX #<VAR_TC
LDY #>VAR_TC
; FAC to (X/Y)
JSR FACMEM
;
LINE_11020:
;
LDA VAR_DA$
LDY VAR_DA$+1
STA B_REG
STY B_REG+1
JSR LEN
LDA #$40
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY TMP2_ZP
LDA #0
JSR ICMP
; Optimized code for LEN(1)
;
;
;
;
;
;
ROL
BCS GT_GT7
LDA #0
JMP GT_SKIP7
GT_GT7:
LDA #$1
GT_SKIP7:
COMP_SKP7:
BEQ LINE_SKIP79
; Simplified conditional branch
;
LINE_NSKIP79:
;
JSR GOSUB
JSR LINE_10500
;
LINE_SKIP79:
;
;
LINE_11030:
;
LDY VAR_ML%
LDA VAR_ML%+1
STY TMP_ZP
STA TMP_ZP+1
LDY VAR_CN%
LDA VAR_CN%+1
JSR ICMP
; Optimized code for Integer(1)
;
;
;
;
;
;
;
;
;
;
EQ_EQ8:
EQ_SKIP8:
COMP_SKP8:
BNE LINE_SKIP80
LINE_NSKIP80:
; Optimizer rule: Simplified equal comparison/6
;
JSR GOSUB
JSR LINE_10500
JSR GOSUB
JSR LINE_12000
;
LINE_SKIP80:
;
;
LINE_11040:
;
JMP RETURN
;
LINE_12000:
;
;
LINE_12005:
;
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_CN%
LDA VAR_CN%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
EQ_EQ9:
EQ_SKIP9:
COMP_SKP9:
BNE LINE_SKIP81
LINE_NSKIP81:
; Optimizer rule: Simplified equal comparison/6
;
JMP RETURN
;
LINE_SKIP81:
;
;
LINE_12010:
;
LDY VAR_CK%
LDA VAR_CK%+1
JSR SUPERFIINX
; Optimizer rule: Even faster INTEGER INC/1
STY VAR_CK%
STA VAR_CK%+1
LDA #<CONST_9
LDY #>CONST_9
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
LDY VAR_CK%
LDA VAR_CK%+1
; integer in Y/A to FAC
JSR INTFAC
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
JSR INTOUT
JSR CRSRRIGHT
LDA #<CONST_10
LDY #>CONST_10
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
;
LINE_12030:
;
JSR GOSUB
JSR LINE_41000
JSR GOSUB
JSR LINE_42000
LDA VAR_MG$
LDY VAR_MG$+1
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
;
LINE_12040:
;
LDY #0
TYA
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_CN%
STA VAR_CN%+1
LDA #<CONST_6
LDY #>CONST_6
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_DA$
LDY #>VAR_DA$
JSR COPYSTRING
; Optimizer rule: Simplified loading of Strings/5
LDY #0
TYA
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_DC%
STA VAR_DC%+1
JMP RETURN
;
LINE_13000:
;
;
LINE_13010:
;
JSR LINEBREAK
LDA #<CONST_11
LDY #>CONST_11
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
;
LINE_13020:
;
JSR GETSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_A$
LDY #>VAR_A$
JSR COPYSTRING
LDA #<CONST_6
LDY #>CONST_6
STA B_REG
STY B_REG+1
LDA VAR_A$
LDY VAR_A$+1
STA A_REG
STY A_REG+1
; ignored: CHGCTX #0
JSR SEQ
LDA X_REG
COMP_SKP10:
BEQ LINE_SKIP82
; Simplified conditional branch
;
LINE_NSKIP82:
;
JMP LINE_13020
;
LINE_SKIP82:
;
;
LINE_13030:
;
JMP RETURN
;
LINE_39000:
;
;
LINE_39010:
;
LDA #<CONST_12R
LDY #>CONST_12R
JSR REALFAC
LDA #<VAR_TB
LDY #>VAR_TB
JSR MEMARG
JSR FASTAND
; Optimizer rule: Highly simplified loading for calculations/7
; Optimizer rule: Faster logic AND/1
; Optimizer rule: FAC into REG?, REG? into FAC/0
; FAC to integer in Y/A
JSR FACINT
STY VAR_LB%
STA VAR_LB%+1
LDY #8
LDA #0
STY A_REG
STA A_REG+1
LDA #<VAR_TB
LDY #>VAR_TB
JSR COPY2_XYA_XREG
; Optimizer rule: MEM 2 X_REG/3
; Optimizer rule: Memory saving copy/4
JSR XREGFAC
; Optimizer rule: X_REG 2 FAC(2)/1
; FAC = FAC>>A
JSR SHR
; Optimizer rule: FAC into REG?, REG? into FAC/0
; Optimizer rule: FAC into REG?, REG? into FAC/0
; FAC = INT(FAC)
JSR FACINT
; Optimizer rule: No need for INT(3)/1
STY VAR_HB%
STA VAR_HB%+1
JMP RETURN
;
LINE_40000:
;
;
LINE_40010:
;
LDA #147
JSR SINGLECHROUTMAX
; Optimizer rule: Memory saving single char out(1)/2
; Optimizer rule: Single character output/2
;
LINE_40015:
;
INPUT5:
JSR CLEARQUEUE
JSR COMPACTMAX
LDA #<CONST_13
LDY #>CONST_13
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
JSR QMARKOUT1
JSR INPUTSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_OF$
LDY #>VAR_OF$
JSR COPYSTRING
JSR QUEUESIZE
LDA X_REG
COMP_SKP11:
BEQ INPUTCHECK5
; Optimizer rule: CMP (REG) = 0(2)/3
JSR EXTRAIGNORED
INPUTCHECK5:
LDA #<CONST_6
LDY #>CONST_6
STA B_REG
STY B_REG+1
LDA VAR_OF$
LDY VAR_OF$+1
STA A_REG
STY A_REG+1
; ignored: CHGCTX #0
JSR SEQ
LDA X_REG
COMP_SKP12:
BEQ LINE_SKIP83
; Simplified conditional branch
;
LINE_NSKIP83:
;
JMP LINE_40015
;
LINE_SKIP83:
;
;
LINE_40020:
;
JMP RETURN
;
LINE_40100:
;
;
LINE_40120:
;
LDA #0
STA VAR_I
STA VAR_I+1
STA VAR_I+2
STA VAR_I+3
STA VAR_I+4
; Optimizer rule: Simplified setting to 0/6
LDA #<CONST_14R
LDY #>CONST_14R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA #<CONST_5R
LDY #>CONST_5R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA #<VAR_I
LDY #>VAR_I
STA A_REG
STY A_REG+1
LDA #<FORLOOP0
STA JUMP_TARGET
LDA #>FORLOOP0
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP0:
LDA #<CONST_6
LDY #>CONST_6
STA A_REG
STY A_REG+1
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
; Optimizer rule: Simplified string array assignment/7
; Optimizer rule: POP and XREG combined/1
; Optimizer rule: FAC 2 X_REG(2)/1
LDA #<VAR_DT$[]
LDY #>VAR_DT$[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_STRING
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
; Optimizer rule: NEXT with no variable name simplified/4
LDA A_REG
BNE RBEQ_0
JMP (JUMP_TARGET)
; Optimizer rule: NEXT check simplified/4
RBEQ_0:
;
LINE_40130:
;
LDA #<CONST_15
LDY #>CONST_15
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
JSR ONETOFAC
; Optimizer rule: Faster setting to 1/1
; Optimizer rule: Avoid INTEGER->REAL conversion/3
; Optimizer rule: FAC into REG?, REG? into FAC/0
; FAC = RND(FAC)
JSR FACRND
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
JSR POPREAL
LDA #<X_REG
LDY #>X_REG
JSR FASTFMULMEM
; Optimizer rule: Fast FMUL (MEM)/1
; Optimizer rule: POP, REG0, VAR0 -> direct calc (mul)/4
; Optimizer rule: FAC into REG?, REG? into FAC/0
; Optimizer rule: FAC into REG?, REG? into FAC/0
; FAC = INT(FAC)
JSR BASINT
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(1)/1
; Optimizer rule: FAC into REG?, REG? into FAC (2)/3
LDX #<VAR_RN
LDY #>VAR_RN
; FAC to (X/Y)
JSR FACMEM
;
LINE_40140:
;
JSR COMPACTMAX
LDA #<VAR_RN
LDY #>VAR_RN
JSR COPY2_XYA_YREG
; Optimizer rule: MEM 2 Y_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
; ignored: CHGCTX #1
JSR STR
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_T$
LDY #>VAR_T$
JSR COPYSTRING
JSR COMPACTMAX
LDA #<CONST_5R
LDY #>CONST_5R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
; ignored: CHGCTX #1
LDA VAR_T$
LDY VAR_T$+1
STA B_REG
STY B_REG+1
; ignored: CHGCTX #0
JSR LEN
JSR POPREAL2X
; Optimizer rule: POPREAL and load X/1
JSR FASTFSUBARG
; Optimizer rule: Fast FSUB (ARG)/1
; Optimizer rule: POP, REG0, VAR0 -> direct calc/5
; Optimizer rule: FAC into REG?, REG? into FAC/0
LDX #<C_REG
LDY #>C_REG
; FAC to (X/Y)
JSR FACMEM
; ignored: CHGCTX #1
LDA VAR_T$
LDY VAR_T$+1
STA B_REG
STY B_REG+1
JSR RIGHT
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_T$
LDY #>VAR_T$
JSR COPYSTRING
;
LINE_40150:
;
JSR COMPACTMAX
LDY #18
LDA #208
STY MOVBSELF5+1
STA MOVBSELF5+2
; Optimized code for PEEK(<constant>)
;
;
;
MOVBSELF5:
LDY $FFFF
LDA #0
; integer in Y/A to FAC
JSR INTFAC
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(1)/1
JSR COPY_XREG2YREG
; Optimizer rule: Direct copy from X to Y/1
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Improved copy from REG0 to REG1/7
; ignored: CHGCTX #1
JSR STR
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_R$
LDY #>VAR_R$
JSR COPYSTRING
JSR COMPACTMAX
LDA #<CONST_5R
LDY #>CONST_5R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
; ignored: CHGCTX #1
LDA VAR_R$
LDY VAR_R$+1
STA B_REG
STY B_REG+1
; ignored: CHGCTX #0
JSR LEN
JSR POPREAL2X
; Optimizer rule: POPREAL and load X/1
JSR FASTFSUBARG
; Optimizer rule: Fast FSUB (ARG)/1
; Optimizer rule: POP, REG0, VAR0 -> direct calc/5
; Optimizer rule: FAC into REG?, REG? into FAC/0
LDX #<C_REG
LDY #>C_REG
; FAC to (X/Y)
JSR FACMEM
; ignored: CHGCTX #1
LDA VAR_R$
LDY VAR_R$+1
STA B_REG
STY B_REG+1
JSR RIGHT
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_R$
LDY #>VAR_R$
JSR COPYSTRING
;
LINE_40160:
;
JSR COMPACTMAX
LDA #<CONST_17
LDY #>CONST_17
STA B_REG
STY B_REG+1
LDA VAR_T$
LDY VAR_T$+1
STA A_REG
STY A_REG+1
JSR CONCAT
LDA VAR_R$
LDY VAR_R$+1
STA B_REG
STY B_REG+1
JSR CONCAT
LDA #<CONST_17
LDY #>CONST_17
STA B_REG
STY B_REG+1
JSR CONCAT
LDA VAR_OF$
LDY VAR_OF$+1
STA B_REG
STY B_REG+1
JSR CONCAT
LDA #<CONST_18
LDY #>CONST_18
STA B_REG
STY B_REG+1
JSR CONCAT
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_TF$
LDY #>VAR_TF$
JSR COPYSTRING
;
LINE_40180:
;
JMP RETURN
;
LINE_40500:
;
;
LINE_40502:
;
LDA #<CONST_19R
LDY #>CONST_19R
JSR REALFAC
LDA #<VAR_TC
LDY #>VAR_TC
JSR CMPFAC
; Optimizer rule: Highly simplified loading for CMP/6
BEQ LT_LT_EQ10
ROL
BCC LT_LT10
LT_LT_EQ10:
LDA #0
JMP LT_SKIP10
LT_LT10:
LDA #$1
LT_SKIP10:
COMP_SKP14:
BEQ LINE_SKIP84
; Simplified conditional branch
;
LINE_NSKIP84:
;
JSR LINEBREAK
LDA #<CONST_20
LDY #>CONST_20
STA B_REG
STY B_REG+1
LDY B_REG
LDA B_REG+1
STY A_REG
STA A_REG+1
JSR STROUTBRK
; Optimizer rule: STROUT + LINEBRK/1
JMP LINE_60000
;
LINE_SKIP84:
;
;
LINE_40505:
;
LDA #<CONST_21
LDY #>CONST_21
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
;
LINE_40510:
;
LDA #0
STA VAR_TL
STA VAR_TL+1
STA VAR_TL+2
STA VAR_TL+3
STA VAR_TL+4
; Optimizer rule: Simplified setting to 0/6
LDY #0
TYA
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_DC%
STA VAR_DC%+1
JSR COMPACTMAX
LDA #<CONST_22
LDY #>CONST_22
STA B_REG
STY B_REG+1
LDA VAR_GU$
LDY VAR_GU$+1
STA A_REG
STY A_REG+1
JSR CONCAT
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_UR$
LDY #>VAR_UR$
JSR COPYSTRING
;
LINE_40520:
;
JSR COMPACTMAX
LDA #<CONST_23
LDY #>CONST_23
STA B_REG
STY B_REG+1
LDA VAR_UR$
LDY VAR_UR$+1
STA A_REG
STY A_REG+1
JSR CONCAT
LDA VAR_TF$
LDY VAR_TF$+1
STA B_REG
STY B_REG+1
JSR CONCAT
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_UR$
LDY #>VAR_UR$
JSR COPYSTRING
;
LINE_40522:
;
LDA #$0
STA FAC
STA FACHO
STA FACMOH
STA FACMO
STA FACLO
STA FACSGN
; Optimizer rule: Direct loading of 0/7
LDA #<VAR_SA
LDY #>VAR_SA
JSR CMPFAC
; Optimizer rule: Highly simplified loading for CMP/6
ROL
BCS GT_GT11
LDA #0
JMP GT_SKIP11
GT_GT11:
LDA #$1
GT_SKIP11:
COMP_SKP15:
BNE LINE_NSKIP85
; Optimizer rule: Simplified CMP redux/7
JMP LINE_SKIP85
;
LINE_NSKIP85:
;
LDX #4
dcloop578_1:
LDA VAR_SA,X
STA VAR_N,X
DEX
BPL dcloop578_1
; Optimizer rule: Direct copy of floats into mem/6
JSR GOSUB
JSR LINE_40900
JSR COMPACTMAX
LDA #<CONST_24
LDY #>CONST_24
STA B_REG
STY B_REG+1
LDA VAR_UR$
LDY VAR_UR$+1
STA A_REG
STY A_REG+1
JSR CONCAT
LDA VAR_NS$
LDY VAR_NS$+1
STA B_REG
STY B_REG+1
JSR CONCAT
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_UR$
LDY #>VAR_UR$
JSR COPYSTRING
;
LINE_SKIP85:
;
;
LINE_40523:
;
LDA #$0
STA FAC
STA FACHO
STA FACMOH
STA FACMO
STA FACLO
STA FACSGN
; Optimizer rule: Direct loading of 0/7
LDA #<VAR_HS
LDY #>VAR_HS
JSR CMPFAC
; Optimizer rule: Highly simplified loading for CMP/6
BCC LTEQ_LTEQ12
BEQ LTEQ_LTEQ12
LDA #0
JMP LTEQ_SKIP12
LTEQ_LTEQ12:
LDA #$1
LTEQ_SKIP12:
COMP_SKP16:
BEQ LINE_SKIP86
; Simplified conditional branch
;
LINE_NSKIP86:
;
JMP LINE_40526
;
LINE_SKIP86:
;
;
LINE_40524:
;
LDX #4
dcloop578_2:
LDA VAR_HS,X
STA VAR_N,X
DEX
BPL dcloop578_2
; Optimizer rule: Direct copy of floats into mem/6
JSR GOSUB
JSR LINE_40900
LDA VAR_NS$
LDY VAR_NS$+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_HS$
LDY #>VAR_HS$
JSR COPYSTRING
; Optimizer rule: Simplified loading of Strings/5
LDX #4
dcloop578_3:
LDA VAR_HE,X
STA VAR_N,X
DEX
BPL dcloop578_3
; Optimizer rule: Direct copy of floats into mem/6
JSR GOSUB
JSR LINE_40900
;
LINE_40525:
;
JSR COMPACTMAX
LDA #<CONST_25
LDY #>CONST_25
STA B_REG
STY B_REG+1
LDA VAR_UR$
LDY VAR_UR$+1
STA A_REG
STY A_REG+1
JSR CONCAT
LDA VAR_HS$
LDY VAR_HS$+1
STA B_REG
STY B_REG+1
JSR CONCAT
LDA #<CONST_17
LDY #>CONST_17
STA B_REG
STY B_REG+1
JSR CONCAT
LDA VAR_NS$
LDY VAR_NS$+1
STA B_REG
STY B_REG+1
JSR CONCAT
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_UR$
LDY #>VAR_UR$
JSR COPYSTRING
;
LINE_40526:
;
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_CL%
LDA VAR_CL%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
ROL
BCS GT_GT13
LDA #0
JMP GT_SKIP13
GT_GT13:
LDA #$1
GT_SKIP13:
COMP_SKP17:
BNE LINE_NSKIP87
; Optimizer rule: Simplified CMP redux/7
JMP LINE_SKIP87
;
LINE_NSKIP87:
;
LDY VAR_CL%
LDA VAR_CL%+1
; integer in Y/A to FAC
JSR INTFAC
; Optimizer rule: FAC into REG?, REG? into FAC/0
LDX #<VAR_N
LDY #>VAR_N
; FAC to (X/Y)
JSR FACMEM
JSR GOSUB
JSR LINE_40900
JSR COMPACTMAX
LDA #<CONST_26
LDY #>CONST_26
STA B_REG
STY B_REG+1
LDA VAR_UR$
LDY VAR_UR$+1
STA A_REG
STY A_REG+1
JSR CONCAT
LDA VAR_NS$
LDY VAR_NS$+1
STA B_REG
STY B_REG+1
JSR CONCAT
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_UR$
LDY #>VAR_UR$
JSR COPYSTRING
;
LINE_SKIP87:
;
;
LINE_40530:
;
JSR GOSUB
JSR LINE_46500
JSR GOSUB
JSR LINE_41500
;
LINE_40550:
;
JSR GOSUB
JSR LINE_42000
LDA #<CONST_27
LDY #>CONST_27
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
;
LINE_40560:
;
LDA #<CONST_28
LDY #>CONST_28
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
;
LINE_40570:
;
LDA #0
STA VAR_TL
STA VAR_TL+1
STA VAR_TL+2
STA VAR_TL+3
STA VAR_TL+4
; Optimizer rule: Simplified setting to 0/6
LDY #0
TYA
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_DC%
STA VAR_DC%+1
JSR COMPACTMAX
LDA #<CONST_22
LDY #>CONST_22
STA B_REG
STY B_REG+1
LDA VAR_GU$
LDY VAR_GU$+1
STA A_REG
STY A_REG+1
JSR CONCAT
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_UR$
LDY #>VAR_UR$
JSR COPYSTRING
;
LINE_40580:
;
JSR COMPACTMAX
LDA #<CONST_29
LDY #>CONST_29
STA B_REG
STY B_REG+1
LDA VAR_UR$
LDY VAR_UR$+1
STA A_REG
STY A_REG+1
JSR CONCAT
LDA VAR_TF$
LDY VAR_TF$+1
STA B_REG
STY B_REG+1
JSR CONCAT
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_UR$
LDY #>VAR_UR$
JSR COPYSTRING
;
LINE_40590:
;
JSR GOSUB
JSR LINE_46500
JSR GOSUB
JSR LINE_41500
;
LINE_40600:
;
JSR GOSUB
JSR LINE_42000
LDA #<CONST_30
LDY #>CONST_30
STA B_REG
STY B_REG+1
LDA VAR_MG$
LDY VAR_MG$+1
STA A_REG
STY A_REG+1
; ignored: CHGCTX #0
JSR SEQ
LDA X_REG
COMP_SKP18:
BEQ LINE_SKIP88
; Simplified conditional branch
;
LINE_NSKIP88:
;
JSR GOSUB
JSR LINE_40800
LDA #<CONST_31
LDY #>CONST_31
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
JMP LINE_40590
;
LINE_SKIP88:
;
;
LINE_40650:
;
LDA VAR_MG$
LDY VAR_MG$+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_TF$
LDY #>VAR_TF$
JSR COPYSTRING
; Optimizer rule: Simplified loading of Strings/5
LDA #<CONST_27
LDY #>CONST_27
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
;
LINE_40660:
;
JMP RETURN
;
LINE_40800:
;
;
LINE_40810:
;
LDA #<CONST_32
LDY #>CONST_32
STA TMP_ZP
STY TMP_ZP+1
; Optimizer rule: MEM->REG, REG->TMP_ZP/4
JSR WRITETID
LDA #<CONST_33R
LDY #>CONST_33R
JSR COPY2_XYA_YREG
; Optimizer rule: MEM 2 Y_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
<IF !X16>
SEI
LDY TIMEADDR
LDX TIMEADDR+1
LDA TIMEADDR+2
CLI
</IF>
SEC
JSR COPYTIME
JSR GETTIME
LDX #<VAR_TI
LDY #>VAR_TI
JSR FACMEM
LDA #<VAR_TI
LDY #>VAR_TI
JSR COPY2_XYA_XREG
; Optimizer rule: MEM 2 X_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
JSR YREGFAC
; Optimizer rule: Y_REG 2 FAC(1)/1
LDA #<X_REG
LDY #>X_REG
; Real in (A/Y) to ARG
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
; Optimizer rule: Combine load and add/1
; Optimizer rule: FAC into REG?, REG? into FAC/0
LDX #<VAR_OT
LDY #>VAR_OT
; FAC to (X/Y)
JSR FACMEM
LDY #23
STY 2023
; Optimizer rule: Simple POKE/2
;
LINE_40820:
;
LDA #<VAR_OT
LDY #>VAR_OT
JSR COPY2_XYA_YREG
; Optimizer rule: MEM 2 Y_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
<IF !X16>
SEI
LDY TIMEADDR
LDX TIMEADDR+1
LDA TIMEADDR+2
CLI
</IF>
SEC
JSR COPYTIME
JSR GETTIME
LDX #<VAR_TI
LDY #>VAR_TI
JSR FACMEM
LDA #<VAR_TI
LDY #>VAR_TI
JSR COPY2_XYA_XREG
; Optimizer rule: MEM 2 X_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
JSR YREGFAC
; Optimizer rule: Y_REG 2 FAC(1)/1
LDA #<X_REG
LDY #>X_REG
; CMPFAC with (A/Y)
JSR CMPFAC
BEQ LT_LT_EQ14
ROL
BCC LT_LT14
LT_LT_EQ14:
LDA #0
JMP LT_SKIP14
LT_LT14:
LDA #$1
LT_SKIP14:
COMP_SKP19:
BEQ LINE_SKIP89
; Simplified conditional branch
;
LINE_NSKIP89:
;
JMP LINE_40820
;
LINE_SKIP89:
;
;
LINE_40830:
;
LDY #32
STY 2023
; Optimizer rule: Simple POKE/2
JMP RETURN
;
LINE_40900:
;
;
LINE_40910:
;
JSR COMPACTMAX
LDA #<VAR_N
LDY #>VAR_N
JSR COPY2_XYA_YREG
; Optimizer rule: MEM 2 Y_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
; ignored: CHGCTX #1
JSR STR
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_NS$
LDY #>VAR_NS$
JSR COPYSTRING
;
LINE_40920:
;
LDA #$0
STA FAC
STA FACHO
STA FACMOH
STA FACMO
STA FACLO
STA FACSGN
; Optimizer rule: Direct loading of 0/7
LDA #<VAR_N
LDY #>VAR_N
JSR CMPFAC
; Optimizer rule: Highly simplified loading for CMP/6
BEQ LT_LT_EQ15
ROL
BCC LT_LT15
LT_LT_EQ15:
LDA #0
JMP LT_SKIP15
LT_LT15:
LDA #$1
LT_SKIP15:
COMP_SKP20:
BEQ LINE_SKIP90
; Simplified conditional branch
;
LINE_NSKIP90:
;
JMP RETURN
;
LINE_SKIP90:
;
;
LINE_40930:
;
JSR COMPACTMAX
LDA #<CONST_5R
LDY #>CONST_5R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
; ignored: CHGCTX #1
LDA VAR_NS$
LDY VAR_NS$+1
STA B_REG
STY B_REG+1
; ignored: CHGCTX #0
JSR LEN
JSR POPREAL2X
; Optimizer rule: POPREAL and load X/1
JSR FASTFSUBARG
; Optimizer rule: Fast FSUB (ARG)/1
; Optimizer rule: POP, REG0, VAR0 -> direct calc/5
; Optimizer rule: FAC into REG?, REG? into FAC/0
LDX #<C_REG
LDY #>C_REG
; FAC to (X/Y)
JSR FACMEM
; ignored: CHGCTX #1
LDA VAR_NS$
LDY VAR_NS$+1
STA B_REG
STY B_REG+1
JSR RIGHT
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_NS$
LDY #>VAR_NS$
JSR COPYSTRING
JMP RETURN
;
LINE_41000:
;
;
LINE_41010:
;
JSR GOSUB
JSR LINE_45500
;
LINE_41020:
;
JSR GOSUB
JSR LINE_46500
;
LINE_41030:
;
JSR GOSUB
JSR LINE_41500
JMP RETURN
;
LINE_41500:
;
;
LINE_41510:
;
LDY #18
STY 2023
; Optimizer rule: Simple POKE/2
LDY VAR_TT%
LDA VAR_TT%+1
STY 171
; Optimizer rule: Remove INTFAC/FACWORD/3
JSR SETUPMULTIPARS
LDA #<VAR_BU
LDY #>VAR_BU
JSR COPY_AND_ADDCOLON
; Optimizer rule: Combine copy and add colon/1
LDA #<VAR_US
LDY #>VAR_US
JSR SYS_AND_PULLDOWN
; Optimizer rule: Combine dynamic sys call and pull down/1
;
LINE_41520:
;
LDY 171
LDA #0
; integer in Y/A to FAC
JSR INTFAC
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
LDA X_REG
BEQ EQ_EQ16
LDA #0
; Optimizer rule: CMP (REG) = 0/3
JMP EQ_SKIP16
EQ_EQ16:
LDA #$1
EQ_SKIP16:
COMP_SKP21:
BEQ LINE_SKIP91
; Simplified conditional branch
;
LINE_NSKIP91:
;
JMP LINE_56000
;
LINE_SKIP91:
;
;
LINE_41530:
;
LDY VAR_TT%
LDA VAR_TT%+1
STY 171
; Optimizer rule: Remove INTFAC/FACWORD/3
JSR SETUPMULTIPARS
LDA #<CONST_37R
LDY #>CONST_37R
JSR REALFAC
LDA #<VAR_BU
LDY #>VAR_BU
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
; Optimizer rule: Combine load and add/1
; Optimizer rule: Highly simplified loading for calculations/7
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
JSR COPYREALPAR
JSR ADDCOLON
LDA #<VAR_UG
LDY #>VAR_UG
JSR SYS_AND_PULLDOWN
; Optimizer rule: Combine dynamic sys call and pull down/1
;
LINE_41540:
;
LDY 171
LDA #0
; integer in Y/A to FAC
JSR INTFAC
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
LDA X_REG
BEQ EQ_EQ17
LDA #0
; Optimizer rule: CMP (REG) = 0/3
JMP EQ_SKIP17
EQ_EQ17:
LDA #$1
EQ_SKIP17:
COMP_SKP22:
BEQ LINE_SKIP92
; Simplified conditional branch
;
LINE_NSKIP92:
;
JMP LINE_56000
;
LINE_SKIP92:
;
;
LINE_41550:
;
JSR GOSUB
JSR LINE_46000
LDA VAR_LE%
ORA VAR_LE%+1
COMP_SKP23:
BEQ LINE_SKIP93
; Optimized code for Integer(6)
;
;
;
;
; Simplified conditional branch
;
LINE_NSKIP93:
;
JMP LINE_56200
;
LINE_SKIP93:
;
;
LINE_41560:
;
LDY #0
TYA
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_ER%
STA VAR_ER%+1
LDY 170
LDA #0
; integer in Y/A to FAC
JSR INTFAC
JSR FACXREG
LDY #8
STY A_REG
; Optimizer rule: Omit XREG->FAC/3
JSR SHL
; Optimizer rule: Shorter SHL/4
; Optimizer rule: FAC into REG?, REG? into FAC/0
JSR PUSHREAL
LDY 169
LDA #0
; integer in Y/A to FAC
JSR INTFAC
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
JSR POPREAL2X
; Optimizer rule: POPREAL and load X/1
JSR FASTFADDARG
; Optimizer rule: Fast FADD (ARG)/1
; Optimizer rule: POP, REG0, VAR0 -> direct calc/5
; Optimizer rule: FAC into REG?, REG? into FAC/0
; FAC to integer in Y/A
JSR FACINT
STY VAR_BR%
STA VAR_BR%+1
LDY #32
STY 2023
; Optimizer rule: Simple POKE/2
JMP RETURN
;
LINE_42000:
;
;
LINE_42010:
;
LDA #<CONST_6
LDY #>CONST_6
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_MG$
LDY #>VAR_MG$
JSR COPYSTRING
; Optimizer rule: Simplified loading of Strings/5
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_BR%
LDA VAR_BR%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
EQ_EQ18:
EQ_SKIP18:
COMP_SKP24:
BNE LINE_SKIP94
LINE_NSKIP94:
; Optimizer rule: Simplified equal comparison/6
;
JMP RETURN
;
LINE_SKIP94:
;
;
LINE_42020:
;
LDA #<CONST_37R
LDY #>CONST_37R
JSR REALFAC
LDA #<VAR_BU
LDY #>VAR_BU
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
; Optimizer rule: Combine load and add/1
; Optimizer rule: Highly simplified loading for calculations/7
; Optimizer rule: FAC into REG?, REG? into FAC/0
LDX #<VAR_I
LDY #>VAR_I
; FAC to (X/Y)
JSR FACMEM
LDA #<CONST_38R
LDY #>CONST_38R
JSR REALFAC
LDA #<VAR_BU
LDY #>VAR_BU
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
; Optimizer rule: Combine load and add/1
; Optimizer rule: Highly simplified loading for calculations/7
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
LDY VAR_BR%
LDA VAR_BR%+1
; integer in Y/A to FAC
JSR INTFAC
; Optimizer rule: FAC into REG?, REG? into FAC/0
LDA #<X_REG
LDY #>X_REG
; Real in (A/Y) to ARG
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
; Optimizer rule: Combine load and add/1
; Optimizer rule: FAC into REG?, REG? into FAC/0
JSR PUSHREAL
LDA #<CONST_5R
LDY #>CONST_5R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA #<VAR_I
LDY #>VAR_I
STA A_REG
STY A_REG+1
LDA #<FORLOOP1
STA JUMP_TARGET
LDA #>FORLOOP1
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP1:
;
LINE_42030:
;
LDA #<VAR_I
LDY #>VAR_I
JSR REALFAC
; Optimizer rule: Direct loading of values into FAC/3
; FAC to integer in Y/A
JSR FACWORD
STY MOVBSELF16+1
STA MOVBSELF16+2
MOVBSELF16:
LDY $FFFF
LDA #0
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_DD%
STA VAR_DD%+1
;
LINE_42040:
;
JSR GOSUB
JSR LINE_47300
;
LINE_42060:
;
JSR COMPACTMAX
LDA VAR_DD%
JSR CHRINT
; Optimizer rule: CHR with integer constant/2
LDY A_REG
LDA A_REG+1
STY B_REG
STA B_REG+1
LDA VAR_MG$
LDY VAR_MG$+1
STA A_REG
STY A_REG+1
JSR CONCAT
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_MG$
LDY #>VAR_MG$
JSR COPYSTRING
;
LINE_42070:
;
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
; Optimizer rule: NEXT with no variable name simplified/4
LDA A_REG
BNE RBEQ_1
JMP (JUMP_TARGET)
; Optimizer rule: NEXT check simplified/4
RBEQ_1:
;
LINE_42080:
;
LDA VAR_MG$
LDY VAR_MG$+1
STA B_REG
STY B_REG+1
JSR LEN
LDA #$05
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY TMP2_ZP
LDA #0
JSR ICMP
; Optimized code for LEN(1)
;
;
;
;
;
;
BCC LTEQ_LTEQ19
BEQ LTEQ_LTEQ19
LDA #0
JMP LTEQ_SKIP19
LTEQ_LTEQ19:
LDA #$1
LTEQ_SKIP19:
COMP_SKP26:
BEQ LINE_SKIP95
; Simplified conditional branch
;
LINE_NSKIP95:
;
JMP RETURN
;
LINE_SKIP95:
;
;
LINE_42090:
;
JSR COMPACTMAX
LDA #<CONST_39R
LDY #>CONST_39R
JSR COPY2_XYA_CREG
; Optimizer rule: Direct copy from MEM to C/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
; ignored: CHGCTX #1
LDA VAR_MG$
LDY VAR_MG$+1
STA B_REG
STY B_REG+1
JSR LEFT
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_A$
LDY #>VAR_A$
JSR COPYSTRING
LDA #<CONST_40
LDY #>CONST_40
STA B_REG
STY B_REG+1
LDA VAR_A$
LDY VAR_A$+1
STA A_REG
STY A_REG+1
; ignored: CHGCTX #0
JSR SEQ
LDY #>X_REG
LDA #<X_REG
; Real in (A/Y) to FAC
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
; ignored: CHGCTX #1
LDA #<CONST_41
LDY #>CONST_41
STA B_REG
STY B_REG+1
LDA VAR_A$
LDY VAR_A$+1
STA A_REG
STY A_REG+1
; ignored: CHGCTX #0
JSR SEQ
JSR POPREAL2X
; Optimizer rule: POPREAL and load X/1
JSR FASTOR
; Optimizer rule: POP, REG0, VAR0 -> direct calc/5
; Optimizer rule: Faster logic OR/1
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
LDA X_REG
COMP_SKP27:
BEQ LINE_SKIP96
; Simplified conditional branch
;
LINE_NSKIP96:
;
JMP LINE_43000
;
LINE_SKIP96:
;
;
LINE_42100:
;
JMP RETURN
;
LINE_43000:
;
;
LINE_43010:
;
JSR GOSUB
JSR LINE_51500
LDA #<CONST_41
LDY #>CONST_41
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JSR LINEBREAK
LDA VAR_MG$
LDY VAR_MG$+1
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JMP LINE_60000
;
LINE_44000:
;
;
LINE_44010:
;
LDA #<CONST_42
LDY #>CONST_42
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
JSR GOSUB
JSR LINE_48000
;
LINE_44020:
;
LDA #0
STA VAR_TL
STA VAR_TL+1
STA VAR_TL+2
STA VAR_TL+3
STA VAR_TL+4
; Optimizer rule: Simplified setting to 0/6
LDY #0
TYA
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_PT%
STA VAR_PT%+1
LDY #0
TYA
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_DC%
STA VAR_DC%+1
;
LINE_44025:
;
JSR GOSUB
JSR LINE_44500
;
LINE_44030:
;
JSR GOSUB
JSR LINE_46500
JSR GOSUB
JSR LINE_41500
;
LINE_44040:
;
LDA #<CONST_37R
LDY #>CONST_37R
JSR REALFAC
LDA #<VAR_BU
LDY #>VAR_BU
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
; Optimizer rule: Combine load and add/1
; Optimizer rule: Highly simplified loading for calculations/7
; Optimizer rule: FAC into REG?, REG? into FAC/0
; Optimizer rule: FAC into REG?, REG? into FAC/0
; FAC to integer in Y/A
JSR FACWORD
STY MOVBSELF17+1
STA MOVBSELF17+2
MOVBSELF17:
LDY $FFFF
LDA #0
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_NC%
STA VAR_NC%+1
LDY #16
STY 2023
; Optimizer rule: Simple POKE/2
;
LINE_44050:
;
LDA #<CONST_6
LDY #>CONST_6
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_DA$
LDY #>VAR_DA$
JSR COPYSTRING
; Optimizer rule: Simplified loading of Strings/5
LDY #0
TYA
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_P%
STA VAR_P%+1
LDA #<CONST_44R
LDY #>CONST_44R
JSR REALFAC
LDA #<VAR_BU
LDY #>VAR_BU
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
; Optimizer rule: Combine load and add/1
; Optimizer rule: Highly simplified loading for calculations/7
; Optimizer rule: FAC into REG?, REG? into FAC/0
LDX #<VAR_I
LDY #>VAR_I
; FAC to (X/Y)
JSR FACMEM
LDA #<CONST_38R
LDY #>CONST_38R
JSR REALFAC
LDA #<VAR_BU
LDY #>VAR_BU
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
; Optimizer rule: Combine load and add/1
; Optimizer rule: Highly simplified loading for calculations/7
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
LDY VAR_BR%
LDA VAR_BR%+1
; integer in Y/A to FAC
JSR INTFAC
; Optimizer rule: FAC into REG?, REG? into FAC/0
LDA #<X_REG
LDY #>X_REG
; Real in (A/Y) to ARG
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
; Optimizer rule: Combine load and add/1
; Optimizer rule: FAC into REG?, REG? into FAC/0
JSR PUSHREAL
LDA #<CONST_5R
LDY #>CONST_5R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA #<VAR_I
LDY #>VAR_I
STA A_REG
STY A_REG+1
LDA #<FORLOOP2
STA JUMP_TARGET
LDA #>FORLOOP2
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP2:
;
LINE_44060:
;
JSR COMPACTMAX
LDA #<VAR_I
LDY #>VAR_I
JSR REALFAC
; Optimizer rule: Direct loading of values into FAC/3
; FAC to integer in Y/A
JSR FACWORD
STY MOVBSELF19+1
STA MOVBSELF19+2
MOVBSELF19:
LDY $FFFF
LDA #0
; integer in Y/A to FAC
TYA
TAX
JSR CHRINT
; Optimizer rule: CHR with integer value(1)/3
LDY A_REG
LDA A_REG+1
STY B_REG
STA B_REG+1
LDA VAR_DA$
LDY VAR_DA$+1
STA A_REG
STY A_REG+1
JSR CONCAT
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_DA$
LDY #>VAR_DA$
JSR COPYSTRING
;
LINE_44070:
;
LDA VAR_DA$
LDY VAR_DA$+1
STA B_REG
STY B_REG+1
JSR LEN
LDA #$20
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY TMP2_ZP
LDA #0
JSR ICMP
; Optimized code for LEN(1)
;
;
;
;
;
;
ROL
BCS GT_GT20
LDA #0
JMP GT_SKIP20
GT_GT20:
LDA #$1
GT_SKIP20:
COMP_SKP28:
BEQ LINE_SKIP97
; Simplified conditional branch
;
LINE_NSKIP97:
;
JSR GOSUB
JSR LINE_49000
JSR GOSUB
JSR LINE_44300
;
LINE_SKIP97:
;
;
LINE_44080:
;
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
; Optimizer rule: NEXT with no variable name simplified/4
LDA A_REG
BNE RBEQ_2
JMP (JUMP_TARGET)
; Optimizer rule: NEXT check simplified/4
RBEQ_2:
LDA VAR_DA$
LDY VAR_DA$+1
STA B_REG
STY B_REG+1
JSR LEN
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY TMP2_ZP
LDA #0
JSR ICMP
; Optimized code for LEN(1)
;
;
;
;
;
;
ROL
BCS GT_GT21
LDA #0
JMP GT_SKIP21
GT_GT21:
LDA #$1
GT_SKIP21:
COMP_SKP30:
BEQ LINE_SKIP98
; Simplified conditional branch
;
LINE_NSKIP98:
;
JSR GOSUB
JSR LINE_49000
;
LINE_SKIP98:
;
;
LINE_44090:
;
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_NC%
LDA VAR_NC%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
ROL
BCS GT_GT22
LDA #0
JMP GT_SKIP22
GT_GT22:
LDA #$1
GT_SKIP22:
COMP_SKP31:
BEQ LINE_SKIP99
; Simplified conditional branch
;
LINE_NSKIP99:
;
LDY VAR_NC%
LDA VAR_NC%+1
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_PT%
STA VAR_PT%+1
JMP LINE_44025
;
LINE_SKIP99:
;
;
LINE_44100:
;
JSR GOSUB
JSR LINE_48500
LDY #32
STY 2023
; Optimizer rule: Simple POKE/2
LDA #<CONST_27
LDY #>CONST_27
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JMP RETURN
;
LINE_44300:
;
;
LINE_44310:
;
LDA #<CONST_6
LDY #>CONST_6
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_DA$
LDY #>VAR_DA$
JSR COPYSTRING
; Optimizer rule: Simplified loading of Strings/5
LDY VAR_P%
LDA VAR_P%+1
JSR SUPERFIINX
; Optimizer rule: Even faster INTEGER INC/1
STY VAR_P%
STA VAR_P%+1
LDY #16
STY 2023
; Optimizer rule: Simple POKE/2
LDA #$0b
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_P%
LDA VAR_P%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
ROL
BCS GT_GT23
LDA #0
JMP GT_SKIP23
GT_GT23:
LDA #$1
GT_SKIP23:
COMP_SKP32:
BEQ LINE_SKIP100
; Simplified conditional branch
;
LINE_NSKIP100:
;
LDY #0
TYA
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_P%
STA VAR_P%+1
LDA #<CONST_31
LDY #>CONST_31
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
;
LINE_SKIP100:
;
;
LINE_44320:
;
JMP RETURN
;
LINE_44500:
;
;
LINE_44510:
;
JSR COMPACTMAX
LDY VAR_PT%
LDA VAR_PT%+1
; integer in Y/A to FAC
JSR INTFAC
JSR FACYREG
; Optimizer rule: FAC 2 Y_REG(2)/1
; ignored: CHGCTX #1
JSR STR
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_PT$
LDY #>VAR_PT$
JSR COPYSTRING
JSR COMPACTMAX
LDA #<CONST_46
LDY #>CONST_46
STA B_REG
STY B_REG+1
LDA VAR_GU$
LDY VAR_GU$+1
STA A_REG
STY A_REG+1
JSR CONCAT
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_UR$
LDY #>VAR_UR$
JSR COPYSTRING
;
LINE_44520:
;
JSR COMPACTMAX
LDA #<CONST_5R
LDY #>CONST_5R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
; ignored: CHGCTX #1
LDA VAR_PT$
LDY VAR_PT$+1
STA B_REG
STY B_REG+1
; ignored: CHGCTX #0
JSR LEN
JSR POPREAL2X
; Optimizer rule: POPREAL and load X/1
JSR FASTFSUBARG
; Optimizer rule: Fast FSUB (ARG)/1
; Optimizer rule: POP, REG0, VAR0 -> direct calc/5
; Optimizer rule: FAC into REG?, REG? into FAC/0
LDX #<C_REG
LDY #>C_REG
; FAC to (X/Y)
JSR FACMEM
; ignored: CHGCTX #1
LDA VAR_PT$
LDY VAR_PT$+1
STA B_REG
STY B_REG+1
JSR RIGHT
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
JSR PUSHINT
LDA #<CONST_47
LDY #>CONST_47
STA B_REG
STY B_REG+1
LDA VAR_UR$
LDY VAR_UR$+1
STA A_REG
STY A_REG+1
JSR CONCAT
JSR POPINT2B
; Optimizer rule: Simplified POPINT/1
JSR CONCAT
LDA #<CONST_48
LDY #>CONST_48
STA B_REG
STY B_REG+1
JSR CONCAT
LDA VAR_TF$
LDY VAR_TF$+1
STA B_REG
STY B_REG+1
JSR CONCAT
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_UR$
LDY #>VAR_UR$
JSR COPYSTRING
;
LINE_44530:
;
JMP RETURN
;
LINE_45500:
;
;
LINE_45505:
;
LDA #0
STA VAR_TL
STA VAR_TL+1
STA VAR_TL+2
STA VAR_TL+3
STA VAR_TL+4
; Optimizer rule: Simplified setting to 0/6
STA VAR_I
STA VAR_I+1
STA VAR_I+2
STA VAR_I+3
STA VAR_I+4
; Optimizer rule: Simplified setting to 0/6
LDY VAR_DC%
LDA VAR_DC%+1
JSR FIDEX
; Optimizer rule: Fast INTEGER DEC/3
LDA #<X_REG
LDY #>X_REG
; Real in (A/Y) to FAC
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA #<CONST_5R
LDY #>CONST_5R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA #<VAR_I
LDY #>VAR_I
STA A_REG
STY A_REG+1
LDA #<FORLOOP3
STA JUMP_TARGET
LDA #>FORLOOP3
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP3:
LDA #<VAR_I
LDY #>VAR_I
JSR COPY2_XYA_XREG
; Optimizer rule: MEM 2 X_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
; ignored: CHGCTX #1
LDA #<VAR_DT$[]
LDY #>VAR_DT$[]
STA G_REG
STY G_REG+1
JSR ARRAYACCESS_STRING
LDY A_REG
LDA A_REG+1
STY B_REG
STA B_REG+1
; ignored: CHGCTX #0
JSR LEN
LDA #<VAR_TL
LDY #>VAR_TL
JSR REALFAC
; Optimizer rule: Direct loading of values into FAC/3
LDA #<X_REG
LDY #>X_REG
; Real in (A/Y) to ARG
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
; Optimizer rule: Combine load and add/1
; Optimizer rule: FAC into REG?, REG? into FAC/0
LDX #<VAR_TL
LDY #>VAR_TL
; FAC to (X/Y)
JSR FACMEM
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
; Optimizer rule: NEXT with no variable name simplified/4
LDA A_REG
BNE RBEQ_3
JMP (JUMP_TARGET)
; Optimizer rule: NEXT check simplified/4
RBEQ_3:
;
LINE_45510:
;
LDX #4
dcloop1213_1:
LDA VAR_TL,X
STA VAR_TB,X
DEX
BPL dcloop1213_1
; Optimizer rule: Direct copy of floats into mem/6
JSR GOSUB
JSR LINE_39000
;
LINE_45525:
;
JSR COMPACTMAX
LDA #<CONST_49
LDY #>CONST_49
STA B_REG
STY B_REG+1
LDA VAR_GU$
LDY VAR_GU$+1
STA A_REG
STY A_REG+1
JSR CONCAT
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_UR$
LDY #>VAR_UR$
JSR COPYSTRING
;
LINE_45530:
;
JSR COMPACTMAX
LDA #<CONST_23
LDY #>CONST_23
STA B_REG
STY B_REG+1
LDA VAR_UR$
LDY VAR_UR$+1
STA A_REG
STY A_REG+1
JSR CONCAT
LDA VAR_TF$
LDY VAR_TF$+1
STA B_REG
STY B_REG+1
JSR CONCAT
LDA #<CONST_50
LDY #>CONST_50
STA B_REG
STY B_REG+1
JSR CONCAT
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_UR$
LDY #>VAR_UR$
JSR COPYSTRING
;
LINE_45560:
;
JSR COMPACTMAX
LDA VAR_HB%
JSR CHRINT
; Optimizer rule: CHR with integer constant/2
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
JSR PUSHINT
; ignored: CHGCTX #0
LDA VAR_LB%
JSR CHRINT
; Optimizer rule: CHR with integer constant/2
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
JSR PUSHINT
LDA #<CONST_51
LDY #>CONST_51
STA B_REG
STY B_REG+1
LDA VAR_UR$
LDY VAR_UR$+1
STA A_REG
STY A_REG+1
JSR CONCAT
JSR POPINT2B
; Optimizer rule: Simplified POPINT/1
JSR CONCAT
JSR POPINT2B
; Optimizer rule: Simplified POPINT/1
JSR CONCAT
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_UR$
LDY #>VAR_UR$
JSR COPYSTRING
;
LINE_45580:
;
JMP RETURN
;
LINE_45700:
;
;
LINE_45710:
;
LDA #<CONST_52
LDY #>CONST_52
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_UR$
LDY #>VAR_UR$
JSR COPYSTRING
; Optimizer rule: Simplified loading of Strings/5
JMP RETURN
;
LINE_45800:
;
;
LINE_45810:
;
LDA VAR_GU$
LDY VAR_GU$+1
STA B_REG
STY B_REG+1
JSR LEN
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY TMP2_ZP
LDA #0
JSR ICMP
; Optimized code for LEN(1)
;
;
;
;
;
;
NEQ_NEQ24:
NEQ_SKIP24:
COMP_SKP34:
BEQ LINE_SKIP101
LINE_NSKIP101:
; Optimizer rule: Simplified not equal comparison/6
;
JMP LINE_45850
;
LINE_SKIP101:
;
;
LINE_45820:
;
LDA #147
JSR SINGLECHROUTMAX
; Optimizer rule: Memory saving single char out(1)/2
; Optimizer rule: Single character output/2
LDA #<CONST_53
LDY #>CONST_53
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JSR GOSUB
JSR LINE_45700
;
LINE_45830:
;
JSR GOSUB
JSR LINE_46500
JSR GOSUB
JSR LINE_41500
JSR GOSUB
JSR LINE_42000
;
LINE_45840:
;
LDA VAR_MG$
LDY VAR_MG$+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_GU$
LDY #>VAR_GU$
JSR COPYSTRING
; Optimizer rule: Simplified loading of Strings/5
;
LINE_45850:
;
JSR LINEBREAK
LDA #<CONST_54
LDY #>CONST_54
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
LDA VAR_GU$
LDY VAR_GU$+1
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JMP RETURN
;
LINE_46000:
;
;
LINE_46010:
;
LDA #<CONST_44R
LDY #>CONST_44R
JSR REALFAC
LDA #<VAR_BU
LDY #>VAR_BU
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
; Optimizer rule: Combine load and add/1
; Optimizer rule: Highly simplified loading for calculations/7
; Optimizer rule: FAC into REG?, REG? into FAC/0
; Optimizer rule: FAC into REG?, REG? into FAC/0
; FAC to integer in Y/A
JSR FACWORD
STY MOVBSELF22+1
STA MOVBSELF22+2
MOVBSELF22:
LDA $FFFF
CMP #48
BCC PEEKLT0
BEQ PEEKEQ0
LDA #$FF
JMP PEEKDONE0
PEEKLT0:
LDA #$01
JMP PEEKDONE0
PEEKEQ0:
LDA #0
PEEKDONE0:
; Optimized comparison for PEEK
;
;
BEQ EQ_EQ25
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP EQ_SKIP25
EQ_EQ25:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
EQ_SKIP25:
; Real in (A/Y) to FAC
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA #<CONST_37R
LDY #>CONST_37R
JSR REALFAC
LDA #<VAR_BU
LDY #>VAR_BU
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
; Optimizer rule: Combine load and add/1
; Optimizer rule: Highly simplified loading for calculations/7
; Optimizer rule: FAC into REG?, REG? into FAC/0
; Optimizer rule: FAC into REG?, REG? into FAC/0
; FAC to integer in Y/A
JSR FACWORD
STY MOVBSELF23+1
STA MOVBSELF23+2
MOVBSELF23:
LDA $FFFF
CMP #33
BCC PEEKLT1
BEQ PEEKEQ1
LDA #$FF
JMP PEEKDONE1
PEEKLT1:
LDA #$01
JMP PEEKDONE1
PEEKEQ1:
LDA #0
PEEKDONE1:
; Optimized comparison for PEEK
;
;
BEQ EQ_EQ26
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP EQ_SKIP26
EQ_EQ26:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
EQ_SKIP26:
; Real in (A/Y) to FAC
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA 169
CMP #2
BCC PEEKLT2
BEQ PEEKEQ2
LDA #$FF
JMP PEEKDONE2
PEEKLT2:
LDA #$01
JMP PEEKDONE2
PEEKEQ2:
LDA #0
PEEKDONE2:
; Optimized comparison for PEEK
;
;
BEQ EQ_EQ27
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP EQ_SKIP27
EQ_EQ27:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
EQ_SKIP27:
; Real in (A/Y) to FAC
JSR REALFAC
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
JSR POPREAL2X
; Optimizer rule: POPREAL and load X/1
JSR FASTAND
; Optimizer rule: POP, REG0, VAR0 -> direct calc/5
; Optimizer rule: Faster logic AND/1
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
JSR POPREAL2X
; Optimizer rule: POPREAL and load X/1
JSR FASTAND
; Optimizer rule: POP, REG0, VAR0 -> direct calc/5
; Optimizer rule: Faster logic AND/1
; Optimizer rule: FAC into REG?, REG? into FAC/0
; FAC to integer in Y/A
JSR FACINT
STY VAR_LE%
STA VAR_LE%+1
;
LINE_46020:
;
LDY VAR_LE%
LDA VAR_LE%+1
; integer in Y/A to FAC
JSR INTFAC
JSR FACYREG
; Optimizer rule: FAC 2 Y_REG(2)/1
LDA Y_REG
COMP_SKP35:
BNE LINE_NSKIP102
; Optimizer rule: CMP (REG) != 0(2)/3
JMP LINE_SKIP102
;
LINE_NSKIP102:
;
LDY 171
LDA #0
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_LV%
STA VAR_LV%+1
LDA #<VAR_UI
LDY #>VAR_UI
JSR COPY2_XYA_YREG
; Optimizer rule: MEM 2 Y_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
LDA #<Y_REG
LDY #>Y_REG
STY TMP3_ZP+1
LDX #<X_REG
LDY #>X_REG
JSR COPY2_XYA
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Improved copy from REG0 to REG1/7
JSR SYSTEMCALLDYN
LDA #<VAR_UR
LDY #>VAR_UR
JSR COPY2_XYA_YREG
; Optimizer rule: MEM 2 Y_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
LDA #<Y_REG
LDY #>Y_REG
STY TMP3_ZP+1
LDX #<X_REG
LDY #>X_REG
JSR COPY2_XYA
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Improved copy from REG0 to REG1/7
JSR SYSTEMCALLDYN
;
LINE_SKIP102:
;
;
LINE_46030:
;
JMP RETURN
;
LINE_46500:
;
;
LINE_46510:
;
LDY #16
STY 2023
; Optimizer rule: Simple POKE/2
LDA VAR_UR$
LDY VAR_UR$+1
STA B_REG
STY B_REG+1
; ignored: CHGCTX #0
JSR LEN
JSR XREGFAC
; Optimizer rule: X_REG 2 FAC(1)/1
LDX #<VAR_LM
LDY #>VAR_LM
; FAC to (X/Y)
JSR FACMEM
LDA #<CONST_7R
LDY #>CONST_7R
JSR REALFAC
LDA #<VAR_LM
LDY #>VAR_LM
JSR FASTFSUBMEM
; Optimizer rule: Fast FSUB (MEM)/1
; Optimizer rule: Combine load and sub/1
; Optimizer rule: Highly simplified loading for calculations/7
; Optimizer rule: FAC into REG?, REG? into FAC/0
LDX #<VAR_LS
LDY #>VAR_LS
; FAC to (X/Y)
JSR FACMEM
LDX #4
dcloop1467_1:
LDA CONST_5R,X
STA VAR_T,X
DEX
BPL dcloop1467_1
; Optimizer rule: Direct copy of floats into mem/6
LDA #<VAR_LM
LDY #>VAR_LM
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA #<CONST_5R
LDY #>CONST_5R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA #<VAR_T
LDY #>VAR_T
STA A_REG
STY A_REG+1
LDA #<FORLOOP4
STA JUMP_TARGET
LDA #>FORLOOP4
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP4:
;
LINE_46520:
;
LDA #<CONST_57R
LDY #>CONST_57R
JSR REALFAC
LDA #<VAR_BU
LDY #>VAR_BU
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
; Optimizer rule: Combine load and add/1
; Optimizer rule: Highly simplified loading for calculations/7
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(1)/1
; Optimizer rule: FAC into REG?, REG? into FAC (2)/3
LDX #<VAR_B3
LDY #>VAR_B3
; FAC to (X/Y)
JSR FACMEM
JSR COMPACTMAX
LDA #<VAR_T
LDY #>VAR_T
JSR COPY2_XYA_CREG
; Optimizer rule: Direct copy from MEM to C/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
LDA VAR_UR$
LDY VAR_UR$+1
STA B_REG
STY B_REG+1
LDY #1
JSR MIDCONST
; Optimized code for MID
;
;
;
;
;
;
;
LDY A_REG
LDA A_REG+1
STY B_REG
STA B_REG+1
; ignored: CHGCTX #0
JSR ASC
LDA #0
LDY TMP2_ZP
STY VAR_DD%
STA VAR_DD%+1
; Optimizer rule: ASC to integer variable/5
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_DC%
LDA VAR_DC%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
ROL
BCS GT_GT28
LDA #0
JMP GT_SKIP28
GT_GT28:
LDA #$1
GT_SKIP28:
COMP_SKP36:
BNE LINE_NSKIP103
; Optimizer rule: Simplified CMP redux/7
JMP LINE_SKIP103
;
LINE_NSKIP103:
;
LDA #<VAR_LS
LDY #>VAR_LS
JSR REALFAC
LDA #<VAR_T
LDY #>VAR_T
JSR CMPFAC
; Optimizer rule: Highly simplified loading for CMP/6
BEQ GTEQ_GTEQ29
BCS GTEQ_GTEQ29
LDA #0
JMP GTEQ_SKIP29
GTEQ_GTEQ29:
LDA #$1
GTEQ_SKIP29:
COMP_SKP37:
BEQ LINE_SKIP104
; Simplified conditional branch
;
LINE_NSKIP104:
;
JMP LINE_46560
;
LINE_SKIP104:
;
;
LINE_SKIP103:
;
;
LINE_46540:
;
JSR GOSUB
JSR LINE_47300
;
LINE_46560:
;
LDA #<VAR_T
LDY #>VAR_T
JSR REALFAC
LDA #<VAR_B3
LDY #>VAR_B3
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
; Optimizer rule: Combine load and add/1
; Optimizer rule: Highly simplified loading for calculations/7
; Optimizer rule: FAC into REG?, REG? into FAC/0

; Optimizer rule: Remove PUSH/POP/1
JSR FACWORD
STY MOVBSELF27+1
STA MOVBSELF27+2
LDY VAR_DD%
MOVBSELF27:
STY $FFFF
; Optimized code for POKE of Integer values
;
;
;
;
;
;
;
;
;
;
LINE_46570:
;
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
; Optimizer rule: NEXT with no variable name simplified/4
LDA A_REG
BNE RBEQ_4
JMP (JUMP_TARGET)
; Optimizer rule: NEXT check simplified/4
RBEQ_4:
JSR GOSUB
JSR LINE_47000
;
LINE_46575:
;
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_DC%
LDA VAR_DC%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
EQ_EQ30:
EQ_SKIP30:
COMP_SKP39:
BNE LINE_SKIP105
LINE_NSKIP105:
; Optimizer rule: Simplified equal comparison/6
;
LDY #32
LDA #0
; Optimized code for CONST into Y/A
;
;
;
;
;
;
;
;
;
STY 2023
JMP RETURN
;
LINE_SKIP105:
;
;
LINE_46580:
;
LDA #<CONST_19R
LDY #>CONST_19R
JSR REALFAC
LDA #<VAR_BU
LDY #>VAR_BU
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
; Optimizer rule: Combine load and add/1
; Optimizer rule: Highly simplified loading for calculations/7
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
LDA #<VAR_T
LDY #>VAR_T
JSR REALFAC
; Optimizer rule: Direct loading of values into FAC/3
LDA #<X_REG
LDY #>X_REG
; Real in (A/Y) to ARG
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
; Optimizer rule: Combine load and add/1
; Optimizer rule: FAC into REG?, REG? into FAC/0
LDX #<VAR_T
LDY #>VAR_T
; FAC to (X/Y)
JSR FACMEM
LDA #0
STA VAR_I
STA VAR_I+1
STA VAR_I+2
STA VAR_I+3
STA VAR_I+4
; Optimizer rule: Simplified setting to 0/6
LDY VAR_DC%
LDA VAR_DC%+1
JSR FIDEX
; Optimizer rule: Fast INTEGER DEC/3
LDA #<X_REG
LDY #>X_REG
; Real in (A/Y) to FAC
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA #<CONST_5R
LDY #>CONST_5R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA #<VAR_I
LDY #>VAR_I
STA A_REG
STY A_REG+1
LDA #<FORLOOP5
STA JUMP_TARGET
LDA #>FORLOOP5
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP5:
LDA #<VAR_I
LDY #>VAR_I
; Real in (A/Y) to FAC
JSR REALFAC
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(1)/1
; ignored: CHGCTX #1
LDA #<VAR_DT$[]
LDY #>VAR_DT$[]
STA G_REG
STY G_REG+1
JSR ARRAYACCESS_STRING
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_DA$
LDY #>VAR_DA$
JSR COPYSTRING
;
LINE_46590:
;
LDX #4
dcloop1594_1:
LDA CONST_5R,X
STA VAR_P,X
DEX
BPL dcloop1594_1
; Optimizer rule: Direct copy of floats into mem/6
LDA VAR_DA$
LDY VAR_DA$+1
STA B_REG
STY B_REG+1
; ignored: CHGCTX #0
JSR LEN
LDA #<X_REG
LDY #>X_REG
; Real in (A/Y) to FAC
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA #<CONST_5R
LDY #>CONST_5R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA #<VAR_P
LDY #>VAR_P
STA A_REG
STY A_REG+1
LDA #<FORLOOP6
STA JUMP_TARGET
LDA #>FORLOOP6
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP6:
JSR COMPACTMAX
LDA #<VAR_P
LDY #>VAR_P
JSR COPY2_XYA_CREG
; Optimizer rule: Direct copy from MEM to C/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
LDA VAR_DA$
LDY VAR_DA$+1
STA B_REG
STY B_REG+1
LDY #1
JSR MIDCONST
; Optimized code for MID
;
;
;
;
;
;
;
LDY A_REG
LDA A_REG+1
STY B_REG
STA B_REG+1
; ignored: CHGCTX #0
JSR ASC
LDA #0
LDY TMP2_ZP
STY VAR_DD%
STA VAR_DD%+1
; Optimizer rule: ASC to integer variable/5
;
LINE_46600:
;
LDA #<VAR_P
LDY #>VAR_P
JSR REALFAC
LDA #<VAR_T
LDY #>VAR_T
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
; Optimizer rule: Combine load and add/1
; Optimizer rule: Highly simplified loading for calculations/7
; Optimizer rule: FAC into REG?, REG? into FAC/0

; Optimizer rule: Remove PUSH/POP/1
JSR FACWORD
STY MOVBSELF29+1
STA MOVBSELF29+2
LDY VAR_DD%
MOVBSELF29:
STY $FFFF
; Optimized code for POKE of Integer values
;
;
;
;
;
;
;
;
;
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
; Optimizer rule: NEXT with no variable name simplified/4
LDA A_REG
BNE RBEQ_5
JMP (JUMP_TARGET)
; Optimizer rule: NEXT check simplified/4
RBEQ_5:
;
LINE_46610:
;
LDA #<VAR_P
LDY #>VAR_P
JSR REALFAC
LDA #<VAR_T
LDY #>VAR_T
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
; Optimizer rule: Combine load and add/1
; Optimizer rule: Highly simplified loading for calculations/7
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
JSR ONETOFAC
; Optimizer rule: Faster setting to 1/1
; Optimizer rule: Avoid INTEGER->REAL conversion/3
; Optimizer rule: FAC into REG?, REG? into FAC/0
LDA #<X_REG
LDY #>X_REG
; Real in (A/Y) to ARG
JSR FASTFSUBMEM
; Optimizer rule: Fast FSUB (MEM)/1
; Optimizer rule: Combine load and sub/1
; Optimizer rule: FAC into REG?, REG? into FAC/0
LDX #<VAR_T
LDY #>VAR_T
; FAC to (X/Y)
JSR FACMEM
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
; Optimizer rule: NEXT with no variable name simplified/4
LDA A_REG
BNE RBEQ_6
JMP (JUMP_TARGET)
; Optimizer rule: NEXT check simplified/4
RBEQ_6:
;
LINE_46620:
;
LDY #32
STY 2023
; Optimizer rule: Simple POKE/2
JMP RETURN
;
LINE_47000:
;
;
LINE_47010:
;
LDA #<CONST_7R
LDY #>CONST_7R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
; ignored: CHGCTX #1
LDA VAR_UR$
LDY VAR_UR$+1
STA B_REG
STY B_REG+1
; ignored: CHGCTX #0
JSR LEN
JSR POPREAL2X
; Optimizer rule: POPREAL and load X/1
JSR FASTFADDARG
; Optimizer rule: Fast FADD (ARG)/1
; Optimizer rule: POP, REG0, VAR0 -> direct calc/5
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
LDA #<VAR_TL
LDY #>VAR_TL
JSR REALFAC
; Optimizer rule: Direct loading of values into FAC/3
LDA #<X_REG
LDY #>X_REG
; Real in (A/Y) to ARG
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
; Optimizer rule: Combine load and add/1
; Optimizer rule: FAC into REG?, REG? into FAC/0
LDX #<VAR_D
LDY #>VAR_D
; FAC to (X/Y)
JSR FACMEM
JSR ONETOFAC
; Optimizer rule: Faster setting to 1/1
LDA #<VAR_BU
LDY #>VAR_BU
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
; Optimizer rule: Combine load and add/1
; Optimizer rule: Highly simplified loading for calculations/7
; Optimizer rule: FAC into REG?, REG? into FAC/0
LDX #<VAR_S
LDY #>VAR_S
; FAC to (X/Y)
JSR FACMEM
JSR GOSUB
JSR LINE_47100
;
LINE_47020:
;
JMP RETURN
;
LINE_47100:
;
;
LINE_47105:
;
LDX #4
dcloop1721_1:
LDA VAR_D,X
STA VAR_TB,X
DEX
BPL dcloop1721_1
; Optimizer rule: Direct copy of floats into mem/6
JSR GOSUB
JSR LINE_39000
;
LINE_47110:
;
LDA #<VAR_S
LDY #>VAR_S
JSR REALFAC
; Optimizer rule: Remove FAC/PUSH/POP/1
JSR FACWORD
STY MOVBSELF31+1
STA MOVBSELF31+2
LDY VAR_LB%
MOVBSELF31:
STY $FFFF
; Optimized code for POKE of Integer values
;
;
;
;
;
;
;
;
;
JSR ONETOFAC
; Optimizer rule: Faster setting to 1/1
LDA #<VAR_S
LDY #>VAR_S
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
; Optimizer rule: Combine load and add/1
; Optimizer rule: Highly simplified loading for calculations/7
; Optimizer rule: FAC into REG?, REG? into FAC/0

; Optimizer rule: Remove PUSH/POP/1
JSR FACWORD
STY MOVBSELF32+1
STA MOVBSELF32+2
LDY VAR_HB%
MOVBSELF32:
STY $FFFF
; Optimized code for POKE of Integer values
;
;
;
;
;
;
;
;
;
JMP RETURN
;
LINE_47300:
;
;
LINE_47310:
;
LDA #$41
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_DD%
LDA VAR_DD%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
BEQ GTEQ_GTEQ31
BCS GTEQ_GTEQ31
LDA #0
JMP GTEQ_SKIP31
GTEQ_GTEQ31:
LDA #$1
GTEQ_SKIP31:
COMP_SKP42:
BNE LINE_NSKIP106
; Optimizer rule: Simplified CMP redux/7
JMP LINE_SKIP106
;
LINE_NSKIP106:
;
LDA #$5a
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_DD%
LDA VAR_DD%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
BCC LTEQ_LTEQ32
BEQ LTEQ_LTEQ32
LDA #0
JMP LTEQ_SKIP32
LTEQ_LTEQ32:
LDA #$1
LTEQ_SKIP32:
COMP_SKP43:
BNE LINE_NSKIP107
; Optimizer rule: Simplified CMP redux/7
JMP LINE_SKIP107
;
LINE_NSKIP107:
;
LDA #<CONST_35R
LDY #>CONST_35R
JSR COPY2_XYA_YREG
; Optimizer rule: MEM 2 Y_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
LDY VAR_DD%
LDA VAR_DD%+1
; integer in Y/A to FAC
JSR INTFAC
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
JSR YREGFAC
; Optimizer rule: Y_REG 2 FAC(1)/1
LDA #<X_REG
LDY #>X_REG
; Real in (A/Y) to ARG
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
; Optimizer rule: Combine load and add/1
; Optimizer rule: FAC into REG?, REG? into FAC/0
; FAC to integer in Y/A
JSR FACINT
STY VAR_DD%
STA VAR_DD%+1
JMP RETURN
;
LINE_SKIP107:
;
;
LINE_SKIP106:
;
;
LINE_47320:
;
LDA #$61
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_DD%
LDA VAR_DD%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
BEQ GTEQ_GTEQ33
BCS GTEQ_GTEQ33
LDA #0
JMP GTEQ_SKIP33
GTEQ_GTEQ33:
LDA #$1
GTEQ_SKIP33:
COMP_SKP44:
BNE LINE_NSKIP108
; Optimizer rule: Simplified CMP redux/7
JMP LINE_SKIP108
;
LINE_NSKIP108:
;
LDA #$7a
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_DD%
LDA VAR_DD%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
BCC LTEQ_LTEQ34
BEQ LTEQ_LTEQ34
LDA #0
JMP LTEQ_SKIP34
LTEQ_LTEQ34:
LDA #$1
LTEQ_SKIP34:
COMP_SKP45:
BNE LINE_NSKIP109
; Optimizer rule: Simplified CMP redux/7
JMP LINE_SKIP109
;
LINE_NSKIP109:
;
LDA #<CONST_35R
LDY #>CONST_35R
JSR COPY2_XYA_YREG
; Optimizer rule: MEM 2 Y_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
LDY VAR_DD%
LDA VAR_DD%+1
; integer in Y/A to FAC
JSR INTFAC
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
JSR YREGFAC
; Optimizer rule: Y_REG 2 FAC(1)/1
LDA #<X_REG
LDY #>X_REG
; Real in (A/Y) to ARG
JSR FASTFSUBMEM
; Optimizer rule: Fast FSUB (MEM)/1
; Optimizer rule: Combine load and sub/1
; Optimizer rule: FAC into REG?, REG? into FAC/0
; FAC to integer in Y/A
JSR FACINT
STY VAR_DD%
STA VAR_DD%+1
;
LINE_SKIP109:
;
;
LINE_SKIP108:
;
;
LINE_47330:
;
JMP RETURN
;
LINE_48000:
;
;
LINE_48010:
;
JSR COMPACTMAX
LDA #<CONST_2R
LDY #>CONST_2R
JSR COPY2_XYA_CREG
; Optimizer rule: Direct copy from MEM to C/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
; ignored: CHGCTX #1
LDA VAR_OF$
LDY VAR_OF$+1
STA B_REG
STY B_REG+1
JSR LEFT
LDY A_REG
LDA A_REG+1
STY B_REG
STA B_REG+1
LDA #<CONST_61
LDY #>CONST_61
STA A_REG
STY A_REG+1
JSR CONCAT
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_NF$
LDY #>VAR_NF$
JSR COPYSTRING
;
LINE_48015:
;
LDA #<CONST_62R
LDY #>CONST_62R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDY VAR_DN%
LDA VAR_DN%+1
; integer in Y/A to FAC
JSR INTFAC
; Optimizer rule: FAC into REG?, REG? into FAC/0
JSR PUSHREAL
LDA #<CONST_62R
LDY #>CONST_62R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
JSR COMPACTMAX
LDA VAR_NF$
LDY VAR_NF$+1
STA B_REG
STY B_REG+1
LDA #<CONST_63
LDY #>CONST_63
STA A_REG
STY A_REG+1
JSR CONCAT
LDY A_REG
LDA A_REG+1
STY G_REG
STA G_REG+1
JSR POPREAL
LDX #<D_REG
LDY #>D_REG
; FAC to (X/Y)
JSR FACMEM
JSR POPREAL
LDX #<C_REG
LDY #>C_REG
; FAC to (X/Y)
JSR FACMEM
JSR POPREALXREG
; Optimizer rule: POP and XREG combined/1
; Optimizer rule: FAC 2 X_REG(2)/1
LDA #<CONST_7R
LDY #>CONST_7R
JSR COPY2_XYA_YREG
; Optimizer rule: MEM 2 Y_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
JSR OPEN
LDA #<CONST_62R
LDY #>CONST_62R
JSR COPY2_XYA_XREG
; Optimizer rule: MEM 2 X_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
JSR CLOSE
;
LINE_48020:
;
LDA #<CONST_19R
LDY #>CONST_19R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDY VAR_DN%
LDA VAR_DN%+1
; integer in Y/A to FAC
JSR INTFAC
; Optimizer rule: FAC into REG?, REG? into FAC/0
JSR PUSHREAL
LDA #<CONST_19R
LDY #>CONST_19R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
JSR COMPACTMAX
LDA #<CONST_64
LDY #>CONST_64
STA B_REG
STY B_REG+1
LDA VAR_NF$
LDY VAR_NF$+1
STA A_REG
STY A_REG+1
JSR CONCAT
LDY A_REG
LDA A_REG+1
STY G_REG
STA G_REG+1
JSR POPREAL
LDX #<D_REG
LDY #>D_REG
; FAC to (X/Y)
JSR FACMEM
JSR POPREAL
LDX #<C_REG
LDY #>C_REG
; FAC to (X/Y)
JSR FACMEM
JSR POPREALXREG
; Optimizer rule: POP and XREG combined/1
; Optimizer rule: FAC 2 X_REG(2)/1
LDA #<CONST_7R
LDY #>CONST_7R
JSR COPY2_XYA_YREG
; Optimizer rule: MEM 2 Y_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
JSR OPEN
;
LINE_48030:
;
JMP RETURN
;
LINE_48500:
;
;
LINE_48510:
;
LDA #<CONST_19R
LDY #>CONST_19R
JSR COPY2_XYA_XREG
; Optimizer rule: MEM 2 X_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
JSR CLOSE
JMP RETURN
;
LINE_49000:
;
;
LINE_49010:
;
LDY #4
STY 2023
; Optimizer rule: Simple POKE/2
JSR LOCKCHANNEL
LDA #<CONST_19R
LDY #>CONST_19R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA VAR_DA$
LDY VAR_DA$+1
STA A_REG
STY A_REG+1
JSR POPREAL
LDX #<C_REG
LDY #>C_REG
; FAC to (X/Y)
JSR FACMEM
JSR STROUTCHANNEL
JSR UNLOCKCHANNEL
JMP RETURN
;
LINE_50000:
;
;
LINE_50010:
;
LDY STATUS
; Byte in Y to FAC
JSR BYTEFAC
LDX #<VAR_ST
LDY #>VAR_ST
JSR FACMEM
LDX #4
dcloop1848_1:
LDA VAR_ST,X
STA VAR_SO,X
DEX
BPL dcloop1848_1
; Optimizer rule: Direct copy of floats into mem/6
LDX #4
dceloop3050_1:
LDA CONST_8R,X
CMP VAR_SO,X
BNE LINE_SKIP110
DEX
BPL dceloop3050_1
; Optimizer rule: Direct compare(=) of floats/7
LINE_NSKIP110:
; Optimizer rule: Simplified equal comparison/6
;
LDY #1
LDA #0
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_DO%
STA VAR_DO%+1
JMP RETURN
;
LINE_SKIP110:
;
;
LINE_50020:
;
LDA VAR_SO
BNE NEQ_NEQ36
LDA #0
; Optimizer rule: CMP (MEM) != 0/3
JMP NEQ_SKIP36
NEQ_NEQ36:
LDA #$1
NEQ_SKIP36:
COMP_SKP47:
BEQ LINE_SKIP111
; Simplified conditional branch
;
LINE_NSKIP111:
;
LDY #1
LDA #0
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_ER%
STA VAR_ER%+1
JMP RETURN
;
LINE_SKIP111:
;
;
LINE_50030:
;
JSR GETSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_BY$
LDY #>VAR_BY$
JSR COPYSTRING
LDA VAR_BY$
LDY VAR_BY$+1
STA B_REG
STY B_REG+1
JSR LEN
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY TMP2_ZP
LDA #0
JSR ICMP
; Optimized code for LEN(1)
;
;
;
;
;
;
EQ_EQ37:
EQ_SKIP37:
COMP_SKP48:
BNE LINE_SKIP112
LINE_NSKIP112:
; Optimizer rule: Simplified equal comparison/6
;
LDA VAR_LL$
LDY VAR_LL$+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_BY$
LDY #>VAR_BY$
JSR COPYSTRING
; Optimizer rule: Simplified loading of Strings/5
;
LINE_SKIP112:
;
;
LINE_50040:
;
JMP RETURN
;
LINE_51000:
;
;
LINE_51005:
;
LDA #<CONST_65
LDY #>CONST_65
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
LDA VAR_OF$
LDY VAR_OF$+1
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
LDA #<CONST_66
LDY #>CONST_66
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
;
LINE_51010:
;
LDA #<CONST_19R
LDY #>CONST_19R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDY VAR_DN%
LDA VAR_DN%+1
; integer in Y/A to FAC
JSR INTFAC
; Optimizer rule: FAC into REG?, REG? into FAC/0
JSR PUSHREAL
LDA #<CONST_19R
LDY #>CONST_19R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA VAR_OF$
LDY VAR_OF$+1
STA B_REG
STY B_REG+1
LDY B_REG
LDA B_REG+1
STY G_REG
STA G_REG+1
JSR POPREAL
LDX #<D_REG
LDY #>D_REG
; FAC to (X/Y)
JSR FACMEM
JSR POPREAL
LDX #<C_REG
LDY #>C_REG
; FAC to (X/Y)
JSR FACMEM
JSR POPREALXREG
; Optimizer rule: POP and XREG combined/1
; Optimizer rule: FAC 2 X_REG(2)/1
LDA #<CONST_7R
LDY #>CONST_7R
JSR COPY2_XYA_YREG
; Optimizer rule: MEM 2 Y_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
JSR OPEN
LDA #<CONST_62R
LDY #>CONST_62R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDY VAR_DN%
LDA VAR_DN%+1
; integer in Y/A to FAC
JSR INTFAC
; Optimizer rule: FAC into REG?, REG? into FAC/0
JSR PUSHREAL
LDA #<CONST_62R
LDY #>CONST_62R
STY TMP3_ZP+1
LDX #<D_REG
LDY #>D_REG
JSR COPY2_XYA
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
JSR POPREAL
LDX #<C_REG
LDY #>C_REG
; FAC to (X/Y)
JSR FACMEM
JSR POPREALXREG
; Optimizer rule: POP and XREG combined/1
; Optimizer rule: FAC 2 X_REG(2)/1
LDA #<CONST_57R
LDY #>CONST_57R
JSR COPY2_XYA_YREG
; Optimizer rule: MEM 2 Y_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
JSR OPEN
LDA #<CONST_62R
LDY #>CONST_62R
JSR REALFAC
; Optimizer rule: Avoid INTEGER->REAL conversion/3
JSR FACYREG
; Optimizer rule: FAC 2 Y_REG(1)/1
LDA #<Y_REG
LDY #>Y_REG
; Real in (A/Y) to FAC
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
JSR CLEARQUEUE
JSR COMPACTMAX
JSR POPREAL
LDX #<C_REG
LDY #>C_REG
; FAC to (X/Y)
JSR FACMEM
JSR INPUTNUMBERCHANNEL
JSR YREGFAC
; Optimizer rule: Y_REG 2 FAC(1)/1
LDX #<VAR_EC
LDY #>VAR_EC
; FAC to (X/Y)
JSR FACMEM
JSR INPUTSTRCHANNEL
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_EM$
LDY #>VAR_EM$
JSR COPYSTRING
LDA #<CONST_62R
LDY #>CONST_62R
JSR COPY2_XYA_XREG
; Optimizer rule: MEM 2 X_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
JSR CLOSE
LDA #<CONST_19R
LDY #>CONST_19R
JSR COPY2_XYA_XREG
; Optimizer rule: MEM 2 X_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
JSR CLOSE
;
LINE_51020:
;
LDA VAR_EC
BNE NEQ_NEQ38
LDA #0
; Optimizer rule: CMP (MEM) != 0/3
JMP NEQ_SKIP38
NEQ_NEQ38:
LDA #$1
NEQ_SKIP38:
COMP_SKP49:
BNE LINE_NSKIP113
; Optimizer rule: Simplified CMP redux/7
JMP LINE_SKIP113
;
LINE_NSKIP113:
;
LDA VAR_EM$
LDY VAR_EM$+1
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
LDY #1
LDA #0
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_ER%
STA VAR_ER%+1
LDY #0
TYA
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_DO%
STA VAR_DO%+1
JMP RETURN
;
LINE_SKIP113:
;
;
LINE_51040:
;
LDA #<CONST_19R
LDY #>CONST_19R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDY VAR_DN%
LDA VAR_DN%+1
; integer in Y/A to FAC
JSR INTFAC
; Optimizer rule: FAC into REG?, REG? into FAC/0
JSR PUSHREAL
LDA #<CONST_19R
LDY #>CONST_19R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA VAR_OF$
LDY VAR_OF$+1
STA B_REG
STY B_REG+1
LDY B_REG
LDA B_REG+1
STY G_REG
STA G_REG+1
JSR POPREAL
LDX #<D_REG
LDY #>D_REG
; FAC to (X/Y)
JSR FACMEM
JSR POPREAL
LDX #<C_REG
LDY #>C_REG
; FAC to (X/Y)
JSR FACMEM
JSR POPREALXREG
; Optimizer rule: POP and XREG combined/1
; Optimizer rule: FAC 2 X_REG(2)/1
LDA #<CONST_7R
LDY #>CONST_7R
JSR COPY2_XYA_YREG
; Optimizer rule: MEM 2 Y_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
JSR OPEN
LDY #2
STY 781
; Optimizer rule: Simple POKE/2
LDA #<65478
STA TMP_ZP
LDA #>65478
STA TMP_ZP+1
JSR SYSTEMCALL
;
LINE_51050:
;
LDY #0
TYA
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_DO%
STA VAR_DO%+1
LDY #0
TYA
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_ER%
STA VAR_ER%+1
JMP RETURN
;
LINE_51500:
;
;
LINE_51510:
;
LDA #<65484
STA TMP_ZP
LDA #>65484
STA TMP_ZP+1
JSR SYSTEMCALL
LDA #<CONST_19R
LDY #>CONST_19R
JSR COPY2_XYA_XREG
; Optimizer rule: MEM 2 X_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
JSR CLOSE
;
LINE_51520:
;
JMP RETURN
;
LINE_52000:
;
;
LINE_52010:
;
JSR LINEBREAK
LDA #<CONST_67
LDY #>CONST_67
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
LDA VAR_NF$
LDY VAR_NF$+1
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
;
LINE_52020:
;
LDA #<CONST_68
LDY #>CONST_68
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JSR LINEBREAK
;
LINE_52030:
;
LDA #<CONST_69
LDY #>CONST_69
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
LDA #34
JSR SINGLECHROUTMAX
; Optimizer rule: Memory saving single char out(1)/2
; Optimizer rule: Single character output/2
LDA VAR_NF$
LDY VAR_NF$+1
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
LDA #34
JSR SINGLECHROUTMAX
; Optimizer rule: Memory saving single char out(1)/2
; Optimizer rule: Single character output/2
LDA #<CONST_71
LDY #>CONST_71
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
LDY VAR_DN%
LDA VAR_DN%+1
; integer in Y/A to FAC
JSR INTFAC
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
JSR INTOUT
JSR CRSRRIGHT
LDA #<CONST_72
LDY #>CONST_72
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
;
LINE_52040:
;
LDY #145
STY 631
; Optimizer rule: Simple POKE/2
LDY #145
STY 632
; Optimizer rule: Simple POKE/2
LDY #2
STY 198
; Optimizer rule: Simple POKE/2
JMP RETURN
;
LINE_55000:
;
;
LINE_55005:
;
LDA #147
JSR SINGLECHROUTMAX
; Optimizer rule: Memory saving single char out(1)/2
; Optimizer rule: Single character output/2
LDA #<CONST_74
LDY #>CONST_74
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
;
LINE_55010:
;
LDA #<VAR_UI
LDY #>VAR_UI
JSR COPY2_XYA_XREG
; Optimizer rule: MEM 2 X_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
JSR SYSTEMCALLDYN
;
LINE_55020:
;
LDA #<VAR_UC
LDY #>VAR_UC
JSR COPY2_XYA_XREG
; Optimizer rule: MEM 2 X_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
JSR SYSTEMCALLDYN
;
LINE_55030:
;
JSR GOSUB
JSR LINE_56000
;
LINE_55035:
;
LDA #<VAR_BU
LDY #>VAR_BU
JSR REALFAC
; Optimizer rule: Direct loading of values into FAC/3
; FAC to integer in Y/A
JSR FACWORD
STY MOVBSELF38+1
STA MOVBSELF38+2
LDA #$57
MOVBSELF38:
STA $FFFF
LDA #<CONST_57R
LDY #>CONST_57R
JSR REALFAC
LDA #<VAR_BU
LDY #>VAR_BU
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
; Optimizer rule: Combine load and add/1
; Optimizer rule: Highly simplified loading for calculations/7
; Optimizer rule: FAC into REG?, REG? into FAC/0
; Optimizer rule: FAC into REG?, REG? into FAC/0
; FAC to integer in Y/A
JSR FACWORD
STY MOVBSELF39+1
STA MOVBSELF39+2
LDA #$F
MOVBSELF39:
STA $FFFF
;
LINE_55040:
;
LDA #<CONST_27
LDY #>CONST_27
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
;
LINE_55050:
;
JMP RETURN
;
LINE_56000:
;
;
LINE_56010:
;
LDY 171
LDA #0
; integer in Y/A to FAC
JSR INTFAC
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
LDA X_REG
BNE NEQ_NEQ39
LDA #0
; Optimizer rule: CMP (REG) != 0/3
JMP NEQ_SKIP39
NEQ_NEQ39:
LDA #$1
NEQ_SKIP39:
COMP_SKP50:
BEQ LINE_SKIP114
; Simplified conditional branch
;
LINE_NSKIP114:
;
JMP RETURN
;
LINE_SKIP114:
;
;
LINE_56030:
;
LDY #32
STY 2023
; Optimizer rule: Simple POKE/2
JSR LINEBREAK
LDA #<CONST_76
LDY #>CONST_76
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JSR LINEBREAK
;
LINE_56040:
;
LDA #<CONST_77
LDY #>CONST_77
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
;
LINE_56050:
;
LDA #<CONST_78
LDY #>CONST_78
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
;
LINE_56060:
;
JMP LINE_60000
;
LINE_56200:
;
;
LINE_56230:
;
JSR GOSUB
JSR LINE_51500
LDY #32
STY 2023
; Optimizer rule: Simple POKE/2
JSR LINEBREAK
LDA #<CONST_79
LDY #>CONST_79
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
LDY VAR_LV%
LDA VAR_LV%+1
; integer in Y/A to FAC
JSR INTFAC
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
JSR INTOUT
JSR CRSRRIGHT
LDA #<CONST_80
LDY #>CONST_80
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
;
LINE_56260:
;
JMP LINE_60000
;
LINE_56500:
;
;
LINE_56505:
;
LDY 186
LDA #0
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_DN%
STA VAR_DN%+1
;
LINE_56510:
;
LDA 49154
CMP #192
BCC PEEKLT3
BEQ PEEKEQ3
LDA #$FF
JMP PEEKDONE3
PEEKLT3:
LDA #$01
JMP PEEKDONE3
PEEKEQ3:
LDA #0
PEEKDONE3:
; Optimized comparison for PEEK
;
;
BEQ EQ_EQ40
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP EQ_SKIP40
EQ_EQ40:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
EQ_SKIP40:
; Real in (A/Y) to FAC
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA 49153
CMP #30
BCC PEEKLT4
BEQ PEEKEQ4
LDA #$FF
JMP PEEKDONE4
PEEKLT4:
LDA #$01
JMP PEEKDONE4
PEEKEQ4:
LDA #0
PEEKDONE4:
; Optimized comparison for PEEK
;
;
BEQ EQ_EQ41
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP EQ_SKIP41
EQ_EQ41:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
EQ_SKIP41:
; Real in (A/Y) to FAC
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA 49152
CMP #76
BCC PEEKLT5
BEQ PEEKEQ5
LDA #$FF
JMP PEEKDONE5
PEEKLT5:
LDA #$01
JMP PEEKDONE5
PEEKEQ5:
LDA #0
PEEKDONE5:
; Optimized comparison for PEEK
;
;
BEQ EQ_EQ42
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP EQ_SKIP42
EQ_EQ42:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
EQ_SKIP42:
; Real in (A/Y) to FAC
JSR REALFAC
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
JSR POPREAL2X
; Optimizer rule: POPREAL and load X/1
JSR FASTAND
; Optimizer rule: POP, REG0, VAR0 -> direct calc/5
; Optimizer rule: Faster logic AND/1
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
JSR POPREAL2X
; Optimizer rule: POPREAL and load X/1
JSR FASTAND
; Optimizer rule: POP, REG0, VAR0 -> direct calc/5
; Optimizer rule: Faster logic AND/1
; Optimizer rule: FAC into REG?, REG? into FAC/0
; FAC to integer in Y/A
JSR FACINT
STY VAR_LF%
STA VAR_LF%+1
;
LINE_56520:
;
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_LF%
LDA VAR_LF%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
BEQ EQ_EQ43
LDA #0
JMP EQ_SKIP43
EQ_EQ43:
LDA #$1
EQ_SKIP43:
COMP_SKP51:
BNE LINE_NSKIP115
; Optimizer rule: Simplified CMP redux/7
JMP LINE_SKIP115
;
LINE_NSKIP115:
;
LDA #147
JSR SINGLECHROUTMAX
; Optimizer rule: Memory saving single char out(1)/2
; Optimizer rule: Single character output/2
LDA #<CONST_84
LDY #>CONST_84
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
LDA #<CONST_85
LDY #>CONST_85
STA B_REG
STY B_REG+1
LDA B_REG
LDY B_REG+1
STA TMP_ZP
STY TMP_ZP+1
JSR PUSHINT
LDY VAR_DN%
LDA VAR_DN%+1
; integer in Y/A to FAC
JSR INTFAC
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
LDA #<CONST_5R
LDY #>CONST_5R
JSR COPY2_XYA_YREG
; Optimizer rule: MEM 2 Y_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
JSR POPINT
LDY TMP_ZP
LDA TMP_ZP+1
STY G_REG
STA G_REG+1
JSR LOAD
JMP RESTARTPRG
;
LINE_SKIP115:
;
;
LINE_56530:
;
JMP RETURN
;
LINE_57000:
;
;
LINE_57010:
;
LDA #147
JSR SINGLECHROUTMAX
; Optimizer rule: Memory saving single char out(1)/2
; Optimizer rule: Single character output/2
LDY #32
STY 2023
; Optimizer rule: Simple POKE/2
;
LINE_57012:
;
LDA #<CONST_86
LDY #>CONST_86
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
;
LINE_57015:
;
LDA #<CONST_87
LDY #>CONST_87
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JSR LINEBREAK
;
LINE_57020:
;
LDA #<CONST_88
LDY #>CONST_88
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
LDA VAR_OF$
LDY VAR_OF$+1
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
;
LINE_57025:
;
LDA #<CONST_89
LDY #>CONST_89
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
LDY VAR_DN%
LDA VAR_DN%+1
; integer in Y/A to FAC
JSR INTFAC
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
JSR INTOUT
JSR CHECKCMD
JSR LINEBREAK
;
LINE_57030:
;
LDA #<CONST_90
LDY #>CONST_90
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
;
LINE_57040:
;
LDA #<CONST_91
LDY #>CONST_91
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
;
LINE_57050:
;
LDA #<CONST_92
LDY #>CONST_92
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JSR LINEBREAK
;
LINE_57055:
;
LDA #<CONST_93
LDY #>CONST_93
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
;
LINE_57060:
;
JSR GETSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_A$
LDY #>VAR_A$
JSR COPYSTRING
LDA #<CONST_6
LDY #>CONST_6
STA B_REG
STY B_REG+1
LDA VAR_A$
LDY VAR_A$+1
STA A_REG
STY A_REG+1
; ignored: CHGCTX #0
JSR SEQ
LDA X_REG
COMP_SKP52:
BEQ LINE_SKIP116
; Simplified conditional branch
;
LINE_NSKIP116:
;
JMP LINE_57060
;
LINE_SKIP116:
;
;
LINE_57070:
;
LDA VAR_A$
LDY VAR_A$+1
STA B_REG
STY B_REG+1
; ignored: CHGCTX #0
JSR ASC
LDA #0
LDY TMP2_ZP
STY VAR_A%
STA VAR_A%+1
; Optimizer rule: ASC to integer variable/5
LDA #$85
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_A%
LDA VAR_A%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
EQ_EQ44:
EQ_SKIP44:
COMP_SKP53:
BNE LINE_SKIP117
LINE_NSKIP117:
; Optimizer rule: Simplified equal comparison/6
;
JSR GOSUB
JSR LINE_40000
JMP LINE_57010
;
LINE_SKIP117:
;
;
LINE_57080:
;
LDA #$86
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_A%
LDA VAR_A%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
EQ_EQ45:
EQ_SKIP45:
COMP_SKP54:
BNE LINE_SKIP118
LINE_NSKIP118:
; Optimizer rule: Simplified equal comparison/6
;
JSR GOSUB
JSR LINE_58000
JMP LINE_57010
;
LINE_SKIP118:
;
;
LINE_57090:
;
LDA #$87
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_A%
LDA VAR_A%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
EQ_EQ46:
EQ_SKIP46:
COMP_SKP55:
BNE LINE_SKIP119
LINE_NSKIP119:
; Optimizer rule: Simplified equal comparison/6
;
JSR GOSUB
JSR LINE_57500
JMP LINE_57010
;
LINE_SKIP119:
;
;
LINE_57100:
;
LDA #$88
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_A%
LDA VAR_A%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
EQ_EQ47:
EQ_SKIP47:
COMP_SKP56:
BNE LINE_SKIP120
LINE_NSKIP120:
; Optimizer rule: Simplified equal comparison/6
;
LDA #147
JSR SINGLECHROUTMAX
; Optimizer rule: Memory saving single char out(1)/2
; Optimizer rule: Single character output/2
JMP RETURN
;
LINE_SKIP120:
;
;
LINE_57110:
;
LDA #$8c
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_A%
LDA VAR_A%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
EQ_EQ48:
EQ_SKIP48:
COMP_SKP57:
BNE LINE_SKIP121
LINE_NSKIP121:
; Optimizer rule: Simplified equal comparison/6
;
LDA #147
JSR SINGLECHROUTMAX
; Optimizer rule: Memory saving single char out(1)/2
; Optimizer rule: Single character output/2
LDA #<CONST_99
LDY #>CONST_99
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JMP LINE_60000
;
LINE_SKIP121:
;
;
LINE_57120:
;
LDA #$89
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_A%
LDA VAR_A%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
EQ_EQ49:
EQ_SKIP49:
COMP_SKP58:
BNE LINE_SKIP122
LINE_NSKIP122:
; Optimizer rule: Simplified equal comparison/6
;
JMP LINE_57200
;
LINE_SKIP122:
;
;
LINE_57130:
;
JMP LINE_57060
;
LINE_57200:
;
LDY VAR_DN%
LDA VAR_DN%+1
JSR SUPERFIINX
; Optimizer rule: Even faster INTEGER INC/1
STY VAR_DN%
STA VAR_DN%+1
LDA #$0a
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_DN%
LDA VAR_DN%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
EQ_EQ50:
EQ_SKIP50:
COMP_SKP59:
BNE LINE_SKIP123
LINE_NSKIP123:
; Optimizer rule: Simplified equal comparison/6
;
LDY #8
LDA #0
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_DN%
STA VAR_DN%+1
;
LINE_SKIP123:
;
;
LINE_57210:
;
JMP LINE_57010
;
LINE_57500:
;
;
LINE_57510:
;
LDA #147
JSR SINGLECHROUTMAX
; Optimizer rule: Memory saving single char out(1)/2
; Optimizer rule: Single character output/2
LDA #<CONST_101
LDY #>CONST_101
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JSR LINEBREAK
;
LINE_57520:
;
LDA #<CONST_102
LDY #>CONST_102
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
LDA #$0
STA FAC
STA FACHO
STA FACMOH
STA FACMO
STA FACLO
STA FACSGN
; Optimizer rule: Direct loading of 0/7
LDA #<VAR_SA
LDY #>VAR_SA
JSR CMPFAC
; Optimizer rule: Highly simplified loading for CMP/6
BCC LTEQ_LTEQ51
BEQ LTEQ_LTEQ51
LDA #0
JMP LTEQ_SKIP51
LTEQ_LTEQ51:
LDA #$1
LTEQ_SKIP51:
COMP_SKP60:
BEQ LINE_SKIP124
; Simplified conditional branch
;
LINE_NSKIP124:
;
LDA #<CONST_103
LDY #>CONST_103
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JMP LINE_57530
;
LINE_SKIP124:
;
;
LINE_57525:
;
LDA #<VAR_SA
LDY #>VAR_SA
JSR COPY2_XYA_XREG
; Optimizer rule: MEM 2 X_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
JSR REALOUT
JSR CHECKCMD
JSR LINEBREAK
;
LINE_57530:
;
LDA #<CONST_104
LDY #>CONST_104
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
LDA #$0
STA FAC
STA FACHO
STA FACMOH
STA FACMO
STA FACLO
STA FACSGN
; Optimizer rule: Direct loading of 0/7
LDA #<VAR_HS
LDY #>VAR_HS
JSR CMPFAC
; Optimizer rule: Highly simplified loading for CMP/6
BCC LTEQ_LTEQ52
BEQ LTEQ_LTEQ52
LDA #0
JMP LTEQ_SKIP52
LTEQ_LTEQ52:
LDA #$1
LTEQ_SKIP52:
COMP_SKP61:
BEQ LINE_SKIP125
; Simplified conditional branch
;
LINE_NSKIP125:
;
LDA #<CONST_105
LDY #>CONST_105
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JMP LINE_57540
;
LINE_SKIP125:
;
;
LINE_57535:
;
LDA #<VAR_HS
LDY #>VAR_HS
JSR COPY2_XYA_XREG
; Optimizer rule: MEM 2 X_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
JSR REALOUT
JSR CRSRRIGHT
LDA #<CONST_106
LDY #>CONST_106
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
LDA #<VAR_HE
LDY #>VAR_HE
JSR COPY2_XYA_XREG
; Optimizer rule: MEM 2 X_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
JSR REALOUT
JSR CHECKCMD
JSR LINEBREAK
;
LINE_57540:
;
LDA #<CONST_107
LDY #>CONST_107
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_CL%
LDA VAR_CL%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
BCC LTEQ_LTEQ53
BEQ LTEQ_LTEQ53
LDA #0
JMP LTEQ_SKIP53
LTEQ_LTEQ53:
LDA #$1
LTEQ_SKIP53:
COMP_SKP62:
BEQ LINE_SKIP126
; Simplified conditional branch
;
LINE_NSKIP126:
;
LDA #<CONST_103
LDY #>CONST_103
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JMP LINE_57580
;
LINE_SKIP126:
;
;
LINE_57545:
;
LDY VAR_CL%
LDA VAR_CL%+1
; integer in Y/A to FAC
JSR INTFAC
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
JSR INTOUT
JSR CHECKCMD
JSR LINEBREAK
;
LINE_57580:
;
LDA #<CONST_108
LDY #>CONST_108
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
LDA #<CONST_109
LDY #>CONST_109
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
JSR COMPACTMAX
LDA #<CONST_110R
LDY #>CONST_110R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
; ignored: CHGCTX #1
LDA VAR_GU$
LDY VAR_GU$+1
STA B_REG
STY B_REG+1
; ignored: CHGCTX #0
JSR LEN
JSR POPREAL2X
; Optimizer rule: POPREAL and load X/1
JSR FASTFSUBARG
; Optimizer rule: Fast FSUB (ARG)/1
; Optimizer rule: POP, REG0, VAR0 -> direct calc/5
; Optimizer rule: FAC into REG?, REG? into FAC/0
LDX #<C_REG
LDY #>C_REG
; FAC to (X/Y)
JSR FACMEM
; ignored: CHGCTX #1
LDA VAR_GU$
LDY VAR_GU$+1
STA B_REG
STY B_REG+1
JSR RIGHT
JSR STROUTBRK
; Optimizer rule: STROUT + LINEBRK/1
;
LINE_57590:
;
JSR LINEBREAK
LDA #<CONST_111
LDY #>CONST_111
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
;
LINE_57700:
;
JSR GETSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_A$
LDY #>VAR_A$
JSR COPYSTRING
LDA #<CONST_6
LDY #>CONST_6
STA B_REG
STY B_REG+1
LDA VAR_A$
LDY VAR_A$+1
STA A_REG
STY A_REG+1
; ignored: CHGCTX #0
JSR SEQ
LDA X_REG
COMP_SKP63:
BEQ LINE_SKIP127
; Simplified conditional branch
;
LINE_NSKIP127:
;
JMP LINE_57700
;
LINE_SKIP127:
;
;
LINE_57710:
;
LDA VAR_A$
LDY VAR_A$+1
STA B_REG
STY B_REG+1
; ignored: CHGCTX #0
JSR ASC
LDA #0
LDY TMP2_ZP
STY VAR_A%
STA VAR_A%+1
; Optimizer rule: ASC to integer variable/5
LDA #$8c
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_A%
LDA VAR_A%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
EQ_EQ54:
EQ_SKIP54:
COMP_SKP64:
BNE LINE_SKIP128
LINE_NSKIP128:
; Optimizer rule: Simplified equal comparison/6
;
LDA #<CONST_6
LDY #>CONST_6
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_GU$
LDY #>VAR_GU$
JSR COPYSTRING
; Optimizer rule: Simplified loading of Strings/5
JSR GOSUB
JSR LINE_45800
JMP LINE_57510
;
LINE_SKIP128:
;
;
LINE_57720:
;
LDA #$85
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_A%
LDA VAR_A%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
EQ_EQ55:
EQ_SKIP55:
COMP_SKP65:
BNE LINE_SKIP129
LINE_NSKIP129:
; Optimizer rule: Simplified equal comparison/6
;
JSR GOSUB
JSR LINE_60100
JMP LINE_57510
;
LINE_SKIP129:
;
;
LINE_57730:
;
LDA #$86
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_A%
LDA VAR_A%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
EQ_EQ56:
EQ_SKIP56:
COMP_SKP66:
BNE LINE_SKIP130
LINE_NSKIP130:
; Optimizer rule: Simplified equal comparison/6
;
JSR GOSUB
JSR LINE_60200
JMP LINE_57510
;
LINE_SKIP130:
;
;
LINE_57740:
;
LDA #$87
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_A%
LDA VAR_A%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
EQ_EQ57:
EQ_SKIP57:
COMP_SKP67:
BNE LINE_SKIP131
LINE_NSKIP131:
; Optimizer rule: Simplified equal comparison/6
;
JSR GOSUB
JSR LINE_60300
JMP LINE_57510
;
LINE_SKIP131:
;
;
LINE_57790:
;
LDA #$88
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_A%
LDA VAR_A%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
EQ_EQ58:
EQ_SKIP58:
COMP_SKP68:
BNE LINE_SKIP132
LINE_NSKIP132:
; Optimizer rule: Simplified equal comparison/6
;
JMP RETURN
;
LINE_SKIP132:
;
;
LINE_57800:
;
JMP LINE_57700
;
LINE_58000:
;
;
LINE_58010:
;
LDA #147
JSR SINGLECHROUTMAX
; Optimizer rule: Memory saving single char out(1)/2
; Optimizer rule: Single character output/2
;
LINE_58020:
;
LDA #<CONST_5R
LDY #>CONST_5R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDY VAR_DN%
LDA VAR_DN%+1
; integer in Y/A to FAC
JSR INTFAC
; Optimizer rule: FAC into REG?, REG? into FAC/0
JSR PUSHREAL
LDA #<CONST_0R
LDY #>CONST_0R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA #<CONST_112
LDY #>CONST_112
STA B_REG
STY B_REG+1
LDY B_REG
LDA B_REG+1
STY G_REG
STA G_REG+1
JSR POPREAL
LDX #<D_REG
LDY #>D_REG
; FAC to (X/Y)
JSR FACMEM
JSR POPREAL
LDX #<C_REG
LDY #>C_REG
; FAC to (X/Y)
JSR FACMEM
JSR POPREALXREG
; Optimizer rule: POP and XREG combined/1
; Optimizer rule: FAC 2 X_REG(2)/1
LDA #<CONST_7R
LDY #>CONST_7R
JSR COPY2_XYA_YREG
; Optimizer rule: MEM 2 Y_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
JSR OPEN
LDY #1
STY 781
; Optimizer rule: Simple POKE/2
LDA #<65478
STA TMP_ZP
LDA #>65478
STA TMP_ZP+1
JSR SYSTEMCALL
JSR GETSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_A$
LDY #>VAR_A$
JSR COPYSTRING
JSR GETSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_A$
LDY #>VAR_A$
JSR COPYSTRING
;
LINE_58030:
;
JSR GETSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_A$
LDY #>VAR_A$
JSR COPYSTRING
JSR GETSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_A$
LDY #>VAR_A$
JSR COPYSTRING
JSR GETSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_H$
LDY #>VAR_H$
JSR COPYSTRING
JSR GETSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_L$
LDY #>VAR_L$
JSR COPYSTRING
LDY STATUS
; Byte in Y to FAC
JSR BYTEFAC
LDX #<VAR_ST
LDY #>VAR_ST
JSR FACMEM
LDA #<VAR_ST
LDY #>VAR_ST
JSR COPY2_XYA_YREG
; Optimizer rule: MEM 2 Y_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
LDA Y_REG
COMP_SKP69:
BEQ LINE_SKIP133
; Simplified conditional branch
;
LINE_NSKIP133:
;
LDA #<65484
STA TMP_ZP
LDA #>65484
STA TMP_ZP+1
JSR SYSTEMCALL
LDA #<CONST_5R
LDY #>CONST_5R
JSR COPY2_XYA_XREG
; Optimizer rule: MEM 2 X_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
JSR CLOSE
JMP LINE_58070
;
LINE_SKIP133:
;
;
LINE_58040:
;
JSR COMPACTMAX
LDA VAR_LL$
LDY VAR_LL$+1
STA B_REG
STY B_REG+1
LDA VAR_L$
LDY VAR_L$+1
STA A_REG
STY A_REG+1
JSR CONCAT
LDY A_REG
LDA A_REG+1
STY B_REG
STA B_REG+1
; ignored: CHGCTX #0
JSR ASC
LDY #8
STY A_REG
JSR XREGFAC
JSR SHL
; Optimizer rule: Shorter SHL/4
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(1)/1
LDA #<X_REG
LDY #>X_REG
; Real in (A/Y) to FAC
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
; ignored: CHGCTX #1
LDA VAR_LL$
LDY VAR_LL$+1
STA B_REG
STY B_REG+1
LDA VAR_H$
LDY VAR_H$+1
STA A_REG
STY A_REG+1
JSR CONCAT
LDY A_REG
LDA A_REG+1
STY B_REG
STA B_REG+1
; ignored: CHGCTX #0
JSR ASC
JSR POPREAL2X
; Optimizer rule: POPREAL and load X/1
JSR FASTFADDARG
; Optimizer rule: Fast FADD (ARG)/1
; Optimizer rule: POP, REG0, VAR0 -> direct calc/5
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
JSR INTOUT
JSR CRSRRIGHT
;
LINE_58050:
;
JSR GETSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_A$
LDY #>VAR_A$
JSR COPYSTRING
JSR GETSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_B$
LDY #>VAR_B$
JSR COPYSTRING
LDA VAR_B$
LDY VAR_B$+1
STA B_REG
STY B_REG+1
; ignored: CHGCTX #0
JSR LEN
LDA X_REG
COMP_SKP70:
BNE LINE_NSKIP134
; Optimizer rule: CMP (REG) != 0(2)/3
JMP LINE_SKIP134
;
LINE_NSKIP134:
;
LDA VAR_A$
LDY VAR_A$+1
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
LDA VAR_B$
LDY VAR_B$+1
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
LDA #<CONST_0R
LDY #>CONST_0R
JSR COPY2_XYA_YREG
; Optimizer rule: MEM 2 Y_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
LDY STATUS
; Byte in Y to FAC
JSR BYTEFAC
LDX #<VAR_ST
LDY #>VAR_ST
JSR FACMEM
LDA #<VAR_ST
LDY #>VAR_ST
JSR COPY2_XYA_XREG
; Optimizer rule: MEM 2 X_REG/3
; Optimizer rule: Memory saving copy/4
; Optimizer rule: Quick copy into REG/7
JSR YREGFAC
; Optimizer rule: Y_REG 2 FAC(1)/1
LDA #<X_REG
LDY #>X_REG
; CMPFAC with (A/Y)
JSR CMPFAC
EQ_EQ59:
EQ_SKIP59:
COMP_SKP71:
BNE LINE_SKIP135
LINE_NSKIP135:
; Optimizer rule: Simplified equal comparison/6
;
JMP LINE_58050
;
LINE_SKIP135:
;
;
LINE_SKIP134:
;
;
LINE_58060:
;
LDA VAR_A$
LDY VAR_A$+1
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JMP LINE_58030
;
LINE_58070:
;
JSR GOSUB
JSR LINE_13000
;
LINE_58080:
;
JMP RETURN
;
LINE_60000:
;
;
LINE_60010:
;
LDY #0
STY 45
; Optimizer rule: Simple POKE/2
LDY #10
STY 46
; Optimizer rule: Simple POKE/2
LDY #0
STY 47
; Optimizer rule: Simple POKE/2
LDY #10
STY 48
; Optimizer rule: Simple POKE/2
LDY #0
STY 49
; Optimizer rule: Simple POKE/2
LDY #10
STY 50
; Optimizer rule: Simple POKE/2
;
LINE_60020:
;
LDY #0
STY 55
; Optimizer rule: Simple POKE/2
LDY #160
STY 56
; Optimizer rule: Simple POKE/2
LDY #0
STY 51
; Optimizer rule: Simple POKE/2
LDY #160
STY 52
; Optimizer rule: Simple POKE/2
LDA #9
JSR SINGLECHROUTMAX
; Optimizer rule: Memory saving single char out(1)/2
; Optimizer rule: Single character output/2
JSR END
RTS
;
LINE_60100:
;
;
LINE_60105:
;
LDA #147
JSR SINGLECHROUTMAX
; Optimizer rule: Memory saving single char out(1)/2
; Optimizer rule: Single character output/2
LDA #<CONST_115
LDY #>CONST_115
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JSR LINEBREAK
;
LINE_60110:
;
INPUT6:
JSR CLEARQUEUE
JSR COMPACTMAX
LDA #<CONST_116
LDY #>CONST_116
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
JSR QMARKOUT1
JSR INPUTNUMBER
LDA X_REG
COMP_SKP72:
BEQ INPUT6_0
; Optimizer rule: CMP (REG) = 0(2)/3
LDA #<CONST_117
LDY #>CONST_117
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JMP INPUT6
INPUT6_0:
JSR YREGFAC
; Optimizer rule: Y_REG 2 FAC(1)/1
LDX #<VAR_SA
LDY #>VAR_SA
; FAC to (X/Y)
JSR FACMEM
JSR QUEUESIZE
LDA X_REG
COMP_SKP73:
BEQ INPUTCHECK6
; Optimizer rule: CMP (REG) = 0(2)/3
JSR EXTRAIGNORED
INPUTCHECK6:
;
LINE_60115:
;
LDA VAR_SA
BEQ EQ_SKIP60
EQ_EQ60:
JMP LINE_SKIP136
EQ_SKIP60:
COMP_SKP74:
; Optimizer rule: Reverted comparison/6
; Simplified conditional branch
;
LINE_NSKIP136:
;
LDX #4
dcloop2610_1:
LDA CONST_118,X
STA VAR_SA,X
DEX
BPL dcloop2610_1
; Optimizer rule: Direct copy of floats into mem/6
JMP RETURN
;
LINE_SKIP136:
;
;
LINE_60120:
;
LDA #<CONST_119
LDY #>CONST_119
JSR REALFAC
LDA #<VAR_SA
LDY #>VAR_SA
JSR CMPFAC
; Optimizer rule: Highly simplified loading for CMP/6
ROL
BCS GT_GT61
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP GT_SKIP61
GT_GT61:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
GT_SKIP61:
; Real in (A/Y) to FAC
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA #<CONST_120R
LDY #>CONST_120R
JSR REALFAC
LDA #<VAR_SA
LDY #>VAR_SA
JSR CMPFAC
; Optimizer rule: Highly simplified loading for CMP/6
BEQ LT_LT_EQ62
ROL
BCC LT_LT62
LT_LT_EQ62:
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP LT_SKIP62
LT_LT62:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
LT_SKIP62:
; Real in (A/Y) to FAC
JSR REALFAC
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
JSR POPREAL2X
; Optimizer rule: POPREAL and load X/1
JSR FASTOR
; Optimizer rule: POP, REG0, VAR0 -> direct calc/5
; Optimizer rule: Faster logic OR/1
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
LDA X_REG
COMP_SKP75:
BEQ LINE_SKIP137
; Simplified conditional branch
;
LINE_NSKIP137:
;
LDA #<CONST_121
LDY #>CONST_121
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JMP LINE_60110
;
LINE_SKIP137:
;
;
LINE_60130:
;
JMP RETURN
;
LINE_60200:
;
;
LINE_60205:
;
LDA #147
JSR SINGLECHROUTMAX
; Optimizer rule: Memory saving single char out(1)/2
; Optimizer rule: Single character output/2
LDA #<CONST_122
LDY #>CONST_122
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
;
LINE_60208:
;
LDA #<CONST_123
LDY #>CONST_123
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JSR LINEBREAK
;
LINE_60210:
;
INPUT7:
JSR CLEARQUEUE
JSR COMPACTMAX
LDA #<CONST_124
LDY #>CONST_124
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
JSR QMARKOUT1
JSR INPUTNUMBER
LDA X_REG
COMP_SKP76:
BEQ INPUT7_0
; Optimizer rule: CMP (REG) = 0(2)/3
LDA #<CONST_117
LDY #>CONST_117
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JMP INPUT7
INPUT7_0:
JSR YREGFAC
; Optimizer rule: Y_REG 2 FAC(1)/1
LDX #<VAR_HS
LDY #>VAR_HS
; FAC to (X/Y)
JSR FACMEM
JSR QUEUESIZE
LDA X_REG
COMP_SKP77:
BEQ INPUTCHECK7
; Optimizer rule: CMP (REG) = 0(2)/3
JSR EXTRAIGNORED
INPUTCHECK7:
;
LINE_60215:
;
LDA VAR_HS
BEQ EQ_SKIP63
EQ_EQ63:
JMP LINE_SKIP138
EQ_SKIP63:
COMP_SKP78:
; Optimizer rule: Reverted comparison/6
; Simplified conditional branch
;
LINE_NSKIP138:
LDX #4
dcloop2737_1:
LDA CONST_118,X
STA VAR_HS,X
LDA CONST_118,X
STA VAR_HE,X
DEX
BPL dcloop2737_1
; Special rule: Aggregation of assignments (2)
; Optimizer rule: Direct copy of floats into mem/6
JMP RETURN
;
LINE_SKIP138:
;
;
LINE_60220:
;
LDA #<CONST_119
LDY #>CONST_119
JSR REALFAC
LDA #<VAR_HS
LDY #>VAR_HS
JSR CMPFAC
; Optimizer rule: Highly simplified loading for CMP/6
ROL
BCS GT_GT64
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP GT_SKIP64
GT_GT64:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
GT_SKIP64:
; Real in (A/Y) to FAC
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA #<CONST_120R
LDY #>CONST_120R
JSR REALFAC
LDA #<VAR_HS
LDY #>VAR_HS
JSR CMPFAC
; Optimizer rule: Highly simplified loading for CMP/6
BEQ LT_LT_EQ65
ROL
BCC LT_LT65
LT_LT_EQ65:
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP LT_SKIP65
LT_LT65:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
LT_SKIP65:
; Real in (A/Y) to FAC
JSR REALFAC
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
JSR POPREAL2X
; Optimizer rule: POPREAL and load X/1
JSR FASTOR
; Optimizer rule: POP, REG0, VAR0 -> direct calc/5
; Optimizer rule: Faster logic OR/1
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
LDA X_REG
COMP_SKP79:
BEQ LINE_SKIP139
; Simplified conditional branch
;
LINE_NSKIP139:
;
LDA #<CONST_121
LDY #>CONST_121
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JMP LINE_60210
;
LINE_SKIP139:
;
;
LINE_60230:
;
INPUT8:
JSR CLEARQUEUE
JSR COMPACTMAX
LDA #<CONST_125
LDY #>CONST_125
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
JSR QMARKOUT1
JSR INPUTNUMBER
LDA X_REG
COMP_SKP80:
BEQ INPUT8_0
; Optimizer rule: CMP (REG) = 0(2)/3
LDA #<CONST_117
LDY #>CONST_117
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JMP INPUT8
INPUT8_0:
JSR YREGFAC
; Optimizer rule: Y_REG 2 FAC(1)/1
LDX #<VAR_HE
LDY #>VAR_HE
; FAC to (X/Y)
JSR FACMEM
JSR QUEUESIZE
LDA X_REG
COMP_SKP81:
BEQ INPUTCHECK8
; Optimizer rule: CMP (REG) = 0(2)/3
JSR EXTRAIGNORED
INPUTCHECK8:
;
LINE_60240:
;
LDA #<CONST_119
LDY #>CONST_119
JSR REALFAC
LDA #<VAR_HE
LDY #>VAR_HE
JSR CMPFAC
; Optimizer rule: Highly simplified loading for CMP/6
ROL
BCS GT_GT66
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP GT_SKIP66
GT_GT66:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
GT_SKIP66:
; Real in (A/Y) to FAC
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA #<CONST_120R
LDY #>CONST_120R
JSR REALFAC
LDA #<VAR_HE
LDY #>VAR_HE
JSR CMPFAC
; Optimizer rule: Highly simplified loading for CMP/6
BEQ LT_LT_EQ67
ROL
BCC LT_LT67
LT_LT_EQ67:
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP LT_SKIP67
LT_LT67:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
LT_SKIP67:
; Real in (A/Y) to FAC
JSR REALFAC
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
JSR POPREAL2X
; Optimizer rule: POPREAL and load X/1
JSR FASTOR
; Optimizer rule: POP, REG0, VAR0 -> direct calc/5
; Optimizer rule: Faster logic OR/1
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
LDA X_REG
COMP_SKP82:
BEQ LINE_SKIP140
; Simplified conditional branch
;
LINE_NSKIP140:
;
LDA #<CONST_126
LDY #>CONST_126
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JMP LINE_60230
;
LINE_SKIP140:
;
;
LINE_60250:
;
LDA #<VAR_HE
LDY #>VAR_HE
JSR REALFAC
LDA #<VAR_HS
LDY #>VAR_HS
JSR CMPFAC
; Optimizer rule: Highly simplified loading for CMP/6
ROL
BCS GT_GT68
LDA #0
JMP GT_SKIP68
GT_GT68:
LDA #$1
GT_SKIP68:
COMP_SKP83:
BNE LINE_NSKIP141
; Optimizer rule: Simplified CMP redux/7
JMP LINE_SKIP141
;
LINE_NSKIP141:
LDX #4
dcloop2864_1:
LDA VAR_HE,X
STA VAR_HT,X
LDA VAR_HS,X
STA VAR_HE,X
LDA VAR_HT,X
STA VAR_HS,X
DEX
BPL dcloop2864_1
; Special rule: Aggregation of assignments (3)
; Optimizer rule: Direct copy of floats into mem/6
;
LINE_SKIP141:
;
;
LINE_60260:
;
JMP RETURN
;
LINE_60300:
;
;
LINE_60305:
;
LDA #147
JSR SINGLECHROUTMAX
; Optimizer rule: Memory saving single char out(1)/2
; Optimizer rule: Single character output/2
LDA #<CONST_127
LDY #>CONST_127
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
;
LINE_60306:
;
LDA #<CONST_128
LDY #>CONST_128
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JSR LINEBREAK
;
LINE_60310:
;
INPUT9:
JSR CLEARQUEUE
JSR COMPACTMAX
LDA #<CONST_129
LDY #>CONST_129
JSR STROUTWL
; Optimizer rule: Memory saving STROUT/1
JSR QMARKOUT1
JSR INPUTNUMBER
LDA X_REG
COMP_SKP84:
BEQ INPUT9_0
; Optimizer rule: CMP (REG) = 0(2)/3
LDA #<CONST_117
LDY #>CONST_117
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JMP INPUT9
INPUT9_0:
JSR YREGFAC
; Optimizer rule: Y_REG 2 FAC(1)/1
; FAC to integer in Y/A
JSR FACINT
STY VAR_CL%
STA VAR_CL%+1
JSR QUEUESIZE
LDA X_REG
COMP_SKP85:
BEQ INPUTCHECK9
; Optimizer rule: CMP (REG) = 0(2)/3
JSR EXTRAIGNORED
INPUTCHECK9:
;
LINE_60315:
;
LDA #$00
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_CL%
LDA VAR_CL%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
EQ_EQ69:
EQ_SKIP69:
COMP_SKP86:
BNE LINE_SKIP142
LINE_NSKIP142:
; Optimizer rule: Simplified equal comparison/6
;
JMP RETURN
;
LINE_SKIP142:
;
;
LINE_60320:
;
LDA #$06
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_CL%
LDA VAR_CL%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
ROL
BCS GT_GT70
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP GT_SKIP70
GT_GT70:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
GT_SKIP70:
; Real in (A/Y) to FAC
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA #$03
LDY #$00
STA TMP_ZP
STY TMP_ZP+1
LDY VAR_CL%
LDA VAR_CL%+1
JSR ICMP
; Optimized code for Integer(2)
;
;
;
;
;
;
;
;
;
;
BEQ LT_LT_EQ71
ROL
BCC LT_LT71
LT_LT_EQ71:
LDA #<REAL_CONST_ZERO
LDY #>REAL_CONST_ZERO
JMP LT_SKIP71
LT_LT71:
LDA #<REAL_CONST_MINUS_ONE
LDY #>REAL_CONST_MINUS_ONE
LT_SKIP71:
; Real in (A/Y) to FAC
JSR REALFAC
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
JSR POPREAL2X
; Optimizer rule: POPREAL and load X/1
JSR FASTOR
; Optimizer rule: POP, REG0, VAR0 -> direct calc/5
; Optimizer rule: Faster logic OR/1
JSR FACXREG
; Optimizer rule: FAC 2 X_REG(2)/1
LDA X_REG
COMP_SKP87:
BEQ LINE_SKIP143
; Simplified conditional branch
;
LINE_NSKIP143:
;
LDA #<CONST_130
LDY #>CONST_130
JSR STROUTBRKWL
; Optimizer rule: Memory saving STROUTBRK/1
; Optimizer rule: STROUT + LINEBRK/1
JMP LINE_60310
;
LINE_SKIP143:
;
;
LINE_60330:
;
JMP RETURN
;
LINE_62000:
;
;
LINE_62010:
;
JSR COMPACTMAX
LDA #0
JSR CHRINT
; Optimizer rule: CHR with integer constant/2
;ignored: JSR COPYSTR
LDA A_REG
LDY A_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_LL$
LDY #>VAR_LL$
JSR COPYSTRING
LDA #$0
STA FAC
STA FACHO
STA FACMOH
STA FACMO
STA FACLO
STA FACSGN
; Optimizer rule: Direct loading of 0/7
; Optimizer rule: Avoid INTEGER->REAL conversion/3
; Optimizer rule: FAC into REG?, REG? into FAC/0
; FAC = RND(FAC)
JSR FACRND
; Optimizer rule: FAC into REG?, REG? into FAC/0
LDX #<VAR_I
LDY #>VAR_I
; FAC to (X/Y)
JSR FACMEM
;
LINE_62020:
;
LDY #64
LDA #0
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_TT%
STA VAR_TT%+1
LDX #4
dcloop2864_4:
LDA CONST_131,X
STA VAR_BU,X
LDA CONST_132,X
STA VAR_UI,X
DEX
BPL dcloop2864_4
; Special rule: Aggregation of assignments (2)
; Optimizer rule: Direct copy of floats into mem/6
;
LINE_62030:
LDX #4
dcloop2991_1:
LDA CONST_133,X
STA VAR_UR,X
LDA CONST_134,X
STA VAR_US,X
LDA CONST_135,X
STA VAR_UG,X
DEX
BPL dcloop2991_1
; Special rule: Aggregation of assignments (3)
; Optimizer rule: Direct copy of floats into mem/6
;
LINE_62040:
LDX #4
dcloop2991_4:
LDA CONST_136,X
STA VAR_UC,X
LDA CONST_118,X
STA VAR_SA,X
LDA CONST_118,X
STA VAR_HS,X
LDA CONST_118,X
STA VAR_HE,X
DEX
BPL dcloop2991_4
; Special rule: Aggregation of assignments (4)
; Optimizer rule: Direct copy of floats into mem/6
LDA #<CONST_118
LDY #>CONST_118
JSR REALFAC
; Optimizer rule: Direct loading of values into FAC/3
; FAC to integer in Y/A
JSR FACINT
STY VAR_CL%
STA VAR_CL%+1
;
LINE_62050:
;
LDY #0
LDA #7
; Optimizer rule: INT to FAC, FAC to INT/2
STY VAR_ML%
STA VAR_ML%+1
;
LINE_62060:
;
LDA #<CONST_6
LDY #>CONST_6
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_GU$
LDY #>VAR_GU$
JSR COPYSTRING
; Optimizer rule: Simplified loading of Strings/5
;
LINE_62065:
;
;
LINE_62070:
;
LDA #<CONST_138
LDY #>CONST_138
STA TMP_ZP
STY TMP_ZP+1
LDA #<VAR_OF$
LDY #>VAR_OF$
JSR COPYSTRING
; Optimizer rule: Simplified loading of Strings/5
;
LINE_62080:
;
;
LINE_62090:
;
LDA #0
STA VAR_I
STA VAR_I+1
STA VAR_I+2
STA VAR_I+3
STA VAR_I+4
; Optimizer rule: Simplified setting to 0/6
LDA #<CONST_62R
LDY #>CONST_62R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA #<CONST_5R
LDY #>CONST_5R
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
LDA #<VAR_I
LDY #>VAR_I
STA A_REG
STY A_REG+1
LDA #<FORLOOP7
STA JUMP_TARGET
LDA #>FORLOOP7
STA JUMP_TARGET+1
JSR INITFOR
FORLOOP7:
LDA #<VAR_I
LDY #>VAR_I
JSR REALFACPUSH
; Optimizer rule: Load and PUSH combined/1
JSR READSTR
JSR POPREALXREG
; Optimizer rule: POP and XREG combined/1
; Optimizer rule: FAC 2 X_REG(2)/1
LDA #<VAR_HX$[]
LDY #>VAR_HX$[]
STA G_REG
STY G_REG+1
JSR ARRAYSTORE_STRING
LDA #0
STA A_REG
STA A_REG+1
JSR NEXT
; Optimizer rule: NEXT with no variable name simplified/4
LDA A_REG
BNE RBEQ_7
JMP (JUMP_TARGET)
; Optimizer rule: NEXT check simplified/4
RBEQ_7:
;
LINE_62100:
;
JSR GOSUB
JSR LINE_55000
JMP RETURN
;
LINE_62500:
;
;
LINE_62510:
;
JSR END
RTS
; *** SUBROUTINES ***
;###################################
END			LDX SP_SAVE
TXS
<IF BIGRAM>
JSR ENABLEROM
</IF>
<IF BOOST>
JSR BOOSTDIASBLE
</IF>
RTS
;###################################
;###################################
SYSTEMCALLDYN
JSR XREGFAC
JSR FACWORD
STY TMP_ZP
STA TMP_ZP+1
JMP SYSTEMCALL
;###################################
;###################################
SYSTEMCALL
LDA TMP_ZP
STA SCDO+1
LDA TMP_ZP+1
STA SCDO+2
LDA $030F
PHA
LDA $030C
LDX $030D
LDY $030E
PLP
<IF BIGRAM>
JSR ENABLEROM
</IF>
SCDO		JSR $FFFF
<IF BIGRAM>
JSR DISABLEROM
</IF>
PHP
STA $030C
STX $030D
STY $030E
PLA
STA $030F
RTS
;###################################
;###################################
START		LDA ENDSTRBUF+1
BNE ENDGIVEN
LDA BASICEND
STA ENDSTRBUF
LDA BASICEND+1
STA ENDSTRBUF+1
ENDGIVEN	LDA #<FPSTACK
LDY #>FPSTACK
STA FPSTACKP
STY FPSTACKP+1
LDA #<FORSTACK
LDY #>FORSTACK
STA FORSTACKP
STY FORSTACKP+1
LDA #<STRBUF
LDY #>STRBUF
STA STRBUFP
STY STRBUFP+1
STA HIGHP
STY HIGHP+1
LDA #0
STA CHLOCKFLAG
STA LASTVAR
STA LASTVAR+1
JSR INITVARS
LDA #0
STA CMD_NUM
STA CHANNEL
TAY
TAX
<IF X16>
JSR VARBANKON
</IF>
STA KEYNDX
<IF X16>
JSR VARBANKOFF
LDA #DEFAULT_BANK
STA RAMSELECT
</IF>
JSR RESTORE
CLC
<IF BOOST>
JSR BOOSTENABLE
</IF>
RTS
;###################################
;###################################
RESTARTPRG	LDA #<FPSTACK
LDY #>FPSTACK
STA FPSTACKP
STY FPSTACKP+1
LDA #<FORSTACK
LDY #>FORSTACK
STA FORSTACKP
STY FORSTACKP+1
JMP LINE_0
;###################################
;###################################
INITNARRAY
STA TMP_ZP
STY TMP_ZP+1
LDY #0
TYA
NINITLOOP	STA (TMP_ZP),Y
INC TMP_ZP
BNE NLOOPNOV
INC TMP_ZP+1
NLOOPNOV	LDX TMP2_ZP
BNE NLOOPNOV2
DEC TMP2_ZP+1
NLOOPNOV2	DEC TMP2_ZP
BNE NINITLOOP
LDX TMP2_ZP+1
BNE NINITLOOP
RTS
;###################################
;###################################
INITSTRARRAY
STA TMP_ZP
STY TMP_ZP+1
SINITLOOP	LDY #0
LDA #<EMPTYSTR
STA (TMP_ZP),Y
LDA #>EMPTYSTR
INY
STA (TMP_ZP),Y
CLC
LDA TMP_ZP
ADC #2
STA TMP_ZP
BCC SLOOPNOV1
INC TMP_ZP+1
SLOOPNOV1	SEC
LDA TMP2_ZP
SBC #2
STA TMP2_ZP
BCS SLOOPNOV2
DEC TMP2_ZP+1
SLOOPNOV2	LDA TMP2_ZP
BNE SINITLOOP
LDA TMP2_ZP+1
BNE SINITLOOP
RTS
;###################################
;###################################
INITSPARAMS	STA TMP3_ZP
STY TMP3_ZP+1
SEC
SBC #2
STA TMP_ZP
TYA
SBC #0
STA TMP_ZP+1
LDY #0
LDA (TMP_ZP),Y
STA TMP2_ZP
INY
LDA (TMP_ZP),Y
STA TMP2_ZP+1
LDA TMP3_ZP
LDY TMP3_ZP+1
RTS
;##################################
;##################################
INITSTRVARS	LDA #<STRINGVARS_START		; Reset all string variables...
LDY #>STRINGVARS_START
CMP #<STRINGVARS_END
BNE INITIT1
CPY #>STRINGVARS_END
BNE INITIT1
JMP INITSA2					; No string variables at all
INITIT1		STA TMP_ZP
STY TMP_ZP+1
LDY #0
INITSTRLOOP	LDA #<EMPTYSTR
STA (TMP_ZP),Y
INY
LDA #>EMPTYSTR
STA (TMP_ZP),Y
DEY
LDA TMP_ZP
CLC
ADC #2
STA TMP_ZP
LDA TMP_ZP+1
ADC #0
STA TMP_ZP+1
CMP #>STRINGVARS_END
BNE INITSTRLOOP
LDA TMP_ZP
CMP #<STRINGVARS_END
BNE INITSTRLOOP
INITSA2		LDA #<STRINGARRAYS_START	; ...and all string arrays
LDY #>STRINGARRAYS_START
CMP #<STRINGARRAYS_END
BNE ARRAYLOOP
CPY #>STRINGARRAYS_END
BNE ARRAYLOOP
RTS							;...no string array at all
ARRAYLOOP	CLC
ADC #3
BCC ARRAYSKIP1
INY
ARRAYSKIP1	CPY #>STRINGARRAYS_END
BEQ ARRAYSC
BCC ARRAYSKIP2
JMP ARRAYQUIT
ARRAYSC		CMP #<STRINGARRAYS_END
BCS ARRAYQUIT
ARRAYSKIP2	STA TMP_REG
STY TMP_REG+1
JSR INITSPARAMS
LDA TMP_REG
LDY TMP_REG+1
JSR INITSTRARRAY
LDA TMP_ZP
LDY TMP_ZP+1
JMP ARRAYLOOP
ARRAYQUIT	RTS
;###################################
;###################################
RESTORE		LDA #<DATAS
LDY #>DATAS
STA DATASP
STY DATASP+1
RTS
;###################################
;###################################
MID			LDA #<D_REG
LDY #>D_REG
JSR REALFAC
JSR SGNFAC
ROL
BCC MIDLENGTH		; an actual length was given...
MIDNEGC		JSR STRFUNCINT		; ...no, it wasn't.
LDA TMP_REG			; copy start position from TMP_REG into TMP_REG+1
STA TMP_REG+1
BNE MIDOK2
JMP ILLEGALQUANTITY	; start has to be larger than 0
MIDOK2		DEC TMP_REG+1		; BASIC starts at 1, we start at 0
LDA (TMP_ZP),Y
SEC
SBC TMP_REG+1
STA TMP_REG			; store the calculated length
BCS	MIDNOV
STY TMP_REG			; Set length to 0, if start>string length
JMP MIDNOV
MIDLENGTH	JSR FACWORD
MIDCONST	STY TMP2_REG		; save the length in TMP2_REG
JSR STRFUNCINT
LDA TMP_REG			; copy start position from TMP_REG into TMP_REG+1
BNE MIDOK
JMP ILLEGALQUANTITY	; start has to be larger than 0
MIDOK		LDX TMP2_REG
STX TMP_REG			; store the length saved above in TMP_REG
STA TMP_REG+1
DEC TMP_REG+1		; BASIC starts at 1, we start at 0
MIDNOV		LDA TMP_REG+1		; the starting position
CLC
ADC TMP_REG			; add the length
BCS MIDCLAMP
CMP (TMP_ZP),Y
BCS	MIDCLAMP
MIDCOPY		JMP STRFUNC
MIDCLAMP	LDA (TMP_ZP),Y		; Clamp to the string's length, if needed...
SEC
SBC TMP_REG+1
STA TMP_REG
BCS MIDCOPY
STY TMP_REG
JMP MIDCOPY
;###################################
;###################################
RIGHT		JSR STRFUNCINT
LDA (TMP_ZP),Y
TAX
CMP TMP_REG			; compare the source string's length with the parameter
BCS RIGHTBELOW
STA TMP_REG			; length>source length? -> clamp to source length
RIGHTBELOW	TXA
SEC
SBC TMP_REG
BCS RIGHTNOV
LDA #0
RIGHTNOV	STA TMP_REG+1
JMP STRFUNC
;###################################
;###################################
LEFT		JSR STRFUNCINT
STY TMP_REG+1		; store the start position (always 0 for left$)
LDA (TMP_ZP),Y
CMP TMP_REG			; compare the source string's length with the parameter
BCS LEFTBELOW
STA TMP_REG			; length>source length? -> clamp to source length
LEFTBELOW	JMP STRFUNC
;###################################
;###################################
STRFUNCINT 	LDA B_REG			;the source string
STA TMP_ZP
LDA B_REG+1
STA TMP_ZP+1
LDA #<C_REG
LDY #>C_REG
JSR REALFAC
JSR FACWORD
STY TMP_REG			; store the parameter
LDY #0
RTS
;###################################
;###################################
; Generic function for string functions like for left$, right$ and mid$. It reuses the actual code to
; copy strings for an assignment but it jumps into it at a "copy only" stage. However, it still assumes
; that the source pointer points towards the length of the source string.
; We have to adapt to that behaviours, so we are adjusting and/or saving/restoring some values here.
STRFUNC		LDA TMP_REG+1
BEQ STARTATZERO
LDA TMP_ZP
CLC
ADC TMP_REG+1
STA TMP_ZP
BCC STARTATZERO
INC TMP_ZP+1
STARTATZERO	LDY #0
LDA (TMP_ZP),Y
PHA					; save the first byte of the source string on the stack
LDA TMP_REG
BNE STRFUNCNZ
LDA #<EMPTYSTR
STA A_REG
LDA #>EMPTYSTR
STA A_REG+1
JMP EXITSTRFUNC
STRFUNCNZ	STA (TMP_ZP),Y
LDA #<A_REG
LDY #>A_REG
STA TMP2_ZP
STY TMP2_ZP+1
LDX TMP_REG			; Put length into X for copy
JSR COPYONLY
EXITSTRFUNC	PLA
LDY #0
STA (TMP_ZP),Y		; restore the first byte of the source string on the stack
RTS
;###################################
;###################################
CONCAT		LDA A_REG
STA TMP_ZP
LDA A_REG+1
STA TMP_ZP+1
LDA STRBUFP		; adjust A_REG so that it points to the new tmp buffer
STA A_REG
STA TMP3_ZP
LDA STRBUFP+1
STA A_REG+1
STA TMP3_ZP+1
LDY #0
LDA (TMP_ZP),Y
TAX
LDA B_REG
STA TMP2_ZP
LDA B_REG+1
STA TMP2_ZP+1
TXA
CLC
ADC (TMP2_ZP),Y
BCC CCSTRFITS
JMP STRINGTOOLONG
CCSTRFITS	STA (TMP3_ZP),Y
INC TMP3_ZP
BNE CCNOOV2
INC TMP3_ZP+1
CCNOOV2		CLC
ADC STRBUFP
PHP
CLC
ADC #3
STA STRBUFP
BCC CCNOCS1
INC STRBUFP+1
CCNOCS1		PLP
BCC CCSTRFITS2
INC STRBUFP+1
CCSTRFITS2	JSR COPY2CONCAT		;...copy into the buffer
LDA B_REG			;set the content to append
STA TMP_ZP
LDA B_REG+1
STA TMP_ZP+1
JMP COPY2CONCAT		;..and copy it
;###################################
;###################################
COPY2CONCAT	LDY #0
LDA (TMP_ZP),Y
BEQ NOC2C			; Nothing to append, skip
STA TMP2_ZP
INC TMP_ZP
BNE COPY2LOOP
INC TMP_ZP+1
COPY2LOOP	LDA (TMP_ZP),Y
STA (TMP3_ZP),Y
INY
CPY TMP2_ZP
BNE COPY2LOOP
TYA
CLC
ADC TMP3_ZP			; Update tmp pointer in concat memory
STA TMP3_ZP
BCC NOC2C
INC TMP3_ZP+1
NOC2C		RTS
;###################################
;###################################
STR			JSR YREGFAC
STRINT		LDY #1
JSR FACSTR
LDY #0
STY TMP_ZP+1
LDA #LOFBUF
STA TMP_ZP
DEY
STRLOOP		INY
LDA LOFBUFH,Y
BNE STRLOOP
STY LOFBUF
TYA
TAX			; Length in X
LDA #<A_REG
LDY #>A_REG
STA TMP2_ZP
STY TMP2_ZP+1
JMP COPYONLY
;###################################
;###################################
LEN			LDA B_REG
STA TMP_ZP
LDA B_REG+1
STA TMP_ZP+1
LDY #0
LDA (TMP_ZP),Y
STA TMP2_ZP		;For use in a later optimization
BEQ ZEROLEN
TAY
LDA #0
JSR INTFAC
JMP FACXREG	;RTS is implicit
ZEROLEN		JMP ZEROSET
;###################################
;###################################
ASC			LDA B_REG
STA TMP_ZP
LDA B_REG+1
STA TMP_ZP+1
LDY #0
LDA (TMP_ZP),Y
BNE DOASC
JMP ILLEGALQUANTITY
DOASC		INY
LDA (TMP_ZP),Y
STA TMP2_ZP		;For use in a later optimization
TAY
LDA #0
JSR INTFAC
JMP FACXREG
;###################################
;###################################
CHRINT		TAX
LDA STRBUFP
STA TMP_ZP
STA A_REG
LDA STRBUFP+1
STA TMP_ZP+1
STA A_REG+1
LDA #1
LDY #0
STA (TMP_ZP),Y
TXA
INY
STA (TMP_ZP),Y
LDA STRBUFP
CLC
ADC #2
STA STRBUFP
BCC NOCHR2
INC STRBUFP+1
NOCHR2		RTS
;###################################
;###################################
WRITETID	LDY #0
LDA (TMP_ZP),Y
CMP #$6
BEQ FORMATOK
JMP ILLEGALQUANTITY
FORMATOK	INC TMP_ZP
BNE WRITE2
INC TMP_ZP+1
WRITE2		LDA TMP_ZP
STA INDEX1
LDA TMP_ZP+1
STA INDEX1+1
<IF !X16>
JMP WRITETIS
</IF>
<IF X16>
JMP WRITETID_X16
</IF>
;###################################
;###################################
SAVEPOINTERS
LDA TMP_ZP			; ...save the pointers
STA STORE1
LDA TMP_ZP+1
STA STORE1+1
LDA TMP2_ZP
STA STORE2
LDA TMP2_ZP+1
STA STORE2+1
LDA TMP3_ZP
STA STORE3
LDA TMP3_ZP+1
STA STORE3+1
RTS
;###################################
;###################################
RESTOREPOINTERS
LDA STORE3+1		; ...restore the pointers
STA TMP3_ZP+1
LDA STORE3
STA TMP3_ZP
LDA STORE2+1
STA TMP2_ZP+1
LDA STORE2
STA TMP2_ZP
LDA STORE1+1
STA TMP_ZP+1
LDA STORE1
STA TMP_ZP
RTS
;###################################
;###################################
; This check is called in places, where the actual source's length is unknown.
; So we compact assuming the maximum string length of 255. It's not ideal this way
; but it's better than what we did before: Read some random length out of whatever
; memory location TMP_ZP/TMP_ZP+1 was pointing to...
COMPACTMAX
LDA #$FF
LDY #$0
JMP COMPACTF
;###################################
;###################################
COMPACT
LDY #0
GCBUFNE		LDA (TMP_ZP),Y		; Get the source's length
COMPACTF	STA TMP4_REG		; ...and store it
LDY STRBUFP+1		; First, check if the new string would fit into memory...
STY TMP4_REG+1		; For that, we have to calculate the new strbufp after adding the string
INY					; add 1 to the high byte to check, if at least 256 bytes are free (fast path)
BEQ ENDMEM			; actually, if this happens, all went wrong anyway...whatever...
CPY ENDSTRBUF+1		; check, if there are at least 256 bytes free. If there are, no detailed check is needed...
BCC RGCEXIT			; there are? We are out then.
ENDMEM		LDA STRBUFP
CLC
ADC TMP4_REG
STA TMP4_REG
BCC	RGCNOOV1
INC TMP4_REG+1
RGCNOOV1	CLC
LDA TMP4_REG
ADC #3
STA TMP4_REG
BCC	RGCNOOV2
INC TMP4_REG+1
RGCNOOV2	LDA TMP4_REG+1		; Now do the actual check
CMP ENDSTRBUF+1
BEQ RGCLOW1
BCS GCEXECOMP		; Doesn't fit, run GC!
JMP RGCEXIT
RGCLOW1		LDA TMP4_REG
CMP ENDSTRBUF
BCS	GCEXECOMP		; This also triggers if it would fit exactly...but anyway...
RGCEXIT		RTS					; It fits? Then exit without GC
;###################################
;###################################
GCEXECOMP	LDA STRBUFP
STA STORE4
LDA STRBUFP+1
STA STORE4+1
JSR GCEXE
JMP CHECKMEMORY
;###################################
;###################################
GCEXE		JSR SAVEPOINTERS
LDA #0
STA LASTVAR
STA LASTVAR+1		; reset the last variable pointer to 0
LDA #<STRBUF
STA TMP_ZP
STA GCSTART
LDA #>STRBUF
STA TMP_ZP+1		; Pointer into the string memory, initialized to point at the start...
STA GCSTART+1
GCLOOP		LDY #0
LDA TMP_ZP
STA GCWORK
LDA TMP_ZP+1
STA GCWORK+1		; store the pointer for later use...
LDA (TMP_ZP),Y
STA GCLEN			; store the length
INC TMP_ZP
BNE GCLOOPNOOV
INC TMP_ZP+1
GCLOOPNOOV	LDA TMP_ZP
CLC
ADC GCLEN
STA TMP_ZP
BCC GCLOOPNOOV2
INC TMP_ZP+1		; TMP_ZP now points to the reference to the string variable that used this chunk once
GCLOOPNOOV2 LDY #0
LDA (TMP_ZP),Y
STA TMP2_ZP
INY
LDA (TMP_ZP),Y
STA TMP2_ZP+1		; Store the variable reference in TMP2_ZP
LDA TMP_ZP
CLC
ADC #2
STA TMP_ZP
BCC GCLOOPNOOV3
INC TMP_ZP+1		; adjust the pointer to point to the next entry
GCLOOPNOOV3 LDY #0
LDA (TMP2_ZP),Y
CMP GCWORK
BNE GCKLOOP
INY
LDA (TMP2_ZP),Y
CMP GCWORK+1
BEQ MEMFREE
GCKLOOP		LDA TMP_ZP+1		; Check if we have processed all of the string memory...
CMP HIGHP+1
BEQ GCHECKLOW
BCC GCLOOP
JMP GCDONE
GCHECKLOW	LDA TMP_ZP
CMP HIGHP
BCS GCDONE
JMP GCLOOP
MEMFREE		LDA GCSTART			; found a variable that points to this chunk...
CMP GCWORK			; ...then check if the can be copied down. This is the case if GCSTART!=GCWORK
BNE COPYDOWN
LDA GCSTART+1
CMP GCWORK+1
BNE COPYDOWN
LDA TMP_ZP			; GCSTART==GCWORK...adjust GCSTART and continue
STA GCSTART
LDA TMP_ZP+1
STA GCSTART+1
JMP	GCKLOOP			; continue if needed...
COPYDOWN	LDA GCSTART			; There's a gap in memory, so copy the found variable down to GCSTART and adjust GCSTART accordingly
STA TMP_REG
LDA GCSTART+1
STA TMP_REG+1		; set the target location...
LDA GCWORK
STA TMP2_REG
LDA GCWORK+1
STA TMP2_REG+1		; set the source location...
LDA TMP_ZP
SEC
SBC GCWORK
STA TMP3_REG
LDA TMP_ZP+1
SBC GCWORK+1
STA TMP3_REG+1		; set the length
LDA GCSTART
CLC
ADC TMP3_REG
STA GCSTART
LDA GCSTART+1
ADC TMP3_REG+1
STA GCSTART+1		; update GCSTART to point to the next free chunk
JSR QUICKCOPY		; copy the chunk down to (former, now stored in TMP_REG) GCSTART
LDY #0
LDA TMP_REG
STA (TMP2_ZP),Y
INY
LDA TMP_REG+1
STA (TMP2_ZP),Y		; ...and adjust the pointer to the memory in the variable to that new location
JMP GCKLOOP
GCDONE		LDA GCSTART
STA HIGHP
STA STRBUFP
LDA GCSTART+1
STA HIGHP+1
STA STRBUFP+1		; Update the string pointers to the new, hopefully lower position
GCSKIP		JSR RESTOREPOINTERS
RTS					; Remember: GC has to adjust highp as well!
;###################################
;###################################
CHECKMEMORY
LDA STRBUFP+1		; Check if we are out of memory even after a garbage collection.
CMP STORE4+1		; This is indicated by the string pointer being still equal or higher
BCC STILLFITSCM		; than before the GC. We are not checking against the actual memory limit,
; because the GC stops before reaching it, leaving all unhandled variables
; untouched. That's because we can't free anything more if we've already reached
; the limit. But there's no direct indicator of this, so we use this indirect one.
BEQ CHECKMEMLOWCM
JMP OUTOFMEMORY		; STRBUFP>last value? OOM!
CHECKMEMLOWCM
LDA STRBUFP			; High bytes are equal? Check low bytes
CMP STORE4
BCC	STILLFITSCM
JMP OUTOFMEMORY		; No? OOM
STILLFITSCM RTS
;###################################
;###################################
QUICKCOPY	LDA TMP_REG		; a self modifying copy routine
STA TMEM+1
LDA TMP_REG+1
STA TMEM+2
LDA TMP2_REG
STA SMEM+1
LDA TMP2_REG+1
STA SMEM+2
LDY #$0
LDX TMP3_REG
BNE QCLOOP
LDA TMP3_REG+1
BEQ QCEXIT		; length is null, nothing to copy
QCLOOP
SMEM		LDA $0000,Y
TMEM		STA $0000,Y
INY
BNE YNOOV
INC TMEM+2
INC SMEM+2
YNOOV		DEX
BNE QCLOOP
LDA TMP3_REG+1
BEQ QCEXIT
DEC TMP3_REG+1
JMP QCLOOP
QCEXIT		RTS
;###################################
;###################################
COPYSTRING	STA TMP2_ZP
STY TMP2_ZP+1
CPY TMP_ZP+1
BNE CONTCOPY
LDA TMP2_ZP
CMP TMP_ZP
BNE CONTCOPY
RTS					; A copy from a variable into the same instance is pointless an will be ignored.
CONTCOPY	JSR COMPACT			; Do a GC if needed
LDY #0
STY TMP_FLAG
LDA (TMP_ZP),Y
BNE NOTEMPTYSTR
LDA #<EMPTYSTR		; The source is empty? Then assign the empty string constant instead
STA TMP_ZP
LDA #>EMPTYSTR
STA TMP_ZP+1
JMP ISCONST
NOTEMPTYSTR	TAX					; Store the length of the source in X...this is valid until right to the end, where it's not longer used anyway
LDA (TMP2_ZP),Y
STA TMP3_ZP
INY
LDA (TMP2_ZP),Y
STA TMP3_ZP+1
DEY
LDA TMP_ZP+1		; Check if the source is a constant (upper bound). If so, don't copy it but just point to it
CMP #>CONSTANTS_END
BEQ CHECKLOW1
BCS INVAR
JMP CHECKNEXT
CHECKLOW1	LDA TMP_ZP
CMP #<CONSTANTS_END
BCS INVAR
CHECKNEXT	LDA TMP_ZP+1		; Check if the source is a constant (lower bound). If so, don't copy it but just point to it
CMP #>CONSTANTS
BEQ CHECKLOW3
BCC INVAR
JMP ISCONST
CHECKLOW3	LDA TMP_ZP
CMP #<CONSTANTS
BCC INVAR			; No, it's not a constant. It's something from lower memory...
ISCONST		JSR CHECKLASTVAR	; Reclaim formerly used memory if possible
LDA TMP_ZP
STA (TMP2_ZP),Y		; Yes, it's a constant...
INY
LDA TMP_ZP+1
STA (TMP2_ZP),Y
LDA HIGHP			; Reset the memory pointer to the last assigned one. Everything that came later has to be temp. data
STA STRBUFP
LDA HIGHP+1
STA STRBUFP+1
RTS
INVAR		INY
LDA (TMP2_ZP),Y		; Check if the target is currently pointing into the constant pool. If so, don't update that memory by accident
CMP #>CONSTANTS_END
BEQ CHECKLOW2
BCS INVAR2
JMP PUPDATEPTR
CHECKLOW2	DEY
LDA (TMP2_ZP),Y
CMP #<CONSTANTS_END
BCS INVAR2
JMP PUPDATEPTR
INVAR2		LDY #0			; The target is somewhere in var memory (i.e. not in constant memory)
LDA (TMP3_ZP),Y
STA TMP_REG
TXA
CMP TMP_REG		; Compare the string-to-copy's length (in A) with the variable's current one (in TMP_REG)
BEQ UPDATEHP2	; does the new string fit into the old memory location (i.e. is it the same length)?
; Shorter strings would fit as well, but aren't stored this way or otherwise, the result would
; be some stray memory chunk that none could identify properly when doing a GC
PUPDATEPTR	JSR CHECKLASTVAR
LDY #1			; No? Then new memory has to be used. Update the "highest memory position" in the process
STY TMP_FLAG	; to regain temp. memory used for non-assigned strings like for printing and such...
JMP UPDATEPTR	; ...we set a flag here to handle this case later
UPDATEHP2	LDA HIGHP		; Update the memory pointer to the last assigned position, reclaim some memory this way
STA STRBUFP
LDA HIGHP+1
STA STRBUFP+1
JMP STRFITS
COPYONLY	LDY #0
STY TMP_FLAG
JMP CHECKMEM
ALTCOPY		JMP COPYSTRING2
UPDATEPTR	LDA TMP_ZP+1	; Check if the new string comes after or equals highp, which indicates that it can be
CMP HIGHP+1		; "copied down". This is another routine, because of...reasons...
BEQ CHECKXT1
BCS ALTCOPY
JMP CHECKMEM
CHECKXT1	LDA TMP_ZP
CMP HIGHP
BCS ALTCOPY
CHECKMEM
MEMOK		LDY #0
LDA STRBUFP		; no, then copy it into string memory later...
STA (TMP2_ZP),Y	; ...but update the string memory pointer now
STA TMP3_ZP
LDA STRBUFP+1
INY
STA (TMP2_ZP),Y
STA TMP3_ZP+1
TXA
CLC
ADC STRBUFP
PHP
CLC
ADC #3
STA STRBUFP
BCC NOCS1
INC STRBUFP+1
NOCS1		PLP
BCC STRFITS
INC STRBUFP+1
STRFITS		LDY TMP_FLAG	; Check if the pointer to the highest mem addr is used by an actual string
BEQ NOHPUPDATE	; has to be updated and do that...
LDA HIGHP+1
CMP STRBUFP+1
BCC UPDATEHIGHP
BEQ CHECKNEXTHP
JMP NOHPUPDATE
CHECKNEXTHP	LDA HIGHP
CMP	STRBUFP
BCC UPDATEHIGHP
JMP NOHPUPDATE
UPDATEHIGHP	LDA STRBUFP
STA HIGHP
LDA STRBUFP+1
STA HIGHP+1		; set new pointer
JSR REMEMBERLASTVAR
JSR STOREVARREF
NOHPUPDATE	LDY #0
LDA (TMP_ZP),Y	; Set the new length...
STA (TMP3_ZP),Y
TAY				; Copy length to Y
BEQ	EXITCOPY	; Length 0? nothing to copy then...
LOOP		LDA (TMP_ZP),Y	; Copy the actual string
STA (TMP3_ZP),Y
DEY
BNE LOOP
EXITCOPY	RTS
;###################################
;###################################
; Special copy routine that handles the case that a string is >highp but might interleave with the temp data that has to be copied into it.
; Therefor, this routine copies from lower to higher addresses and not vice versa like the simpler one above.
COPYSTRING2	LDY #0
LDA (TMP_ZP),Y
STA TMP_REG
TAX
LDA HIGHP
STA TMP3_ZP
STA (TMP2_ZP),Y
LDA HIGHP+1
STA TMP3_ZP+1
INY
STA (TMP2_ZP),Y
JSR REMEMBERLASTVAR
; Do a quick test, if a real copy is needed or if the memory addrs are equal anyway?
; This introduces some overhead but according to my tests, its actually faster this way.
LDA TMP_ZP
CMP TMP3_ZP
BNE DOLOOP
LDA TMP_ZP+1
CMP TMP3_ZP+1
BEQ SKIPCP2
DOLOOP		DEY
TXA
STA (TMP3_ZP),Y
INY
ASLOOP		LDA (TMP_ZP),Y
STA (TMP3_ZP),Y
INY
DEX
BNE	ASLOOP
SKIPCP2		LDA HIGHP
CLC
ADC TMP_REG
PHP
CLC
ADC #3
STA HIGHP
STA STRBUFP
BCC SKIPLOWAS1
INC HIGHP+1
SKIPLOWAS1	PLP
BCC SKIPLOWAS2
INC HIGHP+1
SKIPLOWAS2	LDA HIGHP+1
STA STRBUFP+1
JSR STOREVARREF
RTS
;###################################
;###################################
; Checks if this variable is the same one that has been stored last. If so, we can reclaim its memory first.
CHECKLASTVAR
LDA TMP2_ZP
CMP LASTVAR
BNE NOTSAMEVAR
LDA TMP2_ZP+1
CMP LASTVAR+1
BNE NOTSAMEVAR
LDA LASTVARP			; The target is the last string that has been added. We can free it's currently used memory then.
STA HIGHP
STA STRBUFP
LDA LASTVARP+1
STA HIGHP+1
STA STRBUFP+1
NOTSAMEVAR	RTS
;###################################
;###################################
; Stores the last variable reference that has been stored in string memory.
REMEMBERLASTVAR
LDA TMP2_ZP
STA LASTVAR
LDA TMP2_ZP+1
STA LASTVAR+1
LDA TMP3_ZP
STA LASTVARP
LDA TMP3_ZP+1
STA LASTVARP+1	; Remember this variable as the last written one
RTS
;###################################
;###################################
; Appends a reference to the variable at the end of the string in memory for
; easier GC later...
STOREVARREF
TYA
PHA				; Save Y reg
LDA TMP_ZP
PHA
LDA TMP_ZP+1
PHA
LDA HIGHP+1
STA TMP_ZP+1
LDA HIGHP
SEC
SBC #2
STA TMP_ZP
BCS RLVNOOV
DEC TMP_ZP+1
RLVNOOV		LDA TMP2_ZP
LDY #0
STA (TMP_ZP),Y
LDA TMP2_ZP+1
INY
STA (TMP_ZP),Y	; Store the reference to the variable that uses this chunk of memory at the end of the string
PLA
STA TMP_ZP+1
PLA
STA TMP_ZP		; ...restore TMP_ZP
PLA
TAY				; ...restore Y reg
RTS
;###################################
;###################################
REROUTE		LDA CMD_NUM		; if CMD mode, enable channel output
BEQ REROUTECMD
TAX
STA CHANNEL
JMP CHKOUT
REROUTECMD	RTS
;###################################
;###################################
RESETROUTE	LDA CMD_NUM		; if CMD mode, disable channel output
BEQ RESETROUTECMD
JMP CLRCHNEW
RESETROUTECMD
RTS
;###################################
;###################################
INTOUT		JMP REALOUT
;###################################
;###################################
REALOUT		JSR REROUTE
LDA X_REG
BNE RNOTNULL
JMP PRINTNULL
RNOTNULL	JSR XREGFAC
REALOUTINT	LDY #0
JSR FACSTR
LDY #0
LDA LOFBUF,Y
STRLOOPRO	JSR CHROUT
INY
LDA LOFBUF,Y
BNE STRLOOPRO
JSR RESETROUTE
RTS
;###################################
;###################################
LINEBREAK	JSR REROUTE
LDA #$0D
JSR CHROUT
JMP RESETROUTE
;###################################
;###################################
PRINTNULL	JSR REROUTE
LDA #$20
JSR CHROUT
LDA #$30
JSR CHROUT
JMP RESETROUTE
;###################################
;###################################
STROUTWL	STA A_REG
STY A_REG+1
STROUT		JSR REROUTE
LDA A_REG
STA INDEX1
LDA A_REG+1
STA INDEX1+1
LDY #0
LDA (INDEX1),Y
TAX
INC INDEX1
BNE PRINTSTR
INC INDEX1+1
PRINTSTR	JSR PRINTSTRS
LDA HIGHP			; Update the memory pointer to the last actually assigned one
STA STRBUFP
LDA HIGHP+1
STA STRBUFP+1
JSR RESETROUTE
RTS
;###################################
;###################################
SINGLECHROUTMAX
JSR SINGLECHROUT
JMP COMPACTMAX
;###################################
;###################################
SINGLECHROUT
STA TMP_ZP
JSR REROUTE
LDA TMP_ZP
JSR CHROUT
JMP RESETROUTE
;###################################
;###################################
STROUTBRKWL	STA A_REG
STY A_REG+1
STROUTBRK	JSR REROUTE
LDA A_REG
STA INDEX1
LDA A_REG+1
STA INDEX1+1
LDY #0
LDA (INDEX1),Y
TAX
INC INDEX1
BNE PRINTSTR2
INC INDEX1+1
PRINTSTR2	JSR PRINTSTRS
LDA HIGHP			; Update the memory pointer to the last actually assigned one
STA STRBUFP
LDA HIGHP+1
STA STRBUFP+1
LDA #$0D
JSR CHROUT
JMP RESETROUTE 	;RTS is implicit
;###################################
;###################################
ARRAYACCESS_STRING
JSR XREGFAC
JSR FACINT
ARRAYACCESS_STRING_INT
LDX G_REG
STX TMP_ZP
LDX G_REG+1
STX TMP_ZP+1
TAX
TYA
ASL
STA TMP2_ZP
TXA
ROL
STA TMP2_ZP+1
LDA TMP_ZP
CLC
ADC TMP2_ZP
STA TMP_ZP
LDA TMP_ZP+1
ADC TMP2_ZP+1
STA TMP_ZP+1
LDY #0
LDA (TMP_ZP),Y
STA A_REG
INY
LDA (TMP_ZP),Y
STA A_REG+1
RTS
;###################################
;###################################
ARRAYSTORE_STRING
JSR XREGFAC
JSR FACINT
ARRAYSTORE_STRING_INT
LDX G_REG
STX TMP_ZP
LDX G_REG+1
STX TMP_ZP+1
TAX
TYA
ASL
STA TMP2_ZP
TXA
ROL
STA TMP2_ZP+1
LDA TMP_ZP
CLC
ADC TMP2_ZP
TAX
LDA TMP_ZP+1
ADC TMP2_ZP+1
TAY
LDA A_REG
STA TMP_ZP
LDA A_REG+1
STA TMP_ZP+1
TXA
JMP COPYSTRING	; RTS is implicit
;###################################
;###################################
ADJUSTSTACK LDA FORSTACKP	; Adjust the FORSTACK in case a new loop uses an unclosed old one (i.e. the code jumped out of that loop with goto)
STA TMP_ZP
LDA FORSTACKP+1
STA TMP_ZP+1
ADSEARCHFOR	LDA TMP_ZP
CMP #<FORSTACK
BNE ADJUST2
LDA TMP_ZP+1
CMP #>FORSTACK
BNE ADJUST2
RTS				; Start of Stack reached? Return
ADJUST2		LDA TMP_ZP
SEC
SBC #2
STA TMP_ZP
BCS ADNOPV1N1
DEC TMP_ZP+1
ADNOPV1N1	LDY #0
LDA (TMP_ZP),Y
BNE ADNOGOSUB
RTS				; Encountered a GOSUB on the way? Then return (is this correct?)
ADNOGOSUB
INY
LDA TMP_ZP
SEC
SBC (TMP_ZP),Y
STA TMP_ZP
BCS ADNOPV1N2
DEC TMP_ZP+1
ADNOPV1N2	DEY
LDA A_REG
ADCMPFOR	CMP (TMP_ZP),Y
BNE ADSEARCHFOR
LDA A_REG+1
INY
CMP (TMP_ZP),Y
BEQ ADFOUNDFOR
JMP ADSEARCHFOR
ADLOW0		LDX A_REG+1
BEQ ADFOUNDFOR
BNE ADCMPFOR
ADFOUNDFOR	LDA TMP_ZP		; Adjust the stack so that it points onto the last entry for the "new" loop variable
STA FORSTACKP
LDA TMP_ZP+1
STA FORSTACKP+1
RTS
;###################################
;###################################
INITFOR		JSR ADJUSTSTACK
LDA FORSTACKP
STA TMP_ZP
LDA FORSTACKP+1
STA TMP_ZP+1
LDY #0
LDA A_REG
STA (TMP_ZP),Y
INY
LDA A_REG+1
STA (TMP_ZP),Y
INY
LDA JUMP_TARGET
STA (TMP_ZP),Y
INY
LDA JUMP_TARGET+1
STA (TMP_ZP),Y
INY
STY TMP3_ZP
JSR INCTMPZP
JSR POPREAL
LDX TMP_ZP
LDY TMP_ZP+1
; FAC to (X/Y)
JSR FACMEM
JSR SGNFAC
STA TMP_FLAG
LDY #5
STY TMP3_ZP
JSR INCTMPZP
JSR POPREAL
LDX TMP_ZP
LDY TMP_ZP+1
; FAC to (X/Y)
JSR FACMEM
LDY #5
STY TMP3_ZP
JSR INCTMPZP
LDY #0
LDA TMP_FLAG
STA (TMP_ZP),Y
INY
LDA #1
STA (TMP_ZP),Y
INY
LDA #15
STA (TMP_ZP),Y
LDY #3
STY TMP3_ZP
JSR INCTMPZP
LDA TMP_ZP
STA FORSTACKP
LDA TMP_ZP+1
STA FORSTACKP+1
RTS
;###################################
;###################################
NEXT		LDA FORSTACKP
STA TMP_ZP
LDA FORSTACKP+1
STA TMP_ZP+1
SEARCHFOR	LDA TMP_ZP+1
STA TMP3_REG+1
LDA TMP_ZP
STA TMP3_REG
SEC
SBC #2
STA TMP_ZP
BCS NOPV1N1
DEC TMP_ZP+1
NOPV1N1		LDY #0
LDA (TMP_ZP),Y
BNE NOGOSUB
JMP NEXTWOFOR
NOGOSUB
INY
LDA TMP_ZP
SEC
SBC (TMP_ZP),Y
STA TMP_ZP
BCS NOPV1N2
DEC TMP_ZP+1
NOPV1N2		DEY
LDA A_REG
BEQ LOW0
CMPFOR		CMP (TMP_ZP),Y
BNE SEARCHFOR
LDA A_REG+1
INY
CMP (TMP_ZP),Y
BEQ FOUNDFOR
JMP SEARCHFOR
LOW0		LDX A_REG+1
BEQ FOUNDFOR
BNE CMPFOR
FOUNDFOR	LDA TMP_ZP
STA TMP2_REG
LDA TMP_ZP+1
STA TMP2_REG+1
VARREAL
LDY #0
STY A_REG+1 ; Has to be done anyway...so we can do it here as well
LDA (TMP_ZP),Y
TAX
INY
LDA (TMP_ZP),Y
TAY
TXA
JSR REALFAC
CALCNEXT	LDA TMP_ZP
CLC
ADC #4
STA TMP_ZP
BCC NOPV2IN
INC TMP_ZP+1
NOPV2IN		STA TMP_REG
LDY TMP_ZP+1
STY TMP_REG+1
JSR FASTFADDMEM
; Optimizer rule: Fast FADD (MEM)/1
LDA TMP2_REG
STA TMP_ZP
LDA TMP2_REG+1
STA TMP_ZP+1
STOREREAL
LDY #0
LDA (TMP_ZP),Y
TAX
INY
LDA (TMP_ZP),Y
TAY
JSR FACMEM	;FAC TO (X/Y)
CMPFOR		LDA #5
STA TMP3_ZP
LDA TMP_REG
CLC
ADC #5
STA TMP_REG
BCC NOPV3
INC TMP_REG+1
NOPV3		LDY TMP_REG+1
JSR CMPFAC 	;CMPFAC
BEQ LOOPING
PHA
LDY #14
LDA (TMP_ZP),Y
BEQ STEPZERO
ROL
BCC STEPPOS
STEPNEG		PLA
ROL
BCC LOOPING
BCS EXITLOOP
STEPPOS		PLA
ROL
BCC EXITLOOP
LOOPING		LDA TMP3_REG
STA FORSTACKP
LDA TMP3_REG+1
STA FORSTACKP+1
LDA TMP2_REG
CLC
ADC #2
STA TMP2_REG
BCC NOPV4IN
INC TMP2_REG+1
NOPV4IN		LDY #0
STY A_REG
STA TMP_ZP
LDA TMP2_REG+1
STA TMP_ZP+1
LDA (TMP_ZP),Y
STA JUMP_TARGET
INY
LDA (TMP_ZP),Y
STA JUMP_TARGET+1
RTS
STEPZERO	PLA
JMP LOOPING
EXITLOOP	LDA TMP2_REG
STA FORSTACKP
LDA TMP2_REG+1
STA FORSTACKP+1
LDA #1
STA A_REG
RTS
;###################################
;###################################
RETURN		LDA FORSTACKP
STA TMP_ZP
LDA FORSTACKP+1
STA TMP_ZP+1
SEARCHGOSUB	LDA TMP_ZP
SEC
SBC #2
STA TMP_ZP
BCS NOPV1SG
DEC TMP_ZP+1
NOPV1SG		LDY #0
LDA (TMP_ZP),Y
BEQ FOUNDGOSUB
INY
LDA (TMP_ZP),Y
STA TMP3_ZP
LDA TMP_ZP
SEC
SBC (TMP_ZP),Y
STA TMP_ZP
BCS NOPV1GS
DEC TMP_ZP+1
NOPV1GS		JMP SEARCHGOSUB
FOUNDGOSUB
LDA TMP_ZP
STA FORSTACKP
LDA TMP_ZP+1
STA FORSTACKP+1
RTS
;###################################
;###################################
GOSUB		LDA FORSTACKP
STA TMP_ZP
LDA FORSTACKP+1
STA TMP_ZP+1
LDY #0
TYA
STA (TMP_ZP),Y
INY
STA (TMP_ZP),Y
INY
TYA
CLC
ADC TMP_ZP
STA FORSTACKP
BCC GOSUBNOOV
INC FORSTACKP+1
GOSUBNOOV	RTS
;###################################
;###################################
QUEUESIZE	LDY INPUTQUEUEP
LDA #0
JSR INTFAC
JMP FACXREG
;###################################
;###################################
CLEARQUEUE	LDA #$0
STA INPUTQUEUEP
RTS
;###################################
;###################################
READINIT	LDA DATASP
STA TMP3_ZP
LDA DATASP+1
STA TMP3_ZP+1
LDY #$0
LDA (TMP3_ZP),Y
INC TMP3_ZP
BNE READNOOV
INC TMP3_ZP+1
READNOOV	CMP #$FF
BNE MOREDATA
JMP OUTOFDATA
MOREDATA	RTS
;###################################
;###################################
READADDPTR	STX TMP_REG+1
LDA TMP3_ZP
CLC
ADC TMP_REG+1
STA TMP3_ZP
BCC READADDPTRX
INC TMP3_ZP+1
READADDPTRX	RTS
;###################################
;###################################
READSTR		JSR READINIT
CMP #$2
BNE DATA2STR		; It's a number and has to be converted
LDA TMP3_ZP
STA A_REG
LDA TMP3_ZP+1
STA A_REG+1
LDA (TMP3_ZP),Y
CLC
ADC TMP3_ZP
STA TMP3_ZP
BCC READNOOV2
INC TMP3_ZP+1
READNOOV2	JSR NEXTDATA
INC DATASP
BNE READNOOV3
INC DATASP+1
READNOOV3	RTS
;###################################
;###################################
NEXTDATA	LDA TMP3_ZP			; Adjust pointer to the next element
STA DATASP
LDA TMP3_ZP+1
STA DATASP+1
RTS
;###################################
;###################################
DATA2STR	CMP #$1
BEQ DREAL2STR		; It's a floating point number...
CMP #$0
BEQ DATA2STRINT
CMP #$4
BCS DSHORTBYTE
LDA (TMP3_ZP),Y		; It's a byte
TAY
JSR BYTEFAC
LDX #1
JSR READADDPTR
JMP DFAC2STR
DATA2STRINT	LDA (TMP3_ZP),Y		; It's an integer
STA TMP_REG
INY
LDA (TMP3_ZP),Y
LDY TMP_REG
JSR INTFAC
LDX #2
JSR READADDPTR
JMP DFAC2STR
DSHORTBYTE	TAY
JSR BYTEFAC
JMP DFAC2STR
DREAL2STR	LDA TMP3_ZP
LDY TMP3_ZP+1
JSR REALFAC
LDX #5
JSR READADDPTR
DFAC2STR	JSR NEXTDATA
JMP STRINTREAD
;###################################
;###################################
STRINTREAD	LDY #1			; Special INT to STR routine that handles the fact that in case of conversions from data entries, there's no leading blank for positive numbers
JSR FACSTR
LDY #0
STY TMP_ZP+1
LDA #LOFBUF
STA TMP_ZP
DEY
STRLOOPREAD	INY
LDA LOFBUFH,Y
BNE STRLOOPREAD
STY LOFBUF
TYA
TAX			; Length in X
LDA LOFBUFH
CMP #$20
BNE STRREADNP
INC TMP_ZP	; Starts with blank? Remove it...
INC TMP_ZP+1
DEC LOFBUF
LDA LOFBUF
STA LOFBUFH  ; Copy the new length over
DEX			 ; length -1
STRREADNP	LDA #<A_REG
LDY #>A_REG
STA TMP2_ZP
STY TMP2_ZP+1
JMP COPYONLY
;###################################
;###################################
CLEANINPUT	LDY #0				; Processes an input string similar to BASIC's with the only difference that a " at the "wrong" location will be ignored instead of triggering an error
LDX #0
STY STORE1			; Marks "quote-mode", 0 if off, 1 is on
STY STORE2			; Char found, 0 means none, something else means at least one
DEY
CILOOP		INY
LDA $0200,Y
BNE CINOEND
JMP CIEND			; String terminator found, exit
CINOEND		STA STORE3			; store current char
LDA STORE1
BEQ CINOQUOTE		; Not in quote mode...
LDA STORE3
CMP	#$22			; found a quote (in quote mode)?
BNE	CISTILLQUOTE	; no? Then we are still in quote mode
LDA #0				; yes? quote mode off
STA STORE1
JMP CILOOP
CISTILLQUOTE
STA $0200,X
INX
JMP CILOOP
CINOQUOTE	LDA STORE3
CMP	#$22
BNE	CISOMECHAR		; no quote?
CIFIRSTCHAR	LDA #1				; quote?
STA STORE1			; enable quote mode
STA STORE2			; set char flag
JMP CILOOP
CISOMECHAR 	CMP #$3A			; a : then stop evaluating here
BNE	CINOCOLON
JMP CIEND
CINOCOLON	CMP #$2C			; a ,?
BNE CINOCOMMA
LDA #$22			; replace a comma by a ". This will be handled later in the actual input routine
STA $0200,X
INX
LDA #0
STA STORE2			; Reset char flag to 0
JMP CILOOP
CINOCOMMA	CMP #$20			; a blank? Only add this, if char flag is !=0
BNE	CINOSPACE
LDA STORE2			; check char flag
BEQ CINEXT			; Set? Then continue normally
LDA STORE3
CINOSPACE	STA $0200,X
STA STORE2			; update char flag with some value!=0
INX
CINEXT		JMP CILOOP
CIEND		LDA #0
STA $0200,X			; Write terminator...
RTS					; ...and exit
;###################################
;###################################
QMARKOUT1	LDA #1
STA TMP_ZP
JMP QMARKOUT
;###################################
;###################################
QMARKOUT	LDA IOCHANNEL				; only print the ? if it's keyboard/direct input. IOCHANNEL holds the active io device
BNE NOQMARK
JSR REROUTE
LDA #63
LDY TMP_ZP
CPY #2				; print either one or two question marks
BNE ONEQMARK
JSR CHROUT
ONEQMARK	JSR CHROUT
LDA #32
JSR CHROUT
JMP RESETROUTE
NOQMARK		RTS
;###################################
;###################################
INPUTSTR	LDA #$0
INPUTSTR2	STA TMP_REG+1
LDA #$0
STA TMP_REG
STA TMP_FLAG
LDX INPUTQUEUEP
BEQ INPUTNORM
LDA #LOFBUF
LDX #$1
CLC
ADC INPUTQUEUE
STA TMP_ZP
BCC INNONO
LDX #$2
INNONO		STX TMP_ZP+1
DEC	INPUTQUEUEP		; Decrement the queue size
LDY INPUTQUEUE		; Store current offset in Y
STY TMP_REG			; Store the value to subtract it later on
DEY
LDX #$0
SHRINKQ		LDA INPUTQUEUEP
BEQ QUEUEEMPTY
INX
LDA INPUTQUEUE,X	; Copy the queue's content down one entry
DEX
STA INPUTQUEUE,X
INX
CPX INPUTQUEUEP
BNE SHRINKQ
QUEUEEMPTY	JMP ISTRLOOP
INPUTNORM	AND #$FF
JSR INPUT
JSR CLEANINPUT
LDA #LOFBUF
STA TMP_ZP
LDA #$1
STA TMP_ZP+1
LDY #0
DEY
ISTRLOOP	INY
LDA INPUTBUF,Y
TAX
CMP #$22			; found "?  (" is a replacement for , at this stage because " can't occur in an input string while , can)
BNE	ICHECK
STA TMP_FLAG
LDA #$0
STA INPUTBUF,Y			; replace , by the string terminator
LDX INPUTQUEUEP		; load the queue size
BNE	INQUEUENE		; If empty, set at least to one
STA INPUTQUEUE		; ...and set the first index to 0
INX
INQUEUENE	INY
TYA
STA INPUTQUEUE,X	; store the offset in the queue
INX
STX INPUTQUEUEP		; update the queue size
JMP ISTRLOOP		; Back to loop...
ICHECK		TXA					; String terminator?
BNE ISTRLOOP		; No, loop...
LDA TMP_FLAG
BEQ	ISIMPLECOPY
JMP	INPUTSTR
ISIMPLECOPY	TYA
SEC
SBC TMP_REG
LDY #0
STA (TMP_ZP),Y
TAX				; Length in X
LDA TMP_REG+1	; Check for numeric mode
BEQ	INISSTR
RTS
INISSTR		LDA #<A_REG
LDY #>A_REG
STA TMP2_ZP
STY TMP2_ZP+1
JSR COPYONLY
RTS
;###################################
;###################################
INPUTNUMBER	LDA #$1
JSR INPUTSTR2
LDA TMP_ZP
STA INDEX1
LDA TMP_ZP+1
STA INDEX1+1
LDY #0
STY VALTYPE
LDA (INDEX1),Y
STA TMP_REG		; Store the string's length
TAY
INC INDEX1
BNE VALSTR2
INC INDEX1+1
VALSTR2		LDY #$0			; check, if it's a valid number input. This check might not be 100% like the one done by BASIC V2...well, who cares...?!?
DEY
LDX #$0			; bit 0: Number found, bit 1: plus found, bit 2: minus found, bit 3: e found, bit 4: . found
NUMCHKLOOP	INY
CPY TMP_REG
BEQ NUMOK
LDA (INDEX1),Y
CMP #$20
BEQ NUMCHKLOOP	; ignore spaces
CMP #43			; check +
BNE	NOPLUS
TXA
BIT VAL6		; nothing found yet, ok
BNE	CHECKERR
ORA #2
TAX
JMP NUMCHKLOOP
NOPLUS		CMP #45			; check -
BNE	NOMINUS
TXA
BIT VAL6		; nothing found yet, ok
BNE	CHECKERR
ORA #4
TAX
JMP NUMCHKLOOP
NOMINUS		CMP #69			; check -
BNE	NOEEE
TXA
BIT VAL8		; no e found yet, ok
BNE	CHECKERR
ORA #8
AND #249		; +- are allowed after an e again
TAX
JMP NUMCHKLOOP
NOEEE		CMP #46			; check .
BNE	NOPOINT
TXA
BIT VAL24		; no . found yet, ok
BNE	CHECKERR
ORA #16
TAX
JMP NUMCHKLOOP
NOPOINT		CMP #48
BCC	CHECKERR	; <0
CMP #58
BCS CHECKERR	; >9
TXA
ORA #1
TAX
JMP NUMCHKLOOP
VAL1		.BYTE 1
VAL6		.BYTE 6
VAL8		.BYTE 8
VAL24		.BYTE 24
CHECKERR	LDA #<REAL_CONST_MINUS_ONE
STA TMP3_ZP
LDA #>REAL_CONST_MINUS_ONE
STA TMP3_ZP+1
JMP COPY2_XY_XREG
RTS				; Flag error and return
; check, if the input string looked like a number
NUMOK		LDA TMP_REG
JSR VALS
LDA #$0			; flag as number
STA X_REG
JMP FACYREG		; ...and return
;###################################
;###################################
GETSTR		LDA #8
LDY #0
JSR COMPACTF
LDY #0
STY CMD_NUM		; Reset CMD target
JSR GETIN
CMP #0			; Without this compare, it works for disk and keyboard GETs...but not for those from the RS232 port...DOH!
BNE SOMEKEY
NOKEY		LDA #<EMPTYSTR
STA A_REG
LDA #>EMPTYSTR
STA A_REG+1
RTS
SOMEKEY		TAX
LDA STRBUFP
STA TMP_ZP
STA A_REG
LDA STRBUFP+1
STA TMP_ZP+1
STA A_REG+1
LDA #1
LDY #0
STA (TMP_ZP),Y
TXA
LDY #1
STA (TMP_ZP),Y
LDA STRBUFP
CLC
ADC #2
STA STRBUFP
BCC GETSTR1
INC STRBUFP+1
GETSTR1		RTS
;###################################
;###################################
ZEROSET		LDA #0
STA X_REG
STA X_REG+1
STA X_REG+2
STA X_REG+3
STA X_REG+4
RTS
;###################################
;###################################
SEQ			JSR CMPSTR
LDA TMP3_ZP
BNE NOTSEQ
LDA #<REAL_CONST_MINUS_ONE
STA TMP3_ZP
LDA #>REAL_CONST_MINUS_ONE
STA TMP3_ZP+1
JMP COPY2_XY_XREG
NOTSEQ		JMP ZEROSET
;###################################
;###################################
CMPSTR		LDY #0			;Returns 0 if strings are equal, something else otherwise
LDX #1
LDA A_REG
STA TMP_ZP
LDA A_REG+1
STA TMP_ZP+1
LDA B_REG
STA TMP2_ZP
LDA B_REG+1
STA TMP2_ZP+1
CMP TMP_ZP+1
BNE CMPSTRSK1
LDA TMP2_ZP
CMP TMP_ZP
BNE CMPSTRSK1
LDX #0
JMP STRCMPRES
CMPSTRSK1	LDA (TMP_ZP),Y
CMP (TMP2_ZP),Y
BNE STRCMPRES
TAX
BNE NOTZCTR
LDX #0
JMP STRCMPRES
NOTZCTR		INC TMP_ZP
BNE SCSKP1
INC TMP_ZP+1
SCSKP1		INC TMP2_ZP
BNE CMPSTRLOOP
INC TMP2_ZP+1
CMPSTRLOOP	LDA (TMP_ZP),Y
CMP (TMP2_ZP),Y
BNE STRCMPRES
INY
DEX
BNE CMPSTRLOOP
STRCMPRES	STX TMP3_ZP
RTS
;###################################
;###################################
PUSHINT		LDX FPSTACKP
STX TMP2_ZP
LDX FPSTACKP+1
STX TMP2_ZP+1
LDA TMP_ZP
LDY #0
STA (TMP2_ZP),Y
LDA TMP_ZP+1
INY
STA (TMP2_ZP),Y
LDA TMP2_ZP
CLC
ADC #2
STA FPSTACKP
LDA TMP2_ZP+1
ADC #0
STA FPSTACKP+1
RTS
;###################################
;###################################
POPINT		LDA FPSTACKP
SEC
SBC #2
STA FPSTACKP
LDA FPSTACKP+1
SBC #0
STA FPSTACKP+1
LDX FPSTACKP
STX TMP2_ZP
LDX FPSTACKP+1
STX TMP2_ZP+1
LDY #0
LDA (TMP2_ZP),Y
STA TMP_ZP
INY
LDA (TMP2_ZP),Y
STA TMP_ZP+1
RTS
;###################################
;###################################
POPINT2B	LDA FPSTACKP
SEC
SBC #2
STA FPSTACKP
LDA FPSTACKP+1
SBC #0
STA FPSTACKP+1
LDX FPSTACKP
STX TMP2_ZP
LDX FPSTACKP+1
STX TMP2_ZP+1
LDY #0
LDA (TMP2_ZP),Y
STA B_REG
INY
LDA (TMP2_ZP),Y
STA B_REG+1
RTS
;##################################
;##################################
REALFACPUSH	STA TMP_ZP
STY	TMP_ZP+1
LDX FPSTACKP
LDY FPSTACKP+1
STX TMP2_ZP
STY TMP2_ZP+1
LDY #0
LDA (TMP_ZP),Y
STA (TMP2_ZP),Y
INY
LDA (TMP_ZP),Y
STA (TMP2_ZP),Y
INY
LDA (TMP_ZP),Y
STA (TMP2_ZP),Y
INY
LDA (TMP_ZP),Y
STA (TMP2_ZP),Y
INY
LDA (TMP_ZP),Y
STA (TMP2_ZP),Y
LDA FPSTACKP
CLC
ADC #5
STA FPSTACKP
BCC NOPVRFPXX
INC FPSTACKP+1
NOPVRFPXX	RTS
;###################################
;###################################
PUSHREAL	LDX FPSTACKP
LDY FPSTACKP+1
JSR FACMEM
LDA FPSTACKP
CLC
ADC #5
STA FPSTACKP
BCC NOPVPUR
INC FPSTACKP+1
NOPVPUR		RTS
;###################################
;###################################
POPREAL2X	LDA FPSTACKP
SEC
SBC #5
STA FPSTACKP
BCS NOPVPR2X
DEC FPSTACKP+1
NOPVPR2X	LDA FPSTACKP
LDY FPSTACKP+1
JSR REALFAC
JSR XREGARG
RTS
;###################################
;###################################
POPREAL		LDA FPSTACKP
SEC
SBC #5
STA FPSTACKP
BCS NOPVPR
DEC FPSTACKP+1
NOPVPR		LDA FPSTACKP
LDY FPSTACKP+1
JMP REALFAC
;###################################
;###################################
POPREALXREG LDA FPSTACKP
SEC
SBC #5
STA FPSTACKP
BCS NOPVPRXR
DEC FPSTACKP+1
NOPVPRXR	LDA FPSTACKP
LDY FPSTACKP+1
STA TMP_ZP
STY TMP_ZP+1
LDY #$4
LDA (TMP_ZP),Y
STA X_REG+4
STA FACLO
DEY
LDA (TMP_ZP),Y
STA X_REG+3
STA FACMO
DEY
LDA (TMP_ZP),Y
STA X_REG+2
STA FACMOH
DEY
LDA (TMP_ZP),Y
STA X_REG+1
STA FACSGN
ORA #$80
STA FACHO
DEY
LDA (TMP_ZP),Y
STA X_REG
STA FACEXP
STY FACOV
RTS
;###################################
;###################################
SHR			LDA FACEXP
BEQ SHROK
SEC
SBC A_REG
BCS SHROK
LDA #0
STA FACSGN
STA FACLO
STA FACMO
STA FACMOH
STA FACHO
SHROK		STA FACEXP
RTS
;###################################
;###################################
SHL			LDA FACEXP
BEQ SHLOK
CLC
ADC A_REG
BCC SHLOK
LDA #0
STA FACSGN
STA FACLO
STA FACMO
STA FACMOH
STA FACHO
LDA #$FF
SHLOK		STA FACEXP
RTS
;###################################
;###################################
INCTMPZP	LDA TMP_ZP
CLC
ADC TMP3_ZP
STA TMP_ZP
BCC NOPV2
INC TMP_ZP+1
NOPV2		RTS
;###################################
;###################################
ICMP		STY TMP3_ZP
STA TMP3_ZP+1
LDA TMP_ZP+1
CMP TMP3_ZP+1
BNE ICMPNE2
LDA TMP_ZP
CMP TMP3_ZP
ICMPNE		BEQ ICMPEQ
BCS ICMPHIGHER
JMP ICMPLOWER
ICMPNE2		BPL ICMPHIGHER
JMP ICMPLOWER
ICMPEQ		LDA #0
RTS
ICMPLOWER	LDA #$FF
SEC
RTS
ICMPHIGHER	LDA #$01
CLC
RTS
;###################################
;###################################
COPY2_XYA	STA TMP3_ZP
COPY2_XY	STX TMP_ZP
STY TMP_ZP+1
COPY3_XY	LDY #0
LDA (TMP3_ZP),Y
STA (TMP_ZP),Y
INY
LDA (TMP3_ZP),Y
STA (TMP_ZP),Y
INY
LDA (TMP3_ZP),Y
STA (TMP_ZP),Y
INY
LDA (TMP3_ZP),Y
STA (TMP_ZP),Y
INY
LDA (TMP3_ZP),Y
STA (TMP_ZP),Y
RTS
;###################################
;###################################
COPY2_XYA_XREG
STA TMP3_ZP
STY TMP3_ZP+1
COPY2_XY_XREG
LDX #<X_REG		; the pointer to X_REG has to be in X, because the "value already in X"-optimization might expect it to be there! YIKES!
LDY #0
LDA (TMP3_ZP),Y
STA X_REG
INY
LDA (TMP3_ZP),Y
STA X_REG+1
INY
LDA (TMP3_ZP),Y
STA X_REG+2
INY
LDA (TMP3_ZP),Y
STA X_REG+3
INY
LDA (TMP3_ZP),Y
STA X_REG+4
RTS
;###################################
;###################################
COPY2_XYA_CREG
STA TMP3_ZP
STY TMP3_ZP+1
COPY2_XY_CREG
LDX #<C_REG		; the pointer to C_REG has to be in X, because the "value already in X"-optimization might expect it to be there! YIKES!
LDY #0
LDA (TMP3_ZP),Y
STA C_REG
INY
LDA (TMP3_ZP),Y
STA C_REG+1
INY
LDA (TMP3_ZP),Y
STA C_REG+2
INY
LDA (TMP3_ZP),Y
STA C_REG+3
INY
LDA (TMP3_ZP),Y
STA C_REG+4
RTS
;###################################
;###################################
COPY2_XYA_YREG
STA TMP3_ZP
STY TMP3_ZP+1
COPY2_XY_YREG
LDX #<Y_REG		; the pointer to Y_REG has to be in X, because the "value already in X"-optimization might expect it to be there! YIKES!
LDY #0
LDA (TMP3_ZP),Y
STA Y_REG
INY
LDA (TMP3_ZP),Y
STA Y_REG+1
INY
LDA (TMP3_ZP),Y
STA Y_REG+2
INY
LDA (TMP3_ZP),Y
STA Y_REG+3
INY
LDA (TMP3_ZP),Y
STA Y_REG+4
RTS
;###################################
;###################################
COPY_XREG2YREG
LDA X_REG
STA Y_REG
LDA X_REG+1
STA Y_REG+1
LDA X_REG+2
STA Y_REG+2
LDA X_REG+3
STA Y_REG+3
LDA X_REG+4
STA Y_REG+4
RTS
;###################################
;###################################
<IF !BIGRAM>
FACWORD
LDA FACEXP			; Check if there's a -0 in FAC1
BNE DOFACWORD
STA FACSGN			; make sure that it's not -0
DOFACWORD:
JMP XFACWORD
</IF>
;###################################
;###################################
ONETOFAC    LDX #129
STX FAC
DEX
STX FAC+1
LDX #0
STX FAC+2
STX FAC+3
STX FAC+4
STX FAC+5
STX FAC+6
RTS
;###################################
;###################################
FASTAND		LDA ARGEXP			; Check ARG for 0
BNE CHECKFAC
STA FACSGN			; if so, set FAC to 0 and exit
STA FACLO
STA FACMO
STA FACMOH
STA FACHO
STA FACEXP
RTS
CHECKFAC	LDA FACEXP			; Check if there's a -1 in FAC1
BNE FACNOTNULL
STA FACSGN			; make sure that it's not -0
RTS				; FAC is 0, then exit
FACNOTNULL	CMP #$81
BNE NORMALAND
LDA FACHO
CMP #$80
BNE NORMALAND
LDA FACMOH
BNE NORMALAND
LDA FACMO
BNE NORMALAND
LDA FACLO
BNE NORMALAND
LDA FACSGN
ROL
BCC NORMALAND
LDA ARGEXP			; Check if there's a -1 in ARG
CMP #$81
BNE NORMALAND
LDA ARGHO
CMP #$80
BNE NORMALAND
LDA ARGMOH
BNE NORMALAND
LDA ARGMO
BNE NORMALAND
LDA ARGLO
BNE NORMALAND
LDA ARGSGN
ROL
BCC NORMALAND
RTS				; both, FAC1 and ARG contain -1...then we leave FAC1 untouched and return
NORMALAND	JMP ARGAND
;###################################
;###################################
FASTOR		LDA FACEXP			; Check FAC for 0
BNE CHECKFACOR
LDA ARGEXP			; if so, is ARG = 0 as well?
BNE CHECKARGOR	; no, continue with ARG (FAC is still 0 here)
LDA #0
STA FACSGN			; make sure that the negative flag is deleted in this case...
RTS				; yes? Then we leave FAC untouched
CHECKFACOR	LDA FACEXP			; Check if there's a -1 in FAC1
CMP #$81
BNE NORMALOR
LDA FACHO
CMP #$80
BNE NORMALOR
LDA FACMOH
BNE NORMALOR
LDA FACMO
BNE NORMALOR
LDA FACLO
BNE NORMALOR
LDA FACSGN
ROL
BCC NORMALOR
CHECKARGOR	LDA ARGEXP			; Check if there's a -1 in ARG
BNE CHECKARGOR2
RTS 			; ARG is actually 0? Then the value of FAC doesn't change. We can exit here
CHECKARGOR2	CMP #$81
BNE NORMALOR
LDA ARGHO
CMP #$80
BNE NORMALOR
LDA ARGMOH
BNE NORMALOR
LDA ARGMO
BNE NORMALOR
LDA ARGLO
BNE NORMALOR
LDA ARGSGN
AND #$80
CMP #$80
BNE NORMALOR
JMP ARGFAC		; ARG is 1, so just copy it to FAC and exit (implicit)
NORMALOR	JMP FACOR
;###################################
;###################################
LOCKCHANNEL
PHA
LDA #$FF
STA CHLOCKFLAG
PLA
RTS
;##################################
;##################################
UNLOCKCHANNEL
PHA
LDA #0
STA CHLOCKFLAG
PLA
JMP CLRCH
;###################################
;###################################
INITOUTCHANNEL
LDA CHLOCKFLAG
BEQ INITOUT2
CMP #$FF
BNE SKIPINITCH
INITOUT2
LDA #<C_REG
LDY #>C_REG
JSR REALFAC
JSR FACWORD
TYA
TAX
CPX CMD_NUM
BNE CMDNEQUAL
LDY #0
STY CMD_NUM			; Reset CMD channel
CMDNEQUAL	STA CHANNEL
STA CHLOCKFLAG
JMP CHKOUT
SKIPINITCH
RTS
;###################################
;###################################
INITINCHANNEL
LDA IOCHANNEL
STA STORE1+1
LDA #1
STA IOCHANNEL		; Something that's not the screen...that's enough for the check the CRSRRIGHT does...
LDA #<C_REG
LDY #>C_REG
JSR REALFAC
JSR FACWORD
TYA
TAX
STA CHANNEL
STA CHLOCKFLAG
JMP CHKIN
RTS
;###################################
;###################################
CLRCHNEW
LDA CHLOCKFLAG
BNE SKIPCLRCH
JMP CLRCH
SKIPCLRCH
RTS
;###################################
;###################################
INPUTSTRCHANNEL
JSR INITINCHANNEL
JSR INPUTSTR
JMP CLRINCH
;###################################
;###################################
INPUTNUMBERCHANNEL
JSR INITINCHANNEL
JSR INPUTNUMBER
JMP CLRINCH
;###################################
;###################################
STROUTCHANNEL
JSR INITOUTCHANNEL
JSR STROUT
JMP CLRCHNEW
;###################################
;###################################
CLRINCH		JSR CLRCH
LDA STORE1+1
STA IOCHANNEL
RTS
;###################################
;###################################
CHECKCMD	LDA CMD_NUM		; if CMD mode, then print an additional space
BEQ NOCMD
JSR REROUTE
LDA #$20
JMP CHROUT
JSR RESETROUTE
NOCMD		RTS
;###################################
;###################################
LOAD		JSR SETNAMEPRT
LDA #$0
STA VERCHK		; reset Load/Verify-Flag
STA STATUS		; reset status
LOADINT
<IF BOOST>
JSR BOOSTOFF
</IF>
JSR XREGFAC
JSR FACWORD
STY DEVICENUM	; Store device number
JSR YREGFAC		; read secondary address
JSR FACWORD
TYA
BNE LOADBAS
LDA BASICSTART	; secondary address 0, load to basic start
STA LOADEND
LDA BASICSTART+1
STA LOADEND+1
LDA #0
JMP SKPBAS
LOADBAS		LDA #1			; set secondary address to 1, if not 0
SKPBAS		STA SECADDR
LDA VERCHK		; restore these for load call (which sets them again)
LDX LOADEND
LDY LOADEND+1
JSR LOADXX
LDA STATUS
BEQ LOADOK		; Actually, this is for the X16. The C64 ROM doesn't set it to 0, but to 64...shouldn't be an issue though...
CMP #LOADOK_STATUS
BEQ LOADOK
JMP FILENOTFOUND
LOADOK
<IF BOOST>
JSR BOOSTON
</IF>
RTS
;###################################
;###################################
OPEN		JSR SETEMPTYSTR	; Prepare with an empty string
JSR YREGFAC
JSR FACWORD
STY TMP_REG		; store parameter count in TMP_REG
JSR XREGFAC
JSR FACWORD
STY LOGICADDR	; store logical address
DEC TMP_REG
BEQ ALLPARAMS
LDA #<C_REG
LDY #>C_REG
JSR REALFAC
JSR FACWORD
STY DEVICENUM	; store device number
DEC TMP_REG
BEQ ALLPARAMS
LDA #<D_REG
LDY #>D_REG
JSR REALFAC
JSR FACWORD
STY SECADDR		; store secondary address
DEC TMP_REG
BEQ ALLPARAMS
JSR SETNAMEPRT
ALLPARAMS
<IF BOOST>
JSR BOOSTOFF
</IF>
JSR OPENCH
BCS OPENERR
RTS
OPENERR		STA TMP2_ZP
LDA LOGICADDR
JSR CLOSECH
<IF BOOST>
JSR BOOSTON
</IF>
LDX TMP2_ZP
JMP ERRALL
;###################################
;###################################
SETEMPTYSTR
LDA #<EMPTYSTR
STA FILEADDR
LDA #>EMPTYSTR
STA FILEADDR+1
LDA #0
STA FILELEN
STA LOGICADDR
STA DEVICENUM
STA SECADDR
RTS
;###################################
;###################################
SETNAMEPRT	LDA G_REG
LDY G_REG+1
STA TMP_ZP
STY TMP_ZP+1
LDY #0
LDA (TMP_ZP),Y	; get string parameter length
STA FILELEN
INC G_REG
BNE SNPNOOV
INC G_REG+1
SNPNOOV		LDA G_REG
LDY G_REG+1
STA FILEADDR		; low byte of string parameter
STY FILEADDR+1	; high byte of string parameter
RTS
;###################################
;###################################
CLOSE		JSR XREGFAC
JSR FACWORD
TYA				; file number into A
JSR CLOSECH
<IF BOOST>
JSR BOOSTON
</IF>
RTS
;###################################
;###################################
FIDEX		CPY #0
BNE FIDEXNOV
SEC
SBC #$1
FIDEXNOV	DEY
JSR INTFAC
JMP FACXREG
;###################################
;###################################
SUPERFIINX	INY
BNE SFIINXNOV
CLC
ADC #$1
CMP #$80
BNE SFIINXNOV
JMP ILLEGALQUANTITY
SFIINXNOV	RTS
;###################################
;###################################
NEXTWOFOR
<IF BOOST>
JSR BOOSTDIASBLE
</IF>
LDX #$0A
JMP ERRALL
;###################################
;###################################
OUTOFDATA
<IF BOOST>
JSR BOOSTDIASBLE
</IF>
LDX #$0D
JMP ERRALL
;###################################
;###################################
OUTOFMEMORY
<IF BOOST>
JSR BOOSTDIASBLE
</IF>
LDX #$10
JMP ERRALL
;###################################
;###################################
STRINGTOOLONG
<IF BOOST>
JSR BOOSTDIASBLE
</IF>
LDX #$17
JMP ERRALL
;###################################
;###################################
ILLEGALQUANTITY
<IF BOOST>
JSR BOOSTDIASBLE
</IF>
JMP ERRIQ
;###################################
;###################################
EXTRAIGNORED
<IF BOOST>
JSR BOOSTDIASBLE
</IF>
JMP ERREI
;###################################
;###################################
FILENOTFOUND
JSR CLRCHNEW
JMP FNFOUT
FNFTXT		.TEXT "i/o error"
.BYTE $0
FNFOUT		LDY #0
FNFOUT2		LDA FNFTXT,Y
BEQ FNFST
INY
JSR CHROUT
JMP FNFOUT2
FNFST		LDY STATUS
LDA #0
JSR INTFAC
JMP REALOUTINT
;###################################
;###################################
SETUPMULTIPARS
LDA BASICPOINTER
STA BPOINTER_TMP
LDA BASICPOINTER+1
STA BPOINTER_TMP+1
LDA #<BASICBUFFER
STA BASICPOINTER
LDA #>BASICBUFFER
STA BASICPOINTER+1
LDA #0
STA BASICTEXTP
RTS
;###################################
;###################################
COPY_AND_ADDCOLON
JSR COPY2_XYA_XREG
JSR COPYREALPAR
JMP ADDCOLON
;###################################
;###################################
SYS_AND_PULLDOWN
JSR COPY2_XYA_XREG
JSR SYSTEMCALLDYN
JMP PULLDOWNMULTIPARS
;###################################
;###################################
COPYREALPAR
JSR ADDKOMMA
COPYREALPARNK
JSR XREGFAC
LDY #1
JSR FACSTR
LDY #0
DEY
CRPSTRLOOP	INY
LDA LOFBUFH,Y
BNE CRPSTRLOOP
STY LOFBUF
TYA
TAX			; Length in X
LDA #<LOFBUFH
STA TMP_ZP
LDA #>LOFBUFH
STA TMP_ZP+1
LDY #0
LDA (TMP_ZP),Y
CMP #$20
BNE CRPOK
DEX
INC TMP_ZP
BNE CRPOK
INC TMP_ZP+1
CRPOK		JSR BASICCOPY
RTS
;###################################
;###################################
ADDGENERIC
LDY BASICTEXTP
STA (TMP2_ZP),Y
INY
STY BASICTEXTP
RTS
;###################################
;###################################
ADDKOMMA
JSR BASICTEXTINIT
LDA #$2C
JMP ADDGENERIC
;###################################
;###################################
ADDCOLON
JSR BASICTEXTINIT
LDA #$3A
JMP ADDGENERIC
;###################################
;###################################
PULLDOWNMULTIPARS
LDA BPOINTER_TMP
STA BASICPOINTER
LDA BPOINTER_TMP+1
STA BASICPOINTER+1
RTS
;###################################
;###################################
BASICTEXTINIT
LDA #<BASICBUFFER
STA TMP2_ZP
LDA #>BASICBUFFER
STA TMP2_ZP+1
RTS
;###################################
;###################################
BASICCOPY
LDY BASICTEXTP
LDA #0
STA TMP2_REG
JSR BASICTEXTINIT
BASICCOPYLOOP
TYA
PHA
LDY TMP2_REG
LDA (TMP_ZP),Y
STA TMP2_REG+1
INY
STY TMP2_REG
PLA
TAY
LDA TMP2_REG+1
STA (TMP2_ZP),Y
INY
DEX
BNE BASICCOPYLOOP
STY BASICTEXTP
RTS
;###################################
;###################################
FACXREG		LDA FACLO
STA X_REG+4
LDA FACMO
STA X_REG+3
LDA FACMOH
STA X_REG+2
LDA FACSGN
ORA #$7F
AND FACHO
STA X_REG+1
LDA FACEXP
STA X_REG
LDA #0			; Why? Don't know...the ROM does this as well...
STA FACOV
RTS
;###################################
;###################################
FACYREG		LDA FACLO
STA Y_REG+4
LDA FACMO
STA Y_REG+3
LDA FACMOH
STA Y_REG+2
LDA FACSGN
ORA #$7F
AND FACHO
STA Y_REG+1
LDA FACEXP
STA Y_REG
LDA #0			; Why? Don't know...the ROM does this as well...
STA FACOV
RTS
;###################################
;###################################
XREGFAC		LDA X_REG+4
STA FACLO
LDA X_REG+3
STA FACMO
LDA X_REG+2
STA FACMOH
LDA X_REG+1
STA FACSGN
ORA #$80
STA FACHO
LDA X_REG
STA FACEXP
LDA #0
STA FACOV
RTS
;###################################
;###################################
XREGARG		LDA X_REG+4
STA ARGLO
LDA X_REG+3
STA ARGMO
LDA X_REG+2
STA ARGMOH
LDA X_REG+1
STA ARGSGN
EOR FACSGN
STA ARISGN
LDA ARGSGN
ORA #$80
STA ARGHO
LDA X_REG
STA ARGEXP
LDA FACEXP
RTS
;###################################
;###################################
YREGFAC		LDA Y_REG+4
STA FACLO
LDA Y_REG+3
STA FACMO
LDA Y_REG+2
STA FACMOH
LDA Y_REG+1
STA FACSGN
ORA #$80
STA FACHO
LDA Y_REG
STA FACEXP
LDA #0
STA FACOV
RTS
;###################################
;###################################
<IF BOOST>
BOOSTENABLE
LDA $D030
CMP #$FF
BNE C128
RTS
C128
LDA #1
STA BOOSTFLAG
LDA #0
STA BOOSTCNT
LDA $0314
STA IRQROUT
LDA $0315
STA IRQROUT+1
SEI
LDA #<MYRASTER
STA $0314
LDA #>MYRASTER
STA $0315
LDA #46
STA $D012
LDA $D011
AND #127
STA $D011
LDA $D01A
ORA #1
STA $D01A
CLI
RTS
MYRASTER
LDA $D019
BMI RASTER
LDA $DC0D
CLI
JMP $EA31
RASTER
STA $D019
LDA $D012
CMP #254
BCS SETSTART
LDA #0
STA $D030
LDA #254
STA $D012
JMP EXIT
SETSTART
LDA #1
STA $D030
LDA #46
STA $D012
EXIT
PLA
TAY
PLA
TAX
PLA
RTI
BOOSTFLAG
.BYTE 0
BOOSTCNT
.BYTE 0
IRQROUT
.WORD 0
NOBOOST
RTS
BOOSTOFF
LDA BOOSTFLAG
BEQ NOBOOST
SEI
LDA $D01A
AND #14
STA $D01A
LDA #0
STA $D030
INC BOOSTCNT
CLI
RTS
BOOSTON
LDA BOOSTFLAG
BEQ NOBOOST
LDA BOOSTCNT
BEQ BOOSTZERO	; Zero? Then just enable boost
BPL BOOSTNOV
LDA #0			; Counter >128, then reset it anyway (should not occur)
STA BOOSTCNT
JMP BOOSTZERO
BOOSTNOV
DEC BOOSTCNT
BNE NOBOOST
BOOSTZERO
SEI
LDA $D01A
ORA #1
STA $D01A
CLI
RTS
BOOSTDIASBLE
LDA BOOSTFLAG
BEQ NOBOOST
JSR BOOSTOFF
SEI
LDA IRQROUT
STA $0314
LDA IRQROUT+1
STA $0315
CLI
RTS
</IF>
;###################################
;###################################
FASTFSUBMEM
JSR MEMARG
FASTFSUBARG
LDA FACSGN
EOR #$FF
STA FACSGN
EOR ARGSGN
STA ARISGN
LDA FACEXP
JMP FASTFADDARG
;###################################
;###################################
FASTFADDMEM
JSR MEMARG
FASTFADDARG
BNE FADDRET2   		; JUMP IF FAC IS NOT ZERO.
JMP ARGFAC
FADDRET2	LDA ARGEXP
BNE FADDRET1   		; JUMP IF ARG IS NOT ZERO.
RTS
FADDRET1	SEC
SBC FACEXP
BEQ FFADD_EXPEQ     ; JUMP IF NO SHIFTING NEEDED. THE A REGISTER IS ALREADY ZERO.
BCC FFADD_SHFARG1   ; JUMP IF ARG NEEDS SHIFTING (HAS SMALLER EXPONENT).
; HERE, FAC IS THE SMALLEST OPERAND, AND ARG IS THE LARGEST.
; FAC WILL NEED TO BE SHIFTED RIGHT,
; COPY EXPONENT AND SIGN FROM ARG.
LDY ARGEXP
STY FACEXP
LDY ARGSGN
STY FACSGN
LDX #0
STX OLDOV      		; ARG HAS NO ROUNDING BITS.
LDX #FAC       		; INDICATE FAC IS THE SMALLEST OPERAND.
; A CONTAINS NUMBER OF BITS TO ROTATE RIGHT.
SEC
SBC #$08
BMI FFADD_SHFFAC2
; A >= 8, THEREFORE SHIFT RIGHT ONE BYTE.
FFADD_SHFFAC1
LDY FACLO      		; LO -> OV
STY FACOV
LDY FACMO      		; MO -> LO
STY FACMO+1
LDY FACMOH     		; MOH -> MO
STY FACMOH+1
LDY FACHO      		; HO -> MOH
STY FACHO+1
LDY #0
STY FACHO      		; 0 -> HO
SBC #$08       		; CARRY IS ALWAYS SET HERE.
BPL FFADD_SHFFAC1   ; JUMP IF MORE BYTES TO SHIFT.
FFADD_SHFFAC2
ADC #$08       		; CARRY IS ALWAYS CLEAR HERE.
BEQ FFADD_SHFFAC4   ; JUMP IF NO MORE SHIFTING.
TAY
LDA FACOV
FFADD_SHFFAC3
LSR FACHO      		; HO
ROR FACMOH     		; MOH
ROR FACMO      		; MO
ROR FACLO      		; LO
ROR            		; OV
DEY
BNE FFADD_SHFFAC3
JMP FFADD_MANADD2   ; NO MORE SHIFTING.
FFADD_SHFFAC4
LDA FACOV       	; THE A-REGISTER CONTAINS THE SHIFTED ROUNDING BITS OF FAC.
JMP FFADD_MANADD2
FFADD_EXPEQ
LDX FACOV
STX OLDOV
; OLDOV NOW CONTAINS ROUNDING BITS OF FAC.
; THE A-REGISTER CONTAINS THE ROUNDING BITS OF ARG (I.E. ZERO).
JMP FFADD_MANADD1
FFADD_SHFARG2
LDA FACOV      		; THE A-REGISTER CONTAINS THE SHIFTED ROUNDING BITS OF ARG.
JMP FFADD_MANADD1
FFADD_SHFARG1
LDX FACOV
STX OLDOV      		; OLDOV NOW CONTAINS ROUNDING BITS OF FAC.
LDX #$00       		; USE X-REGISTER FOR ROUNDING BITS OF ARG.
; -A CONTAINS NUMBER OF BITS TO ROTATE RIGHT.
; CARRY IS ALWAYS CLEAR HERE.
ADC #$08
BPL FFADD_SHFARG6   ; JUMP IF LESS THAN 8 SHIFTS.
FFADD_SHFARG3
LDX ARGLO      		; SHIFT RIGHT ONE BYTE
LDY ARGMO      		; MO -> LO
STY ARGMO+1
LDY ARGMOH     		; MOH -> MO
STY ARGMOH+1
LDY ARGHO      		; HO -> MOH
STY ARGHO+1
LDY #0
STY ARGHO      		; 0 -> HO
FFADD_SHFARG4
ADC #$08
BMI FFADD_SHFARG3
BEQ FFADD_SHFARG3
FFADD_SHFARG6
SBC #$08
BEQ FFADD_SHFARG2   ; JUMP IF NO MORE SHIFTING.
TAY
TXA            		; ROUNDING BITS.
FFADD_SHFARG5
LSR ARGHO
ROR ARGMOH
ROR ARGMO
ROR ARGLO
ROR         		; OV
INY
BNE FFADD_SHFARG5
FFADD_MANADD1
LDX #ARGEXP    		; INDICATE ARG IS THE SMALLEST OPERAND.
FFADD_MANADD2
BIT ARISGN
BMI FFADD_MANSUB1   ; JUMP IF OPERANDS HAVE DIFFERENT SIGN.
CLC
ADC OLDOV
STA FACOV
LDA FACLO
ADC ARGLO
STA FACLO
LDA FACMO
ADC ARGMO
STA FACMO
LDA FACMOH
ADC ARGMOH
STA FACMOH
LDA FACHO
ADC ARGHO
STA FACHO
BCC FFADD_RNDRTS
INC FACEXP
BEQ FFADD_OVERR
; CARRY BIT IS SET HERE.
ROR FACHO
ROR FACMOH
ROR FACMO
ROR FACLO
ROR FACOV
FFADD_RNDRTS
RTS
FFADD_OVERR
JMP ILLEGALQUANTITY
FFADD_MANSUB1
LDY #FACEXP
CPX #ARGEXP
BEQ FFADD_MANSUB2
LDY #ARGEXP
FFADD_MANSUB2
SEC            		; NEGATE THE ROUNDING BITS BEFORE ADDING.
EOR #$FF
ADC OLDOV
STA FACOV
LDA 4,Y
SBC 4,X
STA FACLO
LDA 3,Y
SBC 3,X
STA FACMO
LDA 2,Y
SBC 2,X
STA FACMOH
LDA 1,Y
SBC 1,X
STA FACHO
BCS FCNORMAL
LDA FACSGN
EOR #$FF
STA FACSGN
LDA FACHO
EOR #$FF
STA FACHO
LDA FACMOH
EOR #$FF
STA FACMOH
LDA FACMO
EOR #$FF
STA FACMO
LDA FACLO
EOR #$FF
STA FACLO
LDA FACOV
EOR #$FF
CLC
ADC #1
STA FACOV
BNE FCNORMAL
INC FACLO
BNE FCNORMAL
INC FACMO
BNE FCNORMAL
INC FACMOH
BNE FCNORMAL
INC FACHO
FCNORMAL  	BIT FACHO
BMI FFADD_RET       ; JUMP IF NUMBER IS ALREADY NORMALIZED.
LDA #0         		; NUMBER OF BITS ROTATED.
CLC
FFADD_NORM3
LDX FACHO
BNE FFADD_NORM1
LDX FACHO+1
STX FACHO
LDX FACMOH+1
STX FACMOH
LDX FACMO+1
STX FACMO
LDX FACOV
STX FACLO
LDX #0
STX FACOV
ADC #$08
CMP #$20
BNE FFADD_NORM3
JMP FFADD_ZEROFAC
FFADD_NORM2
CLC
ADC #1
ASL FACOV
ROL FACLO
ROL FACMO
ROL FACMOH
ROL FACHO
FFADD_NORM1
BPL FFADD_NORM2     ; WE MUST SHIFT LEFT ONE BIT
SEC
SBC FACEXP
BCS FFADD_ZEROFAC
EOR #$FF
CLC
ADC #1
STA FACEXP
FFADD_RET   RTS
FFADD_ZEROFAC
LDX #0
STX FACEXP
STX FACSGN
RTS
;###################################
;###################################
FASTFMULMEM
JSR MEMARG
FASTFMULARG
BEQ FFMUL_MULTRT    ; JUMP IF FAC IS ZERO.
LDA ARGEXP
BEQ FFMUL_ZEREMV    ; JUMP IF ARG IS ZERO.
CLC
ADC FACEXP
BCC FFMUL_TRYOFF
CLC
BPL FFMUL_ADJUST
JMP ILLEGALQUANTITY
FFMUL_ZEREMV
LDY #0
STY FACEXP     		; RESULT IS ZERO.
STY FACSGN
FFMUL_MULTRT
RTS
FFMUL_TRYOFF
BPL FFMUL_ZEREMV    ; JUMP IF UNDERFLOW.
FFMUL_ADJUST
ADC #$80       		; CARRY IS ALWAYS CLEAR HERE.
BEQ FFMUL_ZEREMV    ; JUMP IF UNDERFLOW.
STA FACEXP
LDA ARISGN
STA FACSGN
LDY #0
STY RESHOP
STY RESHO
STY RESMOH
STY RESMO
STY RESLO
STY RESOV
STY FACHOP
FFMUL_B0
LSR ARGLO      		; B0
BCC FFMUL_B1
LDA RESOV
CLC
ADC FACMOH     		; A2
STA RESOV
LDA RESLO
ADC FACHO      		; A3
STA RESLO
LDA RESMO
ADC FACHOP     		; A4
STA RESMO
BCC FFMUL_B1
INC RESMOH
BNE FFMUL_B1
INC RESHO
BNE FFMUL_B1
INC RESHOP
FFMUL_B1
LSR ARGMO      		; B1
BCC FFMUL_B2
LDA RESOV
CLC
ADC FACMO      		; A1
STA RESOV
LDA RESLO
ADC FACMOH     		; A2
STA RESLO
LDA RESMO
ADC FACHO      		; A3
STA RESMO
LDA RESMOH
ADC FACHOP     		; A4
STA RESMOH
BCC FFMUL_B2
INC RESHO
BNE FFMUL_B2
INC RESHOP
FFMUL_B2
LSR ARGMOH     		; B2
BCC FFMUL_B3
LDA RESOV
CLC
ADC FACLO      		; A0
STA RESOV
LDA RESLO
ADC FACMO      		; A1
STA RESLO
LDA RESMO
ADC FACMOH     		; A2
STA RESMO
LDA RESMOH
ADC FACHO      		; A3
STA RESMOH
LDA RESHO
ADC FACHOP     		; A4
STA RESHO
BCC FFMUL_B3
INC RESHOP
FFMUL_B3
LSR ARGHO      		; B3
BCC FFMUL_ROTA
LDA RESOV
CLC
ADC FACOV      		; AV
STA RESOV
LDA RESLO
ADC FACLO      		; A0
STA RESLO
LDA RESMO
ADC FACMO      		; A1
STA RESMO
LDA RESMOH
ADC FACMOH     		; A2
STA RESMOH
LDA RESHO
ADC FACHO      		; A3
STA RESHO
LDA RESHOP
ADC FACHOP     		; A4
STA RESHOP
FFMUL_ROTA
ASL FACOV
ROL FACLO
ROL FACMO
ROL FACMOH
ROL FACHO
ROL FACHOP
BMI FFMUL_FIN
JMP FFMUL_B0
FFMUL_FIN
LDA RESHOP
STA FACHO
LDA RESHO
STA FACMOH
LDA RESMOH
STA FACMO
LDA RESMO
STA FACLO
LDA RESLO
STA FACOV
JMP FCNORMAL    		; IN BASIC/XADD.S
MUL10
JSR ARGFAC      	; ARG = FAC; LEAVES EXPONENT IN A REGISTER.
TAX            		; EXPONENT
BEQ FFMUL_MUL101    ; RETURN IF ZERO.
CLC
ADC #2
BCS FFMUL_MUL102    ; JUMP IF OVERFLOW
STA FACEXP     		; STORE NEW EXPONENT.
LDY #0
STY ARISGN
JSR FASTFADDARG      ; THE Z FLAG IS CLEAR HERE.
INC FACEXP
BEQ FFMUL_MUL102     ; JUMP IF OVERFLOW
FFMUL_MUL101
RTS
FFMUL_MUL102
JMP ILLEGALQUANTITY
MUL6
JSR ARGFAC      	; ARG = FAC
TAX            		; EXPONENT
BEQ FFMUL_MUL61     ; RETURN IF ZERO.
INC FACEXP
BEQ FFMUL_MUL62     ; JUMP IF OVERFLOW
LDY #0
STY ARISGN
JSR FASTFADDARG      ; THE Z FLAG IS CLEAR HERE.
INC FACEXP
BEQ FFMUL_MUL62     ; OVERFLOW
FFMUL_MUL61
RTS
FFMUL_MUL62
JMP ILLEGALQUANTITY
;###################################
;###############################
INITVARS
JSR INITSTRVARS
LDA #0
LDY #4
REALINITLOOP0:
STA VAR_TC,Y
STA VAR_TB,Y
STA VAR_I,Y
STA VAR_RN,Y
STA VAR_TL,Y
STA VAR_SA,Y
STA VAR_N,Y
STA VAR_HS,Y
STA VAR_HE,Y
STA VAR_TI,Y
STA VAR_OT,Y
STA VAR_BU,Y
STA VAR_US,Y
STA VAR_UG,Y
STA VAR_UI,Y
STA VAR_UR,Y
STA VAR_LM,Y
STA VAR_LS,Y
STA VAR_T,Y
STA VAR_B3,Y
STA VAR_P,Y
STA VAR_D,Y
STA VAR_S,Y
STA VAR_ST,Y
STA VAR_SO,Y
STA VAR_EC,Y
STA VAR_UC,Y
STA VAR_HT,Y
DEY
BMI REALLOOPEXIT0
JMP REALINITLOOP0
REALLOOPEXIT0:
STA VAR_FF%
STA VAR_FF%+1
STA VAR_DC%
STA VAR_DC%+1
STA VAR_CN%
STA VAR_CN%+1
STA VAR_CK%
STA VAR_CK%+1
STA VAR_ER%
STA VAR_ER%+1
STA VAR_DO%
STA VAR_DO%+1
STA VAR_ML%
STA VAR_ML%+1
STA VAR_LB%
STA VAR_LB%+1
STA VAR_HB%
STA VAR_HB%+1
STA VAR_CL%
STA VAR_CL%+1
STA VAR_TT%
STA VAR_TT%+1
STA VAR_LE%
STA VAR_LE%+1
STA VAR_BR%
STA VAR_BR%+1
STA VAR_DD%
STA VAR_DD%+1
STA VAR_PT%
STA VAR_PT%+1
STA VAR_NC%
STA VAR_NC%+1
STA VAR_P%
STA VAR_P%+1
STA VAR_LV%
STA VAR_LV%+1
STA VAR_DN%
STA VAR_DN%+1
STA VAR_LF%
STA VAR_LF%+1
STA VAR_A%
STA VAR_A%+1
RTS
;###############################
; *** SUBROUTINES END ***
; *** CONSTANTS ***
CONSTANTS
; CONST: #0

CONST_0R	.REAL 0.0
; CONST: #147


; CONST: #14

CONST_2R	.REAL 14.0
; CONST: #8


; CONST: #6


; CONST: #1

CONST_5R	.REAL 1.0
; CONST: $
CONST_6	.BYTE 0
.STRG ""
; CONST: #4

CONST_7R	.REAL 4.0
; CONST: #64

CONST_8R	.REAL 64.0
; CONST: $Processing chunk
CONST_9	.BYTE 16
.STRG "Processing chunk"
; CONST: $...
CONST_10	.BYTE 3
.STRG "..."
; CONST: $Press any key!
CONST_11	.BYTE 14
.STRG "Press any key!"
; CONST: #255

CONST_12R	.REAL 255.0
; CONST: $Filename
CONST_13	.BYTE 8
.STRG "Filename"
; CONST: #10

CONST_14R	.REAL 10.0
; CONST: #9999999

CONST_15	.REAL 9999999
; CONST: #53266.0


; CONST: $-
CONST_17	.BYTE 1
.STRG "-"
; CONST: $.bin
CONST_18	.BYTE 4
.STRG ".bin"
; CONST: #2

CONST_19R	.REAL 2.0
; CONST: $Error: File not found!
CONST_20	.BYTE 22
.STRG "Error: File not found!"
; CONST: $Starting remote compiler...
CONST_21	.BYTE 27
.STRG "Starting remote compiler..."
; CONST: $WiCompile
CONST_22	.BYTE 9
.STRG "WiCompile"
; CONST: $?file=
CONST_23	.BYTE 6
.STRG "?file="
; CONST: $&sa=
CONST_24	.BYTE 4
.STRG "&sa="
; CONST: $&mh=
CONST_25	.BYTE 4
.STRG "&mh="
; CONST: $&cl=
CONST_26	.BYTE 4
.STRG "&cl="
; CONST: $ok
CONST_27	.BYTE 2
.STRG "ok"
; CONST: $Waiting for result...
CONST_28	.BYTE 21
.STRG "Waiting for result..."
; CONST: $?poll=1&file=
CONST_29	.BYTE 13
.STRG "?poll=1&file="
; CONST: $no
CONST_30	.BYTE 2
.STRG "no"
; CONST: $.
CONST_31	.BYTE 1
.STRG "."
; CONST: $000000
CONST_32	.BYTE 6
.STRG "000000"
; CONST: #90

CONST_33R	.REAL 90.0
; CONST: #23


; CONST: #32

CONST_35R	.REAL 32.0
; CONST: #18


; CONST: #200

CONST_37R	.REAL 200.0
; CONST: #199

CONST_38R	.REAL 199.0
; CONST: #5

CONST_39R	.REAL 5.0
; CONST: $Error
CONST_40	.BYTE 5
.STRG "Error"
; CONST: $error
CONST_41	.BYTE 5
.STRG "error"
; CONST: $Downloading file...
CONST_42	.BYTE 19
.STRG "Downloading file..."
; CONST: #16


; CONST: #201

CONST_44R	.REAL 201.0
; CONST: #11


; CONST: $Download?size=2048
CONST_46	.BYTE 18
.STRG "Download?size=2048"
; CONST: $&part=
CONST_47	.BYTE 6
.STRG "&part="
; CONST: $&file=
CONST_48	.BYTE 6
.STRG "&file="
; CONST: $ChunkedUpload
CONST_49	.BYTE 13
.STRG "ChunkedUpload"
; CONST: $&data=
CONST_50	.BYTE 6
.STRG "&data="
; CONST: $<$
CONST_51	.BYTE 2
.STRG "<$"
; CONST: $http://jpct.de/mospeed/ipget.php
CONST_52	.BYTE 32
.STRG "http://jpct.de/mospeed/ipget.php"
; CONST: $Getting remote address...
CONST_53	.BYTE 25
.STRG "Getting remote address..."
; CONST: $Address:
CONST_54	.BYTE 9
.STRG "Address: "
; CONST: #48


; CONST: #33


; CONST: #3

CONST_57R	.REAL 3.0
; CONST: #65


; CONST: #97


; CONST: #122


; CONST: $++
CONST_61	.BYTE 2
.STRG "++"
; CONST: #15

CONST_62R	.REAL 15.0
; CONST: $s:
CONST_63	.BYTE 2
.STRG "s:"
; CONST: $,prg,w
CONST_64	.BYTE 6
.STRG ",prg,w"
; CONST: $Loading '
CONST_65	.BYTE 9
.STRG "Loading '"
; CONST: $'...
CONST_66	.BYTE 4
.STRG "'..."
; CONST: $Compiled file:
CONST_67	.BYTE 15
.STRG "Compiled file: "
; CONST: $Press RETURN to load it now!
CONST_68	.BYTE 28
.STRG "Press RETURN to load it now!"
; CONST: $load
CONST_69	.BYTE 4
.STRG "load"
; CONST: #34


; CONST: $,
CONST_71	.BYTE 1
.STRG ","
; CONST: $,1
CONST_72	.BYTE 2
.STRG ",1"
; CONST: #145


; CONST: $Initializing wic64...
CONST_74	.BYTE 21
.STRG "Initializing wic64..."
; CONST: #87


; CONST: $Communication error!
CONST_76	.BYTE 20
.STRG "Communication error!"
; CONST: $Either there's no wic64 present
CONST_77	.BYTE 31
.STRG "Either there's no wic64 present"
; CONST: $or the connection has timed out!
CONST_78	.BYTE 32
.STRG "or the connection has timed out!"
; CONST: $load error (
CONST_79	.BYTE 12
.STRG "load error ("
; CONST: $)!
CONST_80	.BYTE 2
.STRG ")!"
; CONST: #192


; CONST: #30


; CONST: #76


; CONST: $Loading...
CONST_84	.BYTE 10
.STRG "Loading..."
; CONST: $universal
CONST_85	.BYTE 9
.STRG "universal"
; CONST: $MOSCloud - a remote BASIC compiler
CONST_86	.BYTE 34
.STRG "MOSCloud - a remote BASIC compiler"
; CONST: $by EgonOlsen71 / 2022
CONST_87	.BYTE 21
.STRG "by EgonOlsen71 / 2022"
; CONST: $F1 - Select source:
CONST_88	.BYTE 20
.STRG "F1 - Select source: "
; CONST: $F2 - Select drive:
CONST_89	.BYTE 18
.STRG "F2 - Select drive:"
; CONST: $F3 - Show directory
CONST_90	.BYTE 19
.STRG "F3 - Show directory"
; CONST: $F5 - Options
CONST_91	.BYTE 12
.STRG "F5 - Options"
; CONST: $F8 - Quit
CONST_92	.BYTE 9
.STRG "F8 - Quit"
; CONST: $F7 - Compile!
CONST_93	.BYTE 13
.STRG "F7 - Compile!"
; CONST: #133


; CONST: #134


; CONST: #135


; CONST: #136


; CONST: #140


; CONST: $Have a nice BASIC!
CONST_99	.BYTE 18
.STRG "Have a nice BASIC!"
; CONST: #137


; CONST: $MOSCloud - Options
CONST_101	.BYTE 18
.STRG "MOSCloud - Options"
; CONST: $F1 - Start address:
CONST_102	.BYTE 19
.STRG "F1 - Start address:"
; CONST: $ Default
CONST_103	.BYTE 8
.STRG " Default"
; CONST: $F3 - Memory hole at:
CONST_104	.BYTE 20
.STRG "F3 - Memory hole at:"
; CONST: $ None
CONST_105	.BYTE 5
.STRG " None"
; CONST: $ -
CONST_106	.BYTE 2
.STRG " -"
; CONST: $F5 - Compact level:
CONST_107	.BYTE 19
.STRG "F5 - Compact level:"
; CONST: $F8 - Refresh remote server:
CONST_108	.BYTE 27
.STRG "F8 - Refresh remote server:"
; CONST: $
CONST_109	.BYTE 5
.STRG "     "
; CONST: #7

CONST_110R	.REAL 7.0
; CONST: $F7 - Exit options menu
CONST_111	.BYTE 22
.STRG "F7 - Exit options menu"
; CONST: $$
CONST_112	.BYTE 1
.STRG "$"
; CONST: #160


; CONST: #9


; CONST: $Enter a new start address!
CONST_115	.BYTE 26
.STRG "Enter a new start address!"
; CONST: $Start address (in decimal)
CONST_116	.BYTE 26
.STRG "Start address (in decimal)"
; CONST: $?redo from start
CONST_117	.BYTE 16
.STRG "?redo from start"
; CONST: #-1.0

CONST_118	.REAL -1.0
; CONST: #53247

CONST_119	.REAL 53247
; CONST: #2049

CONST_120R	.REAL 2049.0
; CONST: $Invalid start address!
CONST_121	.BYTE 22
.STRG "Invalid start address!"
; CONST: $Enter addresses of the memory hole!
CONST_122	.BYTE 35
.STRG "Enter addresses of the memory hole!"
; CONST: $This memory section remains unused.
CONST_123	.BYTE 35
.STRG "This memory section remains unused."
; CONST: $Start of hole (in decimal)
CONST_124	.BYTE 26
.STRG "Start of hole (in decimal)"
; CONST: $End of hole (in decimal)
CONST_125	.BYTE 24
.STRG "End of hole (in decimal)"
; CONST: $Invalid end address!
CONST_126	.BYTE 20
.STRG "Invalid end address!"
; CONST: $Enter compact level!
CONST_127	.BYTE 20
.STRG "Enter compact level!"
; CONST: $Lower is more compact but slower.
CONST_128	.BYTE 33
.STRG "Lower is more compact but slower."
; CONST: $Compact level (3-6)
CONST_129	.BYTE 19
.STRG "Compact level (3-6)"
; CONST: $Invalid level!
CONST_130	.BYTE 14
.STRG "Invalid level!"
; CONST: #49976

CONST_131	.REAL 49976
; CONST: #49152

CONST_132	.REAL 49152
; CONST: #49155

CONST_133	.REAL 49155
; CONST: #49170.0

CONST_134	.REAL 49170.0
; CONST: #49173.0

CONST_135	.REAL 49173.0
; CONST: #49176.0

CONST_136	.REAL 49176.0
; CONST: #1792


; CONST: $test
CONST_138	.BYTE 4
.STRG "test"
;###############################
; ******** DATA ********
DATAS
.BYTE 2
.BYTE 1
.STRG "0"
.BYTE 2
.BYTE 1
.STRG "1"
.BYTE 2
.BYTE 1
.STRG "2"
.BYTE 2
.BYTE 1
.STRG "3"
.BYTE 2
.BYTE 1
.STRG "4"
.BYTE 2
.BYTE 1
.STRG "5"
.BYTE 2
.BYTE 1
.STRG "6"
.BYTE 2
.BYTE 1
.STRG "7"
.BYTE 2
.BYTE 1
.STRG "8"
.BYTE 2
.BYTE 1
.STRG "9"
.BYTE 2
.BYTE 1
.STRG "a"
.BYTE 2
.BYTE 1
.STRG "b"
.BYTE 2
.BYTE 1
.STRG "c"
.BYTE 2
.BYTE 1
.STRG "d"
.BYTE 2
.BYTE 1
.STRG "e"
.BYTE 2
.BYTE 1
.STRG "f"
.BYTE $FF
; ******** DATA END ********
CONSTANTS_END
;###################################
; *** VARIABLES ***
VARIABLES
; VAR: FF%
VAR_FF%	.WORD 0
; VAR: DC%
VAR_DC%	.WORD 0
; VAR: TC
VAR_TC	.REAL 0.0
; VAR: CN%
VAR_CN%	.WORD 0
; VAR: CK%
VAR_CK%	.WORD 0
; VAR: ER%
VAR_ER%	.WORD 0
; VAR: DO%
VAR_DO%	.WORD 0
; VAR: ML%
VAR_ML%	.WORD 0
; VAR: TB
VAR_TB	.REAL 0.0
; VAR: LB%
VAR_LB%	.WORD 0
; VAR: HB%
VAR_HB%	.WORD 0
; VAR: I
VAR_I	.REAL 0.0
; VAR: RN
VAR_RN	.REAL 0.0
; VAR: TL
VAR_TL	.REAL 0.0
; VAR: SA
VAR_SA	.REAL 0.0
; VAR: N
VAR_N	.REAL 0.0
; VAR: HS
VAR_HS	.REAL 0.0
; VAR: HE
VAR_HE	.REAL 0.0
; VAR: CL%
VAR_CL%	.WORD 0
; VAR: TI
VAR_TI	.REAL 0.0
; VAR: OT
VAR_OT	.REAL 0.0
; VAR: TT%
VAR_TT%	.WORD 0
; VAR: BU
VAR_BU	.REAL 0.0
; VAR: US
VAR_US	.REAL 0.0
; VAR: UG
VAR_UG	.REAL 0.0
; VAR: LE%
VAR_LE%	.WORD 0
; VAR: BR%
VAR_BR%	.WORD 0
; VAR: DD%
VAR_DD%	.WORD 0
; VAR: PT%
VAR_PT%	.WORD 0
; VAR: NC%
VAR_NC%	.WORD 0
; VAR: P%
VAR_P%	.WORD 0
; VAR: LV%
VAR_LV%	.WORD 0
; VAR: UI
VAR_UI	.REAL 0.0
; VAR: UR
VAR_UR	.REAL 0.0
; VAR: LM
VAR_LM	.REAL 0.0
; VAR: LS
VAR_LS	.REAL 0.0
; VAR: T
VAR_T	.REAL 0.0
; VAR: B3
VAR_B3	.REAL 0.0
; VAR: P
VAR_P	.REAL 0.0
; VAR: D
VAR_D	.REAL 0.0
; VAR: S
VAR_S	.REAL 0.0
; VAR: DN%
VAR_DN%	.WORD 0
; VAR: ST
VAR_ST	.REAL 0.0
; VAR: SO
VAR_SO	.REAL 0.0
; VAR: EC
VAR_EC	.REAL 0.0
; VAR: UC
VAR_UC	.REAL 0.0
; VAR: LF%
VAR_LF%	.WORD 0
; VAR: A%
VAR_A%	.WORD 0
; VAR: HT
VAR_HT	.REAL 0.0
STRINGVARS_START
; VAR: DA$
VAR_DA$	.WORD EMPTYSTR
; VAR: BY$
VAR_BY$	.WORD EMPTYSTR
; VAR: MG$
VAR_MG$	.WORD EMPTYSTR
; VAR: A$
VAR_A$	.WORD EMPTYSTR
; VAR: OF$
VAR_OF$	.WORD EMPTYSTR
; VAR: T$
VAR_T$	.WORD EMPTYSTR
; VAR: R$
VAR_R$	.WORD EMPTYSTR
; VAR: TF$
VAR_TF$	.WORD EMPTYSTR
; VAR: GU$
VAR_GU$	.WORD EMPTYSTR
; VAR: UR$
VAR_UR$	.WORD EMPTYSTR
; VAR: NS$
VAR_NS$	.WORD EMPTYSTR
; VAR: HS$
VAR_HS$	.WORD EMPTYSTR
; VAR: TI$
VAR_TI$	.WORD EMPTYSTR
; VAR: PT$
VAR_PT$	.WORD EMPTYSTR
; VAR: NF$
VAR_NF$	.WORD EMPTYSTR
; VAR: LL$
VAR_LL$	.WORD EMPTYSTR
; VAR: EM$
VAR_EM$	.WORD EMPTYSTR
; VAR: H$
VAR_H$	.WORD EMPTYSTR
; VAR: L$
VAR_L$	.WORD EMPTYSTR
; VAR: B$
VAR_B$	.WORD EMPTYSTR
STRINGVARS_END
STRINGARRAYS_START
; VAR: DT$[]
.BYTE 2
.WORD 82
VAR_DT$[]
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR
; VAR: HX$[]
.BYTE 2
.WORD 32
VAR_HX$[]
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
.WORD EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR EMPTYSTR
STRINGARRAYS_END
VARIABLES_END
; *** INTERNAL ***
Y_REG	.REAL 0.0
C_REG	.REAL 0.0
D_REG	.REAL 0.0
E_REG	.REAL 0.0
F_REG	.REAL 0.0
A_REG	.WORD 0
B_REG	.WORD 0
CMD_NUM	.BYTE 0
CHANNEL	.BYTE 0
SP_SAVE	.BYTE 0
TMP2_REG	.WORD 0
TMP3_REG	.WORD 0
TMP4_REG	.WORD 0
AS_TMP	.WORD 0
BPOINTER_TMP	.WORD 0
BASICTEXTP	.BYTE 0
STORE1	.WORD 0
STORE2	.WORD 0
STORE3	.WORD 0
STORE4	.WORD 0
GCSTART	.WORD 0
GCLEN	.WORD 0
GCWORK	.WORD 0
TMP_FREG	.REAL 0
TMP2_FREG	.REAL 0
TMP_FLAG	.BYTE 0
REAL_CONST_ONE	.REAL 1.0
REAL_CONST_ZERO	.REAL 0.0
REAL_CONST_MINUS_ONE	.REAL -1.0
CHLOCKFLAG	.BYTE 0
EMPTYSTR	.BYTE 0
FPSTACKP	.WORD FPSTACK
FORSTACKP	.WORD FORSTACK
DATASP	.WORD DATAS
LASTVAR	.WORD 0
LASTVARP	.WORD 0
HIGHP	.WORD STRBUF
STRBUFP	.WORD STRBUF
ENDSTRBUF	.WORD 0
INPUTQUEUEP	.BYTE 0
PROGRAMEND
INPUTQUEUE	.ARRAY $0F
FPSTACK .ARRAY 100
FORSTACK .ARRAY 340
STRBUF	.BYTE 0
